/*
 * (c) 2003 Open Source Geospatial Foundation - all rights reserved
 * This code is licensed under the GPL 2.0 license,
 * available at the root application directory.
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.geonetwork.search.ogcapi.records.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import java.util.Optional;
import org.geonetwork.search.ogcapi.records.generated.model.OgcApiRecordsExceptionDto;
import org.geonetwork.search.ogcapi.records.generated.model.OgcApiRecordsLandingPageDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2024-08-01T19:35:56.379122136+02:00[Europe/Paris]",
    comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Capabilities", description = "essential characteristics of this API")
public interface DefaultApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * GET / : landing page The landing page provides links to the API definition, the conformance
   * statements and to the record collections in this dataset.
   *
   * @return The landing page provides links to the API definition (link relations
   *     &#x60;service-desc&#x60; and &#x60;service-doc&#x60;), the Conformance declaration (path
   *     &#x60;/conformance&#x60;, link relation &#x60;conformance&#x60;), and the Record
   *     Collections (path &#x60;/collections&#x60;, link relation &#x60;data&#x60;). (status code
   *     200) or A server error occurred. (status code 500)
   */
  @Operation(
      operationId = "getLandingPage",
      summary = "landing page",
      description =
          "The landing page provides links to the API definition, the conformance statements and to"
              + " the record collections in this dataset.",
      tags = {"Capabilities"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description =
                "The landing page provides links to the API definition (link relations"
                    + " `service-desc` and `service-doc`), the Conformance declaration (path"
                    + " `/conformance`, link relation `conformance`), and the Record Collections"
                    + " (path `/collections`, link relation `data`).",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiRecordsLandingPageDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiRecordsLandingPageDto.class))
            }),
        @ApiResponse(
            responseCode = "500",
            description = "A server error occurred.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiRecordsExceptionDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiRecordsExceptionDto.class))
            })
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/",
      produces = {"application/json", "text/html"})
  default ResponseEntity<OgcApiRecordsLandingPageDto> getLandingPage() {

    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"linkTemplates\" : [ { \"hreflang\" : \"en\", \"varBase\" :"
                          + " \"http://example.com/aeiou\", \"created\" :"
                          + " \"2000-01-23T04:56:07.000+00:00\", \"uriTemplate\" :"
                          + " \"http://data.example.com/buildings/(building-id}\", \"rel\" :"
                          + " \"alternate\", \"length\" : 6, \"type\" : \"application/geo+json\","
                          + " \"title\" : \"Trierer Strasse 70, 53115 Bonn\", \"updated\" :"
                          + " \"2000-01-23T04:56:07.000+00:00\" }, { \"hreflang\" : \"en\","
                          + " \"varBase\" : \"http://example.com/aeiou\", \"created\" :"
                          + " \"2000-01-23T04:56:07.000+00:00\", \"uriTemplate\" :"
                          + " \"http://data.example.com/buildings/(building-id}\", \"rel\" :"
                          + " \"alternate\", \"length\" : 6, \"type\" : \"application/geo+json\","
                          + " \"title\" : \"Trierer Strasse 70, 53115 Bonn\", \"updated\" :"
                          + " \"2000-01-23T04:56:07.000+00:00\" } ], \"description\" : \"Access to"
                          + " data about buildings in the city of Bonn via a Web API that conforms"
                          + " to the OGC API Features specification.\", \"links\" : [ {"
                          + " \"hreflang\" : \"en\", \"rel\" : \"alternate\", \"length\" : 0,"
                          + " \"href\" : \"http://data.example.com/buildings/123\", \"type\" :"
                          + " \"application/geo+json\", \"title\" : \"Trierer Strasse 70, 53115"
                          + " Bonn\" }, { \"hreflang\" : \"en\", \"rel\" : \"alternate\","
                          + " \"length\" : 0, \"href\" : \"http://data.example.com/buildings/123\","
                          + " \"type\" : \"application/geo+json\", \"title\" : \"Trierer Strasse"
                          + " 70, 53115 Bonn\" } ], \"title\" : \"Buildings in Bonn\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/html"))) {
                  String exampleString = "Custom MIME type example not yet supported: text/html";
                  ApiUtil.setExampleResponse(request, "text/html", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"code\" : \"code\", \"description\" : \"description\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/html"))) {
                  String exampleString = "Custom MIME type example not yet supported: text/html";
                  ApiUtil.setExampleResponse(request, "text/html", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
