{"config":{"lang":["en","fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GeoNetwork 5","text":"<p>Welcome to GeoNetwork 5 documentation!  This documentation refers to the version 5, that is currently under development.</p>"},{"location":"#looking-for-other-versions","title":"Looking for other versions?","text":"<ul> <li>GeoNetwork Latest Documentation </li> <li>GeoNetwork Stable Documentation </li> </ul>"},{"location":"#whats-new-in-geonetwork-5","title":"What\u2019s new in GeoNetwork 5","text":"<p>GeoNetwork 5 is the next big step in the project\u2019s evolution. Its highlight is native support for the OGC API Records standard, bringing web-native, standards-based catalog services. Even though it\u2019s still under development, you can already run it alongside GeoNetwork 4.4 and publish your existing catalogs through this new API, combining the stability of today with the possibilities of tomorrow.</p>"},{"location":"#learn-more","title":"Learn more","text":"<ul> <li> <p> Integration with GN4</p> <p>How to use GN5 and GN4 together via the proxy gateway.</p> </li> </ul> <ul> <li> <p> OGCAPI-Records</p> <p>Details of the implementation in GeoNetwork 5.</p> </li> </ul> <ul> <li> <p> Developer docs</p> <p>Guides for contributing and extending GeoNetwork.</p> </li> </ul>"},{"location":"#get-involved","title":"Get Involved","text":"<p>GeoNetwork is an open-source project, and its future depends on the community. There are several ways you can help shape GeoNetwork 5 and beyond:</p> <ul> <li>Contribute code: Join the ongoing development and help build the next generation of metadata catalog services. A great first step is to join our Developers Meeting.</li> <li>Sponsor developments: Support the project financially and help prioritize new features. Check out the 2025 Sponsorship Opportunities.</li> </ul> <p>Every contribution helps keep GeoNetwork strong, open, and innovative for the future.</p>"},{"location":"Developer/","title":"GeoNetwork 5 Developer Documentation","text":"<p>Welcome to the GeoNetwork developer documentation! This guide provides a high-level overview of the project\u2019s architecture, design principles, and technical foundations. Whether you\u2019re contributing code, integrating services, or deploying GeoNetwork in your environment, this documentation will help you get started.</p> <p>Content of this documentation</p> <ul> <li>Formatters: Guide to understand formatters and how to implement them.</li> <li>Security inside GN5: Internal GN5 security</li> </ul>"},{"location":"Developer/formatters/","title":"GeoNetwork Formatters","text":"<p>The GeoNetwork formatter system provides a flexible architecture for transforming metadata records into various output formats. This guide explains the basic design and how to implement custom formatters.</p>"},{"location":"Developer/formatters/#architecture-components","title":"Architecture Components","text":""},{"location":"Developer/formatters/#1-formatter-interface","title":"1. Formatter Interface","text":"<p>The core <code>Formatter</code> interface defines the contract for all formatters:</p> <pre><code>public interface Formatter {\n    void format(Metadata metadata, String formatterId, OutputStream outputStream, \n                Map&lt;String, Object&gt; config) throws IOException;\n\n    boolean isFormatterAvailable(Metadata metadata, String formatterId);\n}\n</code></pre> <p>Key responsibilities: - Transform metadata into a specific output format - Write the formatted content to an output stream - Check formatter availability for given metadata</p>"},{"location":"Developer/formatters/#2-formatterapi","title":"2. FormatterApi","text":"<p>The <code>FormatterApi</code> class provides high-level operations for formatting:</p> <ul> <li>Access Control: Validates user permissions before formatting</li> <li>Formatter Discovery: Lists available formatters for schemas and metadata</li> <li>Formatter Selection: Finds appropriate formatter based on ID and profile</li> </ul> <p>Key methods: - <code>getRecordFormattedBy()</code>: Main entry point for formatting a metadata record - <code>getAvailableFormattersForSchema()</code>: Lists formatters for a specific schema - <code>getAllFormatters()</code>: Returns all formatters organized by MIME type and profile</p> <p>(Check FormatterApi class for more methods and updated informations)</p>"},{"location":"Developer/formatters/#formatter-types","title":"Formatter Types","text":""},{"location":"Developer/formatters/#1-java-based-formatters-indexformatter-pattern","title":"1. Java-based Formatters (IndexFormatter Pattern)","text":"<p>These formatters work by programmatically transforming data using Java code.</p> <p>Example: IndexFormatter - Retrieves metadata from the search index or from the database - Transforms using Java code or delegates to a processor - Outputs JSON or custom format via processor</p> <p>Advantages: - Full programmatic control - Can integrate with any Java library - Easy unit testing</p> <p>Relevant discussion here</p>"},{"location":"Developer/formatters/#2-xslt-based-formatters-xsltformatter-pattern","title":"2. XSLT-based Formatters (XsltFormatter Pattern)","text":"<p>These formatters use XSLT stylesheets to transform XML metadata, using legacy approach.</p> <p>Example: XsltFormatter - Loads XSLT - Applies transformation to metadata XML - Outputs transformed result</p> <p>Advantages: - Reuse of XML-to-XML transformations developer in metadata101 schemas - Better for XML sources</p> <p>Disvantages: - XSLT availability depends on original schema of XML.</p>"},{"location":"Developer/formatters/#implementing-a-new-formatter","title":"Implementing a New Formatter","text":""},{"location":"Developer/formatters/#option-1-java-based-formatter","title":"Option 1: Java-based Formatter","text":"<ol> <li>Create the formatter class:</li> </ol> <pre><code>@Component\npublic class MyCustomFormatter implements Formatter {\n\n    @Override\n    public void format(Metadata metadata, String formatterId, \n                      OutputStream outputStream, Map&lt;String, Object&gt; config) \n                      throws IOException {\n        try {\n            // 1. Extract data from metadata\n            String metadataXml = metadata.getData();\n\n            // 2. Transform the data\n            String formatted = transformMetadata(metadataXml, config);\n\n            // 3. Write to output stream\n            outputStream.write(formatted.getBytes(StandardCharsets.UTF_8));\n            outputStream.flush();\n\n        } catch (Exception e) {\n            throw new FormatterException(\"Failed to format metadata\", e);\n        }\n    }\n\n    @Override\n    public boolean isFormatterAvailable(Metadata metadata, String formatterId) {\n        // Check if this formatter can handle the metadata\n        return \"myformat\".equals(formatterId);\n    }\n\n    private String transformMetadata(String xml, Map&lt;String, Object&gt; config) {\n        // Your transformation logic here\n        // Can use config for parameters like language, style, etc.\n        return transformedContent;\n    }\n}\n</code></pre> <ol> <li>Register with FormatterFactory:</li> <li>Ensure your formatter is picked up by Spring's component scan</li> <li>Configure in FormatterFactory if needed</li> </ol>"},{"location":"Developer/formatters/#option-2-xslt-based-formatter","title":"Option 2: XSLT-based Formatter","text":"<ol> <li>Create XSLT stylesheet:</li> </ol> <p>Place your XSLT file in the appropriate location:    <pre><code>src/main/resources/schemas/{schema-id}/formatter/{formatter-id}/view.xsl\n</code></pre></p> <p>Example XSLT:    <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"2.0\" \n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n    &lt;xsl:output method=\"html\" encoding=\"UTF-8\"/&gt;\n\n    &lt;xsl:template match=\"/\"&gt;\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;h1&gt;&lt;xsl:value-of select=\"//title\"/&gt;&lt;/h1&gt;\n                &lt;!-- Your transformation here --&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n    &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre></p> <ol> <li>Use XsltFormatter:</li> <li>The existing <code>XsltFormatter</code> will automatically pick up your XSLT</li> <li>No Java code needed!</li> </ol>"},{"location":"Developer/formatters/#option-3-custom-processor-with-indexformatter","title":"Option 3: Custom Processor with IndexFormatter","text":"<p>For complex transformations that need index data:</p> <ol> <li>Create a processor:</li> </ol> <pre><code>@Component\npublic class MyIndexFormatterProcessor implements IndexFormatterProcessor {\n\n    @Override\n    public void process(IndexRecord indexDocument, OutputStream outputStream, \n                       Map&lt;String, Object&gt; config) throws IOException {\n        // Transform index record to your format\n        MyFormat result = convertToMyFormat(indexDocument);\n\n        // Serialize and write\n        objectMapper.writeValue(outputStream, result);\n    }\n}\n</code></pre> <ol> <li>Register in IndexFormatterProcessorFactory: <pre><code>public IndexFormatterProcessor getFormatterProcessor(String formatterId) {\n    if (\"myformat\".equals(formatterId)) {\n        return myIndexFormatterProcessor;\n    }\n    return null;\n}\n</code></pre></li> </ol>"},{"location":"Developer/tech-security/","title":"Tech security","text":""},{"location":"Developer/tech-security/#security-inside-gn5","title":"Security inside GN5","text":"<p>NOTE: this is about the internal GN5 security.  See the GN4-Integration for detail on the GN5-&gt;GN4 proxy security.</p>"},{"location":"Developer/tech-security/#overview","title":"Overview","text":"<ol> <li>Use <code>AuthenticationFacade</code> for most of your authentication needs</li> <li> <p><code>AuthenticationFacade#geonetworkPermissions()</code> has most of the permissions you will need.  It is built when a user logs in.  It contains;</p> <p>a. Username</p> <p>b. UserId (as per GN database)</p> <p>c. HighestProfile (ie. GN database's Profile)</p> <p>d. Map that goes from Profile -&gt; List of group ids the user has that profile for</p> <p>e. Map that goes from Group id -&gt; List of profiles that the user has for that profile</p> <p>NOTE: for anonymous user, they do not have a username/userid or permissions.  They only have <code>Profile.Guest</code> as their highest profile.</p> </li> <li> <p>You shouldn't be accessing <code>Usergroups</code> or the <code>UsergroupRepository</code> - use the  <code>AuthenticationFacade</code> permissions.</p> </li> <li>You shouldn't be doing anything with <code>\"ROLE_*\"</code> type roles - use the  <code>AuthenticationFacade</code> permissions.</li> </ol>"},{"location":"GN4-Integration/","title":"GeoNetwork 5 Integration with GeoNetwork 4","text":"<p>During the development of GN5, GN4 will be used for some of the GN functionality.  GN5 will route some requests to a GN4 instance (connected to the same DB and Elastic Index) for processing.</p>"},{"location":"GN4-Integration/#setting-up-gn5-and-gn4","title":"Setting up GN5 and GN4","text":"<ol> <li>Configure GN5 (<code>application.yml</code>) so that the <code>cloud: gateway: mvc:</code> configuration points to your GN4</li> <li> <p>Ensure that GN4 is setup to be proxied:</p> <p>a) Go the GN4's settings (\"Catalog server\" section)  b) Set this section up so it will create urls that will be correctly routed through GN5 (ie. use GN5's hostname and port) c) Your GN4's path should be the same as the GN5's proxy path.  This will ensure that GN4's session cookies are correctly maintained    For example, GN5's proxy at <code>http://&lt;host&gt;:&lt;port&gt;/geonetwork</code> and GN4 at <code>http://&lt;other host&gt;:&lt;other port&gt;/geonetwork</code>    (both at <code>/geonetwork</code>)</p> </li> <li> <p>Configure GN4 with JWT Headers Security and add the GN5 <code>application.yml</code> <code>cloud: gateway: mvc:</code> filter.</p> <p>a) JWT-Based Authentication - recommended for most installations  b) Simple Authentication - easier to configure, but GN4 must not be accessible via the internet or intranet.</p> </li> </ol> <p>You will manage users in the GN database.</p>"},{"location":"GN4-Integration/#using-github-oidc-authentication","title":"Using GitHub OIDC Authentication","text":"<p>Typically, you would use the standard username/password authentication thats built into GN5.  However, GitHub authentication is also available.</p> <ol> <li>Create a GitHub application (this will give you a <code>clientId</code>).  Got to https://github.com/settings/profile then \"Developer settings\" (left column) then \"OAuth Apps\" (left column).  See online tutorials on how to create one.<ul> <li>\"Authorization callback URL\" -  http://localhost:7979/login/oauth2/code/github (use your GN5's host address)</li> </ul> </li> <li>Create a GitHub clientSecret (this will give you a <code>clientSecret</code>)</li> <li> <p>Add the <code>clientId</code> and <code>clientSecret</code> to GN5's <code>application.yml</code> section <code>security: oauth2: client: registration: github:</code></p> <ul> <li>fill in the  <code>clientId:</code> and <code>clientSecret:</code> sections</li> <li>choose the attribute name to use as the GeoNetwork username</li> </ul> </li> </ol> <pre><code> security:\n    oauth2:\n      client:\n        registration:\n          github:\n            clientId:  ...from your GitHub application...\n            clientSecret: ...from your GitHub application...\n        # this is optional: \n        provider:\n          github:\n            user-name-attribute: login\n</code></pre> <p>You can also customize how the user is created in the GeoNetwork database from attributes in the OIDC/OAUTH2 user from the IDP:</p> <pre><code>geonetwork:\n  security:\n    oauth2:\n      registration:\n        github:\n          email: email\n          name: login\n          organization: company\n          surname: lastname\n        custom:\n          email: email\n          name: first_name\n          organization: company\n          surname: last_name\n</code></pre> <p>One the main GN5 (http://localhost:7979) click \"GitHub\" and you will be redirected for GitHub's authentication.</p> <p>Once the user logs into GN5, it will create a user in the database.  The username will either be their email (if they have configured GitHub to have their email address public) or their GitHub username.</p> <p>Use the tools in the GN Administration -&gt; \"Users and Groups\" to set the user's permissions.</p>"},{"location":"GN4-Integration/auth-json/","title":"Simple Authentication between GN4 and GN5 with JSON","text":"<p>[!WARNING] If your GN4 is accessible through other means than GN5 (i.e. via the internet or intranet), use the JWT version. A malicious actor can add a header to the requests and directly communicate with GN4.  GN4 would then trust this header.</p>"},{"location":"GN4-Integration/auth-json/#gn5-setup","title":"GN5 setup","text":"<p>In <code>application.yml</code> (cloud: gateway: mvc), add the \"filters\" (at the bottom): <pre><code>  cloud:\n    gateway:\n      mvc:\n        routes:\n          - id: geonetwork_route\n            uri: ${geonetwork.4.url}\n            predicates:\n              - Path=/geonetwork/**\n            filters:\n              - addSimpleGn4SecurityHeader=gn5.to.gn4.trusted.json.auth\n</code></pre> <code>gn5.to.gn4.trusted.json.auth</code> is the name of the header that will be attached to the requests so auth is recognized by GN4's JWT Headers Security module (see below).</p> <p>This header will, typically, look like this:</p> <pre><code>{\n      \"username\":\"david\"\n}      \n</code></pre>"},{"location":"GN4-Integration/auth-json/#gn4-setup","title":"GN4 setup","text":"<ol> <li>You will need the JWT Headers security model (available in the latest GN4)</li> <li>Set it up with the environment variables, see below.</li> <li>Run with JWT Headers enabled <code>-Dgeonetwork.security.type=gn5</code></li> <li> <p>GN4 must NOT be accessible other than via the GN4 Gateway proxy.  GN4 is trusting headers so they must be removed.</p> </li> <li> <p>If GN4 is available, you MUST remove the <code>gn5.to.gn4.trusted.json.auth</code> header from incoming requests (typically done with your webserver)</p> </li> </ol> <pre><code>JWTHEADERS_UserNameHeaderName=gn5.to.gn4.trusted.json.auth\nJWTHEADERS_UserNameFormat=JSON\nJWTHEADERS_UserNameJsonPath=username\nJWTHEADERS_JwtHeaderRoleSource=DB\nJWTHEADERS_UpdateProfile=false\nJWTHEADERS_UpdateGroup=false\n</code></pre> <p>Environment variables meaning:</p> <ul> <li><code>JWTHEADERS_UserNameHeaderFormat</code>  - name of the header to use (should be the same as your GN5 <code>application.yml</code> filter config)</li> <li><code>JWTHEADERS_UserNameFormat</code> - should be JSON (the header is a JSON string)</li> <li><code>JWTHEADERS_UserNameJsonPath</code> - where in the JSON is the username</li> <li><code>JWTHEADERS_JwtHeaderRoleSource</code> - this should be <code>DB</code> (GN DB will manage user-profile-groups)</li> <li><code>JWTHEADERS_UpdateProfile</code> -  JWT Headers should NOT update the DB profiles (user allowed to edit in GUI)</li> <li><code>JWTHEADERS_UpdateGroup</code> -  JWT Headers should NOT update the DB user-groups (user allowed to edit in GUI)</li> </ul> <p>See the GN JWT Headers documentation for more info.</p> <p>In <code>config-security.properties</code>, configure the URLs for login and logout to point to GN5:</p> <pre><code>logout.success.url=http://localhost:7979/geonetwork/srv/eng/catalog.search\nloginForm=http://localhost:7979/geonetwork/srv/eng/catalog.signin\nloginErrorForm=http://localhost:7979/geonetwork/srv/eng/catalog.signin?failure=true\n</code></pre> <p>In UI configuration, you need to enable the authentication and set the signin/signout URLs to use the GN5 URLs:</p> <pre><code>     \"authentication\": {\n          \"enabled\": true,\n          \"signinUrl\": \"../../{{node}}/{{lang}}/catalog.signin\",\n          \"signinAPI\": \"../../api/user/signin\",\n          \"signoutUrl\": \"../../api/user/signout\"\n</code></pre>"},{"location":"GN4-Integration/auth-jwt/","title":"Secure Authentication between GN4 and GN5 with JWT","text":""},{"location":"GN4-Integration/auth-jwt/#securing-gn5-to-gn4-with-signed-jwt","title":"Securing GN5 to GN4 with signed JWT","text":"<p>A more secure way to secure send information to GN4 is to use signed JWT.  GN4 will verify they are correctly signed and prevent a malicious actor from faking a GN4 authentication token.</p> <p>To set this up:</p> <ol> <li>Generate an RSA private and public key</li> <li>Create a JWK Set containing the public key</li> <li>Configure GN5</li> <li>Configure GN4</li> </ol>"},{"location":"GN4-Integration/auth-jwt/#generate-an-rsa-private-and-public-key","title":"Generate an RSA private and public key","text":"<pre><code>openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout private.key -out certificate_pub.crt\n</code></pre> <p>This will generate:</p> <ol> <li><code>private.key</code> - use this in GN5.  Put this where it is accessible to GN5.  This must be secured since the private key is sensitive.</li> <li><code>certificate_pub.crt</code> - use this in the next step for GN4.  Put this where it is accessible to GN4.</li> </ol>"},{"location":"GN4-Integration/auth-jwt/#create-a-jwk-set-containing-the-public-key","title":"Create a JWK Set containing the public key","text":"<p>The standard way of handling JWT signature validation is to use a JWK Set.  This is fairly easy to do.</p> <p>[!WARNING] If you get an error like <code>ParseException: Missing required \"keys\" member</code> then you've likely forgotten to do the last step (impeding your JWK into another JSON file) that turns the generated JWK into a JWK Set.</p> <ol> <li>Use https://jwkset.com/generate to convert your <code>certificate_pub.crt</code> to a JWK.   a. copy the text from <code>certificate_pub.crt</code> into the first section - \"<code>PEM encoded key or certificate</code>\"    b. choose a <code>Key ID</code> (you'll need this, below)   c. <code>Key Algorithm</code> is \"RSA256\"   d. <code>Key Use</code> is \"Signature\"   e. Press \"Generate\"</li> <li>Create a file using the output JWT in the following format: <pre><code>{\n    \"keys\": [\n         ... TEXT FROM ABOVE ...\n    ]\n}\n</code></pre></li> <li>Save the file and make it accessible by GN4</li> </ol> <p>NOTE: There are other online/offline tools that do this.</p>"},{"location":"GN4-Integration/auth-jwt/#configure-gn5","title":"Configure GN5","text":"<p>In <code>application.yml</code>:</p> <pre><code>  cloud:\n    gateway:\n      mvc:\n        routes:\n         ...\n            filters:\n              - addSimpleJwtGn4SecurityHeader=gn5.to.gn4.trusted.json.auth,file:///Users/db/delme/key/private.key,mykeyid\n</code></pre> <p>The parameters to the <code>addSimpleJwtGn4SecurityHeader</code> filter are:  a) name of the header to use (must be the same as the GN4 configuration) b) URL to the private key (<code>private.key</code> generated above) c) Name of the <code>Key ID</code> (from above)</p>"},{"location":"GN4-Integration/auth-jwt/#configure-gn4","title":"Configure GN4","text":"<p>Sent environment variables like this;</p> <p>[!WARNING] If you are getting errors (especially about the JWT not being valid), the most likely issue is with these settings.  Please double check them.</p> <pre><code>JWTHEADERS_ValidateTokenAudienceClaimValue=g4.from.g5.proxy\nJWTHEADERS_ValidateTokenAudience=true\nJWTHEADERS_ValidateTokenAudienceClaimName=aud\nJWTHEADERS_ValidateTokenExpiry=true\nJWTHEADERS_ValidateToken=true\nJWTHEADERS_ValidateTokenSignatureURL=file:///Users/db/delme/jws.json\nJWTHEADERS_UpdateProfile=false\nJWTHEADERS_UpdateGroup=false\nJWTHEADERS_RolesHeaderName=gn5.to.gn4.trusted.json.auth\nJWTHEADERS_UserNameFormat=JWT\nJWTHEADERS_JwtHeaderRoleSource=DB\nJWTHEADERS_UserNameJsonPath=username\nJWTHEADERS_ValidateTokenAgainstURL=false\nJWTHEADERS_UserNameHeaderName=gn5.to.gn4.trusted.json.auth\n</code></pre>"},{"location":"GN4-Integration/auth-jwt/#audience-validation","title":"Audience Validation","text":"<p>This audience is put into the JWT by GN5.  It's optional (but recommended) to validate it.</p> <p><code>JWTHEADERS_ValidateTokenAudienceClaimValue=g4.from.g5.proxy</code> <code>JWTHEADERS_ValidateTokenAudience=true</code> <code>JWTHEADERS_ValidateTokenAudienceClaimName=aud</code></p>"},{"location":"GN4-Integration/auth-jwt/#token-expiry","title":"Token Expiry","text":"<p>Ensure the token hasn't expired yet.</p> <p><code>JWTHEADERS_ValidateTokenExpiry=true</code></p>"},{"location":"GN4-Integration/auth-jwt/#validate-signature","title":"Validate Signature","text":"<p>This should be URL to the JWK Set you created, above. NOTE: see below if you are using a file instead of a https location</p> <p><code>JWTHEADERS_ValidateTokenSignatureURL=file:///Users/db/delme/jws.json</code></p>"},{"location":"GN4-Integration/auth-jwt/#other-configuration","title":"Other configuration","text":"<p>This is the meaning of the other configuration options:</p> <p><code>JWTHEADERS_UserNameFormat=JWT</code> -- expect identity information to be in a JWT</p> <p><code>JWTHEADERS_UserNameJsonPath=username</code> -- json path (inside the JWT payload) of the username <code>JWTHEADERS_ValidateTokenAgainstURL=false</code> -- do not validate the token against the IDP <code>JWTHEADERS_UserNameHeaderName=gn5.to.gn4.trusted.json.auth</code>- name of the request header containing the JWT.  Must be the same as the GN5 configuration.</p> <p><code>JWTHEADERS_UpdateProfile=false</code> - manage user permissions and groups in the DB <code>JWTHEADERS_UpdateGroup=false</code>- manage user permissions and groups in the DB <code>JWTHEADERS_JwtHeaderRoleSource=DB</code> - manage user permissions and groups in the DB</p>"},{"location":"GN4-Integration/auth-jwt/#jwk-set-in-file","title":"JWK Set in File","text":"<p>The older implementation of JWT Headers isn't compatible with file-base URLs for the JWKSet.  This is fixed, but it will take a while for this to become \"official\" through the build chains.</p> <p>Use <code>python</code> to serve your JWK Set file;</p> <ol> <li>make a directory and put the JWK Set json file in it</li> <li>run:    <code>python3 -m http.server 9000</code></li> <li>Use \"http://localhost:9000/jwksets.json\" as the JWK Set url</li> </ol> <p>See the python documentation for security related to doing this.</p>"},{"location":"OGCAPI-Records/","title":"GeoNetwork 5 OGCAPI-Records","text":"<p>GeoNetwork 5 has an OGCAPI-Records implementation.</p> Run the OGCAPI-Records Demo Server Start Here!The best way to learn how to setup an OGCAPI-Records Server is to run the demo server.  This tutorial explains how to setup everything - PostgreSQL, Elastic, GeoNetwork 4, and GeoNetwork 5. It also shows how to connect metadata records to collections/catalogs/sources. Learn about the Extra Functionality GeoNetwork 5's OGCAPI-Records has some extra functionality to make users happy! Minor Differences with Specification There are some very minor differences between GN5's implementation and the specification. Configuring GN5's OGCAPI-Records Learn about some of the configuration options. Deploying GN5's OGCAPI-Records See some of the configuration options for easier deployment Learn some technical details For developers, this is a technical overview of the implementation. Content Negotiation and Profiles For developers, this is a technical overview of the implementation."},{"location":"OGCAPI-Records/config/","title":"Config","text":""},{"location":"OGCAPI-Records/config/#ogcapi-records-configuration-and-deployment","title":"OGCAPI-Records Configuration and Deployment","text":"<p>Most of the configuration for the OGCAPI-Records module are in the <code>application.yaml</code> (key: <code>geonetwork: openapi-records:</code>).  There are two sections - <code>links</code> and <code>search</code>.</p>"},{"location":"OGCAPI-Records/config/#links-section","title":"Links Section","text":"<p>The links section defines how the different OGCAPI-Records object have links in them.  Its unlikely you will need to modify this, however, there are two properties that will change for deployments.</p> property meaning ogcApiRecordsBaseUrl This the base url of the GN5 OGCAPI-Records installation.  It defaults to <code>http://localhost:7979/ogcapi-records/</code>. This is useful so links point to the correct location even if your OGCAPI-Records server is behind a reverse proxy. gnBaseUrl This is the base URL used for getting icons from GeoNetwork.  It defaults to <code>http://localhost:7979/geonetwork</code>.  You can either point to the GN5 proxied GN4 or directly to a running GN4."},{"location":"OGCAPI-Records/config/#search-section","title":"Search Section","text":"<p>The search section defines some configuration for how he GN5 OGCAPI-Record interacts with Elastic.</p> property meaning queryFilter This query filter is always added to all queries.  The default value is <code>+isTemplate:n</code> (do not return metadata record templates). queryBase When executing a normal <code>q=...</code> query, this defines how we do an elastic search.  The default value is <code>'(any.\\*:(${any}) OR resourceTitleObject.\\*:(${any})^2)'</code> (search <code>any</code> and <code>title</code>.  Give priority to <code>title</code> matches). trackTotalHits Should the elastic query track total hits?  Tracking total hits is expensive, however, is needed for paging. The default value is <code>true</code>. sources What elastic index json record sources (properties) should be retrieved during a query?   The default value is <code>[*]</code> (return all sources)."},{"location":"OGCAPI-Records/content-negotiation/","title":"Content Negotiation and Profiles","text":"<p>The GN5 OGCAPI-Records is integrated with the GN5 <code>FormatterApi</code>.  This allows outputting of various formats (like JSON, XML, and DCAT) for a record.</p> <p>There are two types of Formatters available:</p> <ol> <li>XSLT-Based Formatters</li> </ol> <p>Most formatters are of this type - they take the underlying XML and run a XSLT transformation to get the output.  These XSLTs need to be defined on a per-schema basis.  </p> <p>You can use the <code>FormatterApi</code> endpoints to see what is available (and for what schemas) - see the <code>FormatterController</code> and the <code>FormatterApi</code>.  A useful summary of available formatter is at http://localhost:7979/api/records/formatters.</p> <ol> <li>Elastic JSON Index-Based Formatters</li> </ol> <p>There are a few formatters (most notably the <code>ogcapi-record</code> JSON output) use the information in the Elastic JSON Index to create output.  This index is a schema-independent simple representation of the underlying metadata record (which is usually XML).  This is only used for simple output formats as a lot of information in the underlying XML record is lost.</p>"},{"location":"OGCAPI-Records/content-negotiation/#selecting-the-content","title":"Selecting the Content","text":"<p>In general, you can add <code>?f=&lt;mime type&gt;</code> to OGCAPI-Records requests to get content in a specific format.  For actual records, you can also request a Profile.</p> <p>For example;</p> <p>http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Frdf%2Bxml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Feu-dcat-ap-hvd</p> <p>We are requesting MimeType <code>application/rdf</code> (DCAT RDF) with the profile <code>http://geonetwork.net/def/profile/eu-geodcat-ap</code> (url encoded).</p>"},{"location":"OGCAPI-Records/content-negotiation/#default-profiles-for-mime-types","title":"Default Profiles for Mime Types","text":"<p>You can set default Profiles for a Mime Types in the <code>application.yaml</code> file (<code>geonetwork</code>.<code>openapi-records</code>.<code>links</code>.<code>item</code>):</p> <pre><code>profileDefaults:\n    - mimetype: application/geo+json\n        defaultProfile: http://www.opengis.net/def/profile/OGC/0/ogc-record\n    - mimetype: application/rdf+xml\n        defaultProfile: http://geonetwork.net/def/profile/dcat\n    - mimetype: application/xml\n        defaultProfile: http://geonetwork.net/def/profile/raw-xml\n    - mimetype: application/json\n        defaultProfile: http://geonetwork.net/def/profile/elastic-json-index\n</code></pre> <p>If someone doesn't put a Profile in the request, then this will choose the profile.</p>"},{"location":"OGCAPI-Records/content-negotiation/#links","title":"Links","text":"<p>When requesting in the <code>ogcapi-record</code> JSON format, Record documents will have links like:</p> <pre><code> \"links\": [\n    {\n      \"rel\": \"alternative\",\n      \"type\": \"application/xml\",\n      \"hreflang\": \"eng\",\n      \"profile\": [\n        \"http://geonetwork.net/def/profile/raw-xml\"\n      ],\n      \"href\": \"http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Fxml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Fraw-xml\"\n    },\n    {\n      \"rel\": \"alternative\",\n      \"type\": \"application/xml\",\n      \"hreflang\": \"eng\",\n      \"profile\": [\n        \"http://geonetwork.net/def/profile/datacite\"\n      ],\n      \"href\": \"http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Fxml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Fdatacite\"\n    },\n    {\n      \"rel\": \"alternative\",\n      \"type\": \"application/json\",\n      \"hreflang\": \"eng\",\n      \"profile\": [\n        \"http://geonetwork.net/def/profile/elastic-json-index\"\n      ],\n      \"href\": \"http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Fjson&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Felastic-json-index\"\n    },\n    {\n      \"rel\": \"alternative\",\n      \"type\": \"application/rdf+xml\",\n      \"hreflang\": \"eng\",\n      \"profile\": [\n        \"http://geonetwork.net/def/profile/eu-dcat-ap-hvd\"\n      ],\n      \"href\": \"http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Frdf%2Bxml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Feu-dcat-ap-hvd\"\n    },\n    {\n      \"rel\": \"alternative\",\n      \"type\": \"application/rdf+xml\",\n      \"hreflang\": \"eng\",\n      \"profile\": [\n        \"http://geonetwork.net/def/profile/eu-geodcat-ap\"\n      ],\n      \"href\": \"http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Frdf%2Bxml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Feu-geodcat-ap\"\n    },\n    ...\n]\n ```\n\n Notice that the link's `href` has a `&amp;profile...` part. If it is missing, the system will choose the default profile for that mime type (configured inside `application.yaml`)\n\n Looking at the `RDF+XML` content type in the links, above:\n ```\n{\n      \"rel\": \"alternative\",\n      \"type\": \"application/rdf+xml\",\n      \"hreflang\": \"eng\",\n      \"profile\": [\n        \"http://geonetwork.net/def/profile/eu-dcat-ap-hvd\"\n      ],\n      \"href\": \"http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Frdf%2Bxml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Feu-dcat-ap-hvd\"\n    },\n    {\n      \"rel\": \"alternative\",\n      \"type\": \"application/rdf+xml\",\n      \"hreflang\": \"eng\",\n      \"profile\": [\n        \"http://geonetwork.net/def/profile/eu-geodcat-ap\"\n      ],\n      \"href\": \"http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Frdf%2Bxml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Feu-geodcat-ap\"\n    },\n    {\n      \"rel\": \"alternative\",\n      \"type\": \"application/rdf+xml\",\n      \"hreflang\": \"eng\",\n      \"profile\": [\n        \"http://geonetwork.net/def/profile/dcat\"\n      ],\n      \"href\": \"http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Frdf%2Bxml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Fdcat\"\n    },\n    {\n      \"rel\": \"alternative\",\n      \"type\": \"application/rdf+xml\",\n      \"hreflang\": \"eng\",\n      \"profile\": [\n        \"http://geonetwork.net/def/profile/eu-dcat-ap\"\n      ],\n      \"href\": \"http:/localhost:7979/ogcapi-records/collections/1402ea86-2900-4cf7-b58a-f8d78bc051e4/items/51c6b2ac-3658-40b3-9a8f-0131ee74443f?f=application%2Frdf%2Bxml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Feu-dcat-ap\"\n    },\n</code></pre> <p>This shows that there are 4 profiles available (all in url format):</p> <ul> <li><code>http://geonetwork.net/def/profile/eu-dcat-ap-hvd</code></li> <li><code>http://geonetwork.net/def/profile/eu-geodcat-ap</code></li> <li><code>http://geonetwork.net/def/profile/dcat</code></li> <li><code>http://geonetwork.net/def/profile/eu-dcat-ap</code></li> </ul> <p>NOTE: these will likely change to a more authoritative URL.</p> <p>To get the <code>http://geonetwork.net/def/profile/eu-dcat-ap</code> profile, use:</p> <pre><code>http://localhost:7979/ogcapi-records/collections/&lt;collectionId&gt;/items/&lt;itemId&gt;?f=application/rdf+xml&amp;profile=http%3A%2F%2Fgeonetwork.net%2Fdef%2Fprofile%2Feu-geodcat-ap\n</code></pre> <p>NOTE: the profile name (url) has been url-encoded</p> <p>To get the default (defined in <code>application.yaml</code>) profile, use:</p> <pre><code>http://localhost:7979/ogcapi-records/collections/&lt;collectionId&gt;/items/&lt;itemId&gt;?f=application/rdf+xml\n</code></pre>"},{"location":"OGCAPI-Records/content-negotiation/#headers","title":"Headers","text":"<p>When requesting a Record (<code>item</code> endpoint), a <code>Link</code> header will be set in this manner:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/rdf+xml\nLink: &lt;http://geonetwork.net/def/profile/eu-geodcat-ap&gt;; rel=\"profile\"\n</code></pre> <p>Or, for the standard OGCAPI-Records <code>ogcapi-record</code> output:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\nLink: &lt;http://www.opengis.net/def/profile/OGC/0/ogc-record&gt;; rel=\"profile\"\n</code></pre>"},{"location":"OGCAPI-Records/content-negotiation/#more-information","title":"More Information","text":"<p>See the OGCAPI-Records specification.</p> <p>See this discussion on OGCAPI-Records and Profiles.</p>"},{"location":"OGCAPI-Records/content-negotiation/#technical-discussion-of-content-negotiation","title":"Technical Discussion of Content Negotiation","text":"<p>This is a technical discussion of how the Content Negotiation is working in the OGCAPI-Records and how it integrates with Spring Boot.</p> <p>One of the difficulties is that there are multiple output \"profiles\" for a single mime type.  For example, <code>application/rdf+xml</code> (i.e. DCAT) has several \"flavours\" of output (i.e. GEODCAT, DCAT, and country-specific DCAT-AP).  This is a bit more advanced for how spring boot does its Content Negotiation.</p>"},{"location":"OGCAPI-Records/content-negotiation/#simple-spring-boot-content-negotiation","title":"Simple Spring Boot Content Negotiation","text":"<p>In a typical spring boot application, there is a 1:1 correlation between the mime type in the request (i.e. either an <code>Accepts: ...</code> header or a <code>?f=&lt;mime type&gt;</code> parameter). </p> <p>This is setup with the <code>ContentNegotiationConfigurer</code> (cf. <code>WebConfig.java</code>) and registering a set of <code>HttpMessageConverter</code>.</p> <p><code>ContentNegotiationConfigurer</code> - This sets up how spring processes incoming requests and determines what Mime Type to use.  For example, it converts <code>&amp;f=json</code> into <code>application/json</code>.</p> <p><code>HttpMessageConverter</code> - These convert an object (i.e. result from the controller endpoint) into the corresponding Mime Type format.  Typically, for an <code>application/json</code> request, it will use the Jackson <code>ObjectMapper</code> to convert to an actual JSON string.</p> <p>In summary, the typical spring boot content negotiation is:</p> <p>a) controller's result object - this is the main work of the OGCAPI-Records codebase   b) user's requested Mime Type - the <code>ContentNegotiationConfigurer</code> determines this   c) respond with the converted result object - this is done with a <code>HttpMessageConverter</code> </p> <p>Spring boot will take the incoming request, determines the requested MimeType (<code>ContentNegotiationConfigurer</code>), then execute the controller endpoint.  The result object is then passed to the correct <code>HttpMessageConverter</code> which will write the output to the Http Response.</p> <p>NOTE:</p> <p>If you look at the <code>HttpMessageConverter</code>, its only really given the controllers result object and the Mime Type.  Is very disconnected from the original request.</p>"},{"location":"OGCAPI-Records/content-negotiation/#gn5s-ogcapi-records-content-negotiation","title":"GN5's OGCAPI-Records Content Negotiation","text":"<p>There are a few complexities with OGCAPI-Records and how its integrated into the GN5 <code>FormatterApi</code>.  </p> <ol> <li>The output configuration is dynamic - OGCAPI-Records doesn't apriori know the MimeType (and profiles) that it supports.</li> <li>The output requires both the MimeType (i.e. <code>application/rdf+xml</code>) and a profile (i.e. <code>dcat-ap-nl</code>).</li> </ol> <p>The OGCAPI team recently added support for profiles (and profile negotiation).</p> <p>Internally, on startup, the <code>FormatterApi</code> is queried for the supported MimeTypes (cf. <code>WebConfig.java</code>) and the <code>FormatterApiMessageWriter</code> is created.</p> <p><code>FormatterApiMessageWriter</code> is configured (by querying the <code>FormatterApi</code>) with what Mime Types it supports.  It, also, only knows how to process <code>OgcApiRecordsRecordGeoJSONDto</code> objects.  This object is a single metadata record (i.e. from the <code>/collections/&lt;CollectionId&gt;/items/&lt;ItemId&gt;</code> endpoint).</p> <p>The main problem is that the <code>FormatterApiMessageWriter</code> doesn't have access to the user's request - just the expected Mime Type and the <code>OgcApiRecordsRecordGeoJSONDto</code> object.  The main issue is that it doesn't know what profile the user requested.</p> <p>Currently, I've modified the Controller and have it add information to the output headers (which is available both to the controller and the <code>HttpMessageConverter</code>).  This is a bit of a hack.</p> <p>Alternative Hacks:</p> <ol> <li>add a <code>\"requestedProfiles\"</code> field to the <code>OgcApiRecordsRecordGeoJSONDto</code> object</li> <li>try to put the information into a thread local or try to get access to the current http request</li> <li>try to set \"strange\" mime types that could be parsed by the <code>FormatterApiMessageWriter</code></li> </ol> <p>None of these solutions is great - please let us know if there are other, better, options.</p> <p>NOTE:  The implementation uses spring's <code>BeanFactory</code> to break some implied circular dependencies.  This is mostly because of the <code>WebConfig -&gt; Formatter -&gt; Index Formatter - &gt; Elastic Indexing -&gt; WebConfig</code> chain.</p>"},{"location":"OGCAPI-Records/demo-server/","title":"Demo server","text":""},{"location":"OGCAPI-Records/demo-server/#setting-up-a-demo-ogcapi-records","title":"Setting up a demo OGCAPI-Records","text":"<p>In order to run OGCAPI-Records, you will need:</p> <ol> <li>PostgreSQL/PostGIS database</li> <li>Elastic Search (recommend v8.14)</li> <li>GN4</li> <li>GN5</li> </ol>"},{"location":"OGCAPI-Records/demo-server/#setting-up-postgresql","title":"Setting up PostgreSQL","text":"<p>This container (<code>kartoza/postgis:16-3.4</code>) is for an M1 mac - use a different docker container for an X64 machine.</p> <pre><code>docker run -p 5432:5432 -e POSTGRES_PASS=postgres -e POSTGRES_USER=postgres   kartoza/postgis:16-3.4\nPGPASSWORD=postgres psql -h localhost -U postgres -d template1 -c \"create database gn;\"\nPGPASSWORD=postgres psql -h localhost -U postgres -d gn -c \"create extension postgis;\"\n\n\nPGPASSWORD=postgres psql -h localhost -U postgres -d gn -c \"CREATE USER \\\"www-data\\\" WITH SUPERUSER PASSWORD 'www-data';\"\n</code></pre> <p>This will:</p> <ol> <li>run the <code>docker</code> PostgreSQL/PostGIS container (available on PORT 5432).  The admin user will be postgres/postgres.</li> <li>create a database called <code>gn</code></li> <li>add the PostGIS extension to the database</li> <li>add a super user with name <code>www-data</code> and password <code>www-data</code>.</li> </ol> <p>These settings should match what is in your GN5 <code>application.yml</code> file.</p> <p>To run a <code>psql</code> session:</p> <pre><code>PGPASSWORD=postgres psql -h localhost -U postgres -d gn \n</code></pre>"},{"location":"OGCAPI-Records/demo-server/#setup-elastic-search-recommend-v814","title":"Setup Elastic Search (recommend v8.14)","text":"<p>This will run an elastic search docker container (v8.14.0) on port 9200.</p> <pre><code>docker run -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" -e \"xpack.security.enabled=false\" -e \"xpack.security.enrollment.enabled=false\" docker.elastic.co/elasticsearch/elasticsearch:8.14.0\n</code></pre> <p>This does not have any indexes in it - when you run GN4 (see below) it will add the indexes.</p> <p>Here are some interesting URLs:</p> <ol> <li>http://localhost:9200/ Cluster URL</li> <li>http://localhost:9200/gn-records/_search?pretty=true&amp;q=: All records in the index</li> <li>http://localhost:9200/gn-records/_search?pretty=true&amp;q=_id:ce6dc729-7ec0-4ba9-baf8-4bc1525120c8 Show a particular record (by metadata ID)</li> <li>http://localhost:9200/gn-records The index definition (advanced users only!)</li> </ol>"},{"location":"OGCAPI-Records/demo-server/#setup-gn4","title":"Setup GN4","text":"<p>Run GeoNetwork 5 connected to the PostgreSQL/PostGIS database.  The easiest way to do this is to checkout and build GN4 from source.</p> <pre><code>cd web\nmvn jetty:run -Dgeonetwork.db.type=postgres-postgis -Djdbc.database=gn -Djdbc.username=www-data -Djdbc.password=www-data -Djdbc.host=localhost -Ddb.port=5432 -Djdbc.port=5432\n</code></pre>"},{"location":"OGCAPI-Records/demo-server/#demo-gn4-setup","title":"DEMO GN4 setup","text":"<p>Here are some steps to take to setup some data in GN4.  This demo will include the 5 iso19139 sample records supplied with GN4 and two extra ones we will use to annotate geonetwork portals (Also called <code>sources</code> in GeoNetwork and <code>collections</code> or <code>catalogs</code> in OGCAPI-Records).</p> <p>We then create a sub-portal (called \"subportal\") and attach the <code>subportal.xml</code> record to it.</p> <p>We then attach the <code>main.xml</code> record to the main portal.</p>"},{"location":"OGCAPI-Records/demo-server/#setup-records","title":"Setup Records","text":"<ol> <li>Login as admin http://localhost:8080/geonetwork</li> <li>Go to <code>Admin console</code> -&gt; <code>Metadata and Templates</code><ul> <li>Tick <code>Geographic information -- Metadata (iso19139:2007) (iso19139)</code> and press <code>Load samples for selected standards</code></li> </ul> </li> <li>Download main.xml and subportal.xml which are two extra sample metadata records.</li> <li>Go to <code>Contribute</code> -&gt; <code>Import New Records</code><ul> <li>Tick <code>Publish</code></li> <li>Choose the <code>main.xml</code> you downloaded (above) (use <code>Choose or drop resource here</code>)</li> <li>Press <code>Import</code></li> </ul> </li> <li>Go to <code>Contribute</code> -&gt; <code>Import New Records</code><ul> <li>Tick <code>Publish</code></li> <li>Choose the <code>subportal.xml</code> you downloaded (above) (use <code>Choose or drop resource here</code>)</li> <li>Press <code>Import</code></li> </ul> </li> </ol> <p>At this point you should have 7 records in your GN4 installation.</p>"},{"location":"OGCAPI-Records/demo-server/#setup-portals","title":"Setup Portals","text":"<ol> <li>Login as admin http://localhost:8080/geonetwork</li> <li>Go to <code>Admin console</code> -&gt; <code>Settings</code> and choose <code>Sources</code> on the left column.</li> <li>Press \"Add portal\"<ul> <li><code>Identifier</code> - subportal</li> <li><code>Name</code> - SubPortal</li> <li><code>Search Filter</code> - leave this blank, you can modify this later if you want</li> <li><code>Records to use for GetCapabilities</code> - type \"sub\" and then choose the \"GeoCat Demo OGCIAPI sub-portal\" record</li> <li>Choose a logo from the <code>Logo Selection</code></li> <li>Press \"Save\"</li> </ul> </li> <li>On the Left hand column, choose <code>Settings</code><ul> <li>Go down to the \"Catalog Services for the Web\"</li> <li>In the <code>Record to use for GetCapabilities</code>, type \"4e2e361b-02cf-499f-b16e-7eff87925e40\"</li> <li>Press <code>Save Settings</code> (very top)</li> </ul> </li> </ol> <p>NOTE: There's no way to edit the GeoNetwork Source for the main-portal, so we use the CSW GetCapabilities link instead!</p>"},{"location":"OGCAPI-Records/demo-server/#setup-gn5","title":"Setup GN5","text":"<p>You should be able to just run GeoNetwork 5 (from source).  </p> <ol> <li>Checkout GN5 from GitHub</li> <li>Verify that the <code>application.xml</code> (in <code>config/</code>)</li> <li>Build (with java21): <code>mvn clean install -DskipTests</code></li> <li>Run with:</li> </ol> <pre><code>cd src/app/geonetwork\nmvn spring-boot:run\n</code></pre>"},{"location":"OGCAPI-Records/demo-server/#running-the-demo","title":"Running the DEMO","text":"<ol> <li>Go to http://localhost:7979/v3/api-docs?f=json to see the OpenAPI (swagger) documentation.</li> <li>Go to http://localhost:7979/ogcapi-records/?f=json<ul> <li>This is the OGCAPI-Records Landing Page</li> <li>The title should be \"GeoCat Demo OGCIAPI Server\"</li> <li>Notice that it has an extra <code>catalogInfo</code> which contains information taken from <code>main.xml</code></li> </ul> </li> <li>Go to http://localhost:7979/ogcapi-records/collections?f=json<ul> <li>This is the OGCAPI-Records Collections (\"Catalogs\") page</li> <li>There should be two collections - \"GeoCat Demo OGCIAPI Server\" and \"GeoCat Demo OGCIAPI sub-portal\"</li> <li>Notice that the title (and contact) information is coming from the linked metadata records (<code>main.xml</code> and <code>subportal.xml</code>)</li> </ul> </li> <li>Go to http://localhost:7979/ogcapi-records/collections/subportal?f=json<ul> <li>This is the OGCAPI-Records Collection (\"Catalog\") page for the sub-portal collection</li> <li>The metadata about this is coming from the attached <code>subportal.xml</code> record</li> </ul> </li> <li>Go to http://localhost:7979/ogcapi-records/collections/subportal/queryables?f=json<ul> <li>This is the OGCAPI-Records Queryables page for the sub-portal collection</li> <li>This are all the \"extra\" ways you can query the collection</li> <li>Advanced users can see how this is configured in queryables.json.</li> </ul> </li> <li>Go to http://localhost:7979/ogcapi-records/collections/subportal/items?f=json<ul> <li>This is the OGCAPI-Records Items page for the sub-portal collection</li> <li>This returns a GeoJSON feature collection JSON document</li> <li>Since we haven't put a filter on the sub-portal, all 7 metadata records in the GN4 catalog will be shown</li> </ul> </li> <li>Go to http://localhost:7979/ogcapi-records/collections/subportal/items/da165110-88fd-11da-a88f-000d939bc5d8?f=json<ul> <li>This is the OGCAPI-Records Items page for single record in the sub-portal collection</li> <li>This is the JSON representation of the ISO19193 record (in the format specified by the OGCAPI-Records specification and in GeoJSON format)</li> <li>It also contains the underlying record, in XML, in the the <code>metadataRecordText</code> property</li> </ul> </li> </ol> <p>Here are some queries you can run (see the queryables):</p> <ul> <li>Find <code>contacts</code> that contain \"jody\" http://localhost:7979/ogcapi-records/collections/subportal/items?contacts=jody&amp;f=json<ul> <li>or jeroen</li> <li>or by area code 250</li> <li>or by city victoria</li> </ul> </li> <li>Find by <code>id</code> http://localhost:7979/ogcapi-records/collections/subportal/items?id=9bac358b-11ec-4293-aeef-5a077b778412&amp;f=json</li> <li>Find by <code>organization</code> http://localhost:7979/ogcapi-records/collections/subportal/items?organization=geocat&amp;f=json</li> <li>Find by <code>keyword</code> http://localhost:7979/ogcapi-records/collections/subportal/items?keywords=africa&amp;f=json</li> <li>Find records created in 2008 http://localhost:7979/ogcapi-records/collections/subportal/items?created=2007-01-01/2007-12-31&amp;f=json</li> </ul> <p>NOTE: See the OGCAPI-Records Specification for more info on querying.</p> <p>NOTE:  You can change the above URLs to have 'f=html`.  However, the current HTML page is trivial - just showing the JSON result.</p>"},{"location":"OGCAPI-Records/develop/","title":"Technical Overview","text":"<p>Here is a technical overview so developers can easily contribute!</p>"},{"location":"OGCAPI-Records/develop/#history","title":"History","text":"<p>The GeoNetwork Microservices Project had an OGCAPI-Records implementation.  This was used as a basis for the GN5 implementation.</p>"},{"location":"OGCAPI-Records/develop/#development-of-gn5s-ogcapi-records","title":"Development of GN5's OGCAPI-Records","text":"<p>The main development technique was to use the OGC provided OpenAPI .yaml definitions to autogenerate all the Controller and Model classes using the openapi-generator.</p> <p>Unfortunately, the code generated was difficult to use.  In order to fix this, the .yaml definitions were modified to produce better generated code.</p> <ol> <li>Some of the deeply nested inline schemas did not generate java classes - these were moved into their own files.  See the extracted directory (<code>/src/modules/ogcapi-records/ogcapi-records-openapi-autogen/src/ogc-openapi-schema/openapi/schemas/extracted</code>).</li> <li>Sometimes classes were generated with a trailing <code>1</code> - these definitions need to be, also, moved to their own file.</li> <li>The only interface should be the GeoJSON geometry interface.  Any other interfaces should be investigated - they are typically caused by <code>oneOf</code> OpenAPI definitions.  These modifications will make minor changes between the specification and GN5 implementation.  However, in many cases, these are mostly invisible.     For example, in the specification, <code>ID</code>s can either be a string or integer.  The code generator produces an interface for this.  The OpenAPI .yaml was modified so it is only a string.  However, the parser (Jackson <code>ObjectMapper</code>) allows for input as an integer OR string.  However, the output is always a string.     See the Jackson <code>ObjectMapper</code> configuration in <code>WebConfig.java</code>.</li> <li>The GeoJSON geometry definition was heavily modified for better parsing and output.  However, the resulting .yaml definition is equivalent. </li> <li>A few properties are defined as a list OR a single-value.  These were replaced with list-only output.  This produces valid output.</li> <li>The property <code>itemType</code> can be either a list OR a single-value.  However, output as a list caused issues with some clients.  It was replaced with a single-value only.  This could cause some issues in the future (in the unlikely situation where there needs to be multiple <code>itemType</code>s).</li> <li>BBOX and Time have some minor changes.</li> </ol> <p>Please see the <code>README.md</code> files in the code base, and the comments in the .yaml files.</p>"},{"location":"OGCAPI-Records/develop/#modules","title":"Modules","text":"<p>The OGCAPI-Records modules are in two sections - <code>modules</code> (the codegen and very simple controllers) and <code>shared</code> (actual implementation).</p> Example of how the modules are used <p>This diagram shows:</p> <ol> <li>At the top - OpenAPI .yaml is used to generate the <code>Model</code> and spring-boot java <code>Controller</code> definitions.  See <code>modules/ogcapi-records/gn-ogcapi-records-openapi-autogen</code>.</li> <li>There is a very simple controller implementation that hands off processing.  See <code>modules/ogcapi-records/gn-ogcapi-records-openapi-implementation</code>.</li> <li>There is an actual implementation (interacts with Elastic and PostgreSQL) and does the actual work.  The vast majority of the code is here. See <code>shares/ogcapi-records</code>.</li> </ol>"},{"location":"OGCAPI-Records/develop/#appgeonetwork","title":"app/geonetwork","text":"<p>This is the main GN5 application.  There isn't any OGCAPI-Records specific code here (however, see <code>application.yml</code>).</p>"},{"location":"OGCAPI-Records/develop/#modulesogcapi-records","title":"modules/ogcapi-records","text":"<p>There are two sub-modules here:</p> gn-ogcapi-records-openapi-autogen This is the modified OGC's OpenAPI .yaml definitions used to autogenerate code.  There are also several test cases from the specification. gn-ogcapi-records-implementation This is very simple controllers and spring boot HTTP support."},{"location":"OGCAPI-Records/develop/#sharesogcapi-records","title":"shares/ogcapi-records","text":"<p>This module is where most of the code is located. It interacts with Elastic/PostgreSQL and does conversions between GeoNetwork objects and OGCAPI-Records objects. </p>"},{"location":"OGCAPI-Records/develop/#elastic-json-index-record","title":"Elastic JSON Index Record","text":"<p>The OGCAPI-Records mostly interacts with Elastic (and not with GeoNetwork or the underlying XML Metadata records).  This is because the Elastic JSON Index Record has already summarized all different types of Metadata records that GeoNetwork supports.  Therefore, most of the code is:</p> <ol> <li>Translating incoming OGCAPI-Records requests into Elastic Queries</li> <li>Translating the Elastic JSON Index Record into the corresponding OGCAPI-Records response objects</li> <li>Adding links to the OGCAPI-Records response documents</li> </ol> <p>NOTE: there is some interaction with the GeoNetwork PostgreSQL database - mostly for the <code>source</code> table (for portal/sub-portal definitions) and <code>user</code>/<code>usergroup</code> for security.</p>"},{"location":"OGCAPI-Records/develop/#conversion-from-elastic-json-index-record-to-ogcapi-records","title":"Conversion from Elastic JSON Index Record to OGCAPI-Records","text":"<ol> <li>The <code>indexing</code> modules already support converting the Elastic JSON Index Record into the <code>IndexRecord</code> java object</li> <li>The conversion from the <code>IndexRecord</code> java object into the autogenerated OGCAPI-Records java objects is mostly done in the <code>indexConvert</code> package (see test cases).</li> </ol>"},{"location":"OGCAPI-Records/develop/#elastic-query-generation","title":"Elastic Query Generation","text":"<p>There are several classes that are used for Elastic Query Generation.  We are using the new Elastic Java API:</p> <ol> <li><code>OgcApiQuery.java</code> - this is a direct representation of the <code>/collections/&lt;collectionID&gt;</code> query.  Its is built, from a request, by <code>QueryBuilder.java</code>.</li> <li><code>RecordsEsQueryBuilder.java</code> - This was taken from the Geonetwork-microservices project and updated for the new Elastic Java API.  It handles the basic OGC-defined Query.</li> <li><code>QueryToElastic.java</code> - This extends the <code>RecordsEsQueryBuilder</code> query with Queryables.</li> <li><code>QueryablesExtractor.java</code> - This converts simple text searches into queryable searches (see Extra Feature)</li> <li><code>ElasticWithUserPermission.java</code> - This adds a GN security filter to the query so users only see records they have permissions for.  See security.</li> <li><code>SimpleElastic.java</code> - simple wrapper around the Elastic search client for easy-of-use.</li> </ol>"},{"location":"OGCAPI-Records/develop/#queryables","title":"Queryables","text":"<p>GN5's OGCAPI-Records implementation supports queryables.</p>"},{"location":"OGCAPI-Records/develop/#queryables-configuration","title":"Queryables Configuration","text":"<p>GN5's OGCAPI-Records implementation supports configuring queryables.  You can add queryables for anything in the Elastic Index!</p> <p>See <code>queryables.json</code> in the code base for examples and documentation.</p>"},{"location":"OGCAPI-Records/develop/#security","title":"Security","text":"<p>The OGCAPI-Records implementation is read-only, so the biggest security issue is to ensure that user's cannot access records they don't have access to.</p> <p>GN5 adds an Elastic <code>BoolQuery.must()</code> query to generated queries that checks to see if the record is setup so that the current user is in a group that has permissions for that record.  See <code>ElasticWithUserPermissions.java</code> and  the GN4 permissions documentation.</p>"},{"location":"OGCAPI-Records/develop/#testing","title":"Testing","text":"<p>There are some simple test cases for functionality (i.e. parsing, conversions). Also, this has been tested against several OGCAPI-Records clients (including the STAC Browser).</p>"},{"location":"OGCAPI-Records/develop/#other-resources","title":"Other resources","text":"<ol> <li>The OGCAPI-Records Specification</li> <li>The OGC's OpenAPI .yaml definitions</li> <li>The GN5 GitHub Code Base</li> <li>See the README.md files in the code base</li> </ol>"},{"location":"OGCAPI-Records/features/","title":"Features","text":""},{"location":"OGCAPI-Records/features/#ogcapi-records-features","title":"OGCAPI-Records Features","text":"<p>The GeoNetwork 5 OGCAPI-Records module has several features that aren't standard in OGCAPI-Records Specification.</p>"},{"location":"OGCAPI-Records/features/#extra-features","title":"Extra Features","text":"<ol> <li>If you connect the main portal to a service metadata record, then the landing page will have a <code>catalogInfo</code> property with a <code>catalog.yaml</code> (as defined by OGCAPI-Records) object describing the catalog.</li> <li>When a catalog (collection) is described (for example, the <code>landing page</code>, <code>/collections</code>, or <code>/collections/&lt;collectionID&gt;</code> pages) and the collection is attached to a service metadata record, then there will be a <code>geoNetworkElasticIndexRecord</code> property with the underlying Elastic Index Record for that metadata record.</li> <li>When you view a metadata record (for example, the <code>/collections/&lt;collectionID&gt;/items</code> or  <code>/collections/&lt;collectionID&gt;/items/&lt;itemID&gt;</code> pages), then;<ul> <li>There will be a <code>metadataRecordText</code> property with the text of the metadata record</li> <li>There will be a <code>geoNetworkElasticIndexRecord</code> property with the underlying Elastic Index Record for that metadata record.</li> </ul> </li> <li>When doing a text search (\"<code>q</code>\"), you can add <code>&lt;queryable Property Name&gt;:&lt;search value&gt;</code> and it will convert that into a queryables search<ul> <li>For example, <code>http://localhost:7979/ogcapi-records/collections/subportal/items?q=portal%20contacts:geocat</code> is equivalent to  <code>http://localhost:7979/ogcapi-records/collections/subportal/items?q=portal&amp;contacts=geocat</code></li> <li>This was done because most OGCAPI-Records clients do not support queryables. </li> </ul> </li> <li>Security.  The logged in user can only see certain records (see <code>ElasticWithUserPermissions.java</code>).</li> </ol>"},{"location":"OGCAPI-Records/spec-diff/","title":"Spec diff","text":""},{"location":"OGCAPI-Records/spec-diff/#differences-with-the-specification","title":"Differences with the Specification","text":"<p>There are some minor differences with the specification - these are mostly due to difficulties in the OGCAPI-Records OpenAPI .yaml (especially with <code>oneOf</code> OpenAI definitions).</p> <p>Please see the comments in the README.md and .yaml files in the code autogeneration module (<code>src/modules/ogcapi-records/ogcapi-records-openapi-autogen/src/ogc-openapi-schema</code>).</p> <ol> <li>The specification allows <code>ID</code>s to be either integers or strings.  We support incoming strings or integers, but they are always outputted as strings.</li> <li><code>bbox.yaml</code> slightly simplified</li> <li><code>time.yaml</code> slightly simplified by only having one time regex instead of several in a <code>oneOf</code>.</li> <li>The <code>itemtype</code> property can either be a list of a single value.  This was simplified to be only a simple string property (no list).  This was originally simplified to be a list (most compatible), however, some clients do not accepts an <code>itemType</code> list so it was changed to be a single value.</li> </ol> <p>There are other, minor changes.  Please report an issue if you see one.</p> <p>Some of the conversions from the Elastic JSON Index Record to a GeoJSON record (or <code>catalog.yaml</code> object) are simplified and will need ongoing community discussion to ensure they are the best possible outcome.</p>"}]}