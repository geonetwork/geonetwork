/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ISODate } from './ISODate';
import {
  ISODateFromJSON,
  ISODateFromJSONTyped,
  ISODateToJSON,
} from './ISODate';

/**
 *
 * @export
 * @interface Source
 */
export interface Source {
  /**
   *
   * @type {ISODate}
   * @memberof Source
   */
  creationDate?: ISODate;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  filter?: string;
  /**
   *
   * @type {number}
   * @memberof Source
   */
  groupOwner?: number;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Source
   */
  label?: { [key: string]: string };
  /**
   *
   * @type {boolean}
   * @memberof Source
   */
  listableInHeaderSelector?: boolean;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  logo?: string;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  serviceRecord?: string;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  type?: SourceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  uiConfig?: string;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  uuid?: string;
}

/**
 * @export
 */
export const SourceTypeEnum = {
  Portal: 'portal',
  Subportal: 'subportal',
  Externalportal: 'externalportal',
  Harvester: 'harvester',
} as const;
export type SourceTypeEnum =
  (typeof SourceTypeEnum)[keyof typeof SourceTypeEnum];

/**
 * Check if a given object implements the Source interface.
 */
export function instanceOfSource(value: object): value is Source {
  return true;
}

export function SourceFromJSON(json: any): Source {
  return SourceFromJSONTyped(json, false);
}

export function SourceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Source {
  if (json == null) {
    return json;
  }
  return {
    creationDate:
      json['creationDate'] == null
        ? undefined
        : ISODateFromJSON(json['creationDate']),
    filter: json['filter'] == null ? undefined : json['filter'],
    groupOwner: json['groupOwner'] == null ? undefined : json['groupOwner'],
    label: json['label'] == null ? undefined : json['label'],
    listableInHeaderSelector:
      json['listableInHeaderSelector'] == null
        ? undefined
        : json['listableInHeaderSelector'],
    logo: json['logo'] == null ? undefined : json['logo'],
    name: json['name'] == null ? undefined : json['name'],
    serviceRecord:
      json['serviceRecord'] == null ? undefined : json['serviceRecord'],
    type: json['type'] == null ? undefined : json['type'],
    uiConfig: json['uiConfig'] == null ? undefined : json['uiConfig'],
    uuid: json['uuid'] == null ? undefined : json['uuid'],
  };
}

export function SourceToJSON(value?: Source | null): any {
  if (value == null) {
    return value;
  }
  return {
    creationDate: ISODateToJSON(value['creationDate']),
    filter: value['filter'],
    groupOwner: value['groupOwner'],
    label: value['label'],
    listableInHeaderSelector: value['listableInHeaderSelector'],
    logo: value['logo'],
    name: value['name'],
    serviceRecord: value['serviceRecord'],
    type: value['type'],
    uiConfig: value['uiConfig'],
    uuid: value['uuid'],
  };
}
