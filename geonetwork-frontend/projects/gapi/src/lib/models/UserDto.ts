/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
  AddressFromJSON,
  AddressFromJSONTyped,
  AddressToJSON,
} from './Address';

/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   *
   * @type {Array<Address>}
   * @memberof UserDto
   */
  addresses?: Array<Address>;
  /**
   *
   * @type {UserDto}
   * @memberof UserDto
   */
  email?: UserDto;
  /**
   *
   * @type {Array<string>}
   * @memberof UserDto
   */
  emailAddresses?: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof UserDto
   */
  enabled?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof UserDto
   */
  groupsEditor?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserDto
   */
  groupsRegisteredUser?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserDto
   */
  groupsReviewer?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UserDto
   */
  groupsUserAdmin?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  kind?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  organisation?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  profile?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  username?: string;
}

/**
 * Check if a given object implements the UserDto interface.
 */
export function instanceOfUserDto(value: object): value is UserDto {
  return true;
}

export function UserDtoFromJSON(json: any): UserDto {
  return UserDtoFromJSONTyped(json, false);
}

export function UserDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): UserDto {
  if (json == null) {
    return json;
  }
  return {
    addresses:
      json['addresses'] == null
        ? undefined
        : (json['addresses'] as Array<any>).map(AddressFromJSON),
    email: json['email'] == null ? undefined : UserDtoFromJSON(json['email']),
    emailAddresses:
      json['emailAddresses'] == null ? undefined : json['emailAddresses'],
    enabled: json['enabled'] == null ? undefined : json['enabled'],
    groupsEditor:
      json['groupsEditor'] == null ? undefined : json['groupsEditor'],
    groupsRegisteredUser:
      json['groupsRegisteredUser'] == null
        ? undefined
        : json['groupsRegisteredUser'],
    groupsReviewer:
      json['groupsReviewer'] == null ? undefined : json['groupsReviewer'],
    groupsUserAdmin:
      json['groupsUserAdmin'] == null ? undefined : json['groupsUserAdmin'],
    id: json['id'] == null ? undefined : json['id'],
    kind: json['kind'] == null ? undefined : json['kind'],
    name: json['name'] == null ? undefined : json['name'],
    organisation:
      json['organisation'] == null ? undefined : json['organisation'],
    password: json['password'] == null ? undefined : json['password'],
    profile: json['profile'] == null ? undefined : json['profile'],
    surname: json['surname'] == null ? undefined : json['surname'],
    username: json['username'] == null ? undefined : json['username'],
  };
}

export function UserDtoToJSON(value?: UserDto | null): any {
  if (value == null) {
    return value;
  }
  return {
    addresses:
      value['addresses'] == null
        ? undefined
        : (value['addresses'] as Array<any>).map(AddressToJSON),
    email: UserDtoToJSON(value['email']),
    emailAddresses: value['emailAddresses'],
    enabled: value['enabled'],
    groupsEditor: value['groupsEditor'],
    groupsRegisteredUser: value['groupsRegisteredUser'],
    groupsReviewer: value['groupsReviewer'],
    groupsUserAdmin: value['groupsUserAdmin'],
    id: value['id'],
    kind: value['kind'],
    name: value['name'],
    organisation: value['organisation'],
    password: value['password'],
    profile: value['profile'],
    surname: value['surname'],
    username: value['username'],
  };
}
