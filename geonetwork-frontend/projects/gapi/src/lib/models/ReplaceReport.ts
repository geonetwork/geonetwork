/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReplaceEntryChange } from './ReplaceEntryChange';
import {
  ReplaceEntryChangeFromJSON,
  ReplaceEntryChangeFromJSONTyped,
  ReplaceEntryChangeToJSON,
} from './ReplaceEntryChange';

/**
 *
 * @export
 * @interface ReplaceReport
 */
export interface ReplaceReport {
  /**
   *
   * @type {boolean}
   * @memberof ReplaceReport
   */
  approved?: boolean;
  /**
   *
   * @type {string}
   * @memberof ReplaceReport
   */
  date?: string;
  /**
   *
   * @type {boolean}
   * @memberof ReplaceReport
   */
  draft?: boolean;
  /**
   *
   * @type {Array<ReplaceEntryChange>}
   * @memberof ReplaceReport
   */
  elementChanges?: Array<ReplaceEntryChange>;
  /**
   *
   * @type {string}
   * @memberof ReplaceReport
   */
  message?: string;
  /**
   *
   * @type {string}
   * @memberof ReplaceReport
   */
  uuid?: string;
}

/**
 * Check if a given object implements the ReplaceReport interface.
 */
export function instanceOfReplaceReport(value: object): value is ReplaceReport {
  return true;
}

export function ReplaceReportFromJSON(json: any): ReplaceReport {
  return ReplaceReportFromJSONTyped(json, false);
}

export function ReplaceReportFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ReplaceReport {
  if (json == null) {
    return json;
  }
  return {
    approved: json['approved'] == null ? undefined : json['approved'],
    date: json['date'] == null ? undefined : json['date'],
    draft: json['draft'] == null ? undefined : json['draft'],
    elementChanges:
      json['elementChanges'] == null
        ? undefined
        : (json['elementChanges'] as Array<any>).map(
            ReplaceEntryChangeFromJSON
          ),
    message: json['message'] == null ? undefined : json['message'],
    uuid: json['uuid'] == null ? undefined : json['uuid'],
  };
}

export function ReplaceReportToJSON(value?: ReplaceReport | null): any {
  if (value == null) {
    return value;
  }
  return {
    approved: value['approved'],
    date: value['date'],
    draft: value['draft'],
    elementChanges:
      value['elementChanges'] == null
        ? undefined
        : (value['elementChanges'] as Array<any>).map(ReplaceEntryChangeToJSON),
    message: value['message'],
    uuid: value['uuid'],
  };
}
