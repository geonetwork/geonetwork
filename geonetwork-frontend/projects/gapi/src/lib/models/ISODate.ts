/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ISODate
 */
export interface ISODate {
  /**
   *
   * @type {string}
   * @memberof ISODate
   */
  dateAndTime?: string;
  /**
   *
   * @type {string}
   * @memberof ISODate
   */
  dateAndTimeUtc?: string;
  /**
   *
   * @type {string}
   * @memberof ISODate
   */
  dateAsString?: string;
  /**
   *
   * @type {boolean}
   * @memberof ISODate
   */
  dateOnly?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ISODate
   */
  dateYearMonthOnly?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ISODate
   */
  dateYearOnly?: boolean;
  /**
   *
   * @type {number}
   * @memberof ISODate
   */
  days?: number;
  /**
   *
   * @type {number}
   * @memberof ISODate
   */
  hours?: number;
  /**
   *
   * @type {Date}
   * @memberof ISODate
   */
  internalDateTime?: Date;
  /**
   *
   * @type {number}
   * @memberof ISODate
   */
  minutes?: number;
  /**
   *
   * @type {number}
   * @memberof ISODate
   */
  months?: number;
  /**
   *
   * @type {number}
   * @memberof ISODate
   */
  seconds?: number;
  /**
   *
   * @type {string}
   * @memberof ISODate
   */
  timeAsString?: string;
  /**
   *
   * @type {number}
   * @memberof ISODate
   */
  timeInSeconds?: number;
  /**
   *
   * @type {number}
   * @memberof ISODate
   */
  years?: number;
}

/**
 * Check if a given object implements the ISODate interface.
 */
export function instanceOfISODate(value: object): value is ISODate {
  return true;
}

export function ISODateFromJSON(json: any): ISODate {
  return ISODateFromJSONTyped(json, false);
}

export function ISODateFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ISODate {
  if (json == null) {
    return json;
  }
  return {
    dateAndTime: json['dateAndTime'] == null ? undefined : json['dateAndTime'],
    dateAndTimeUtc:
      json['dateAndTimeUtc'] == null ? undefined : json['dateAndTimeUtc'],
    dateAsString:
      json['dateAsString'] == null ? undefined : json['dateAsString'],
    dateOnly: json['dateOnly'] == null ? undefined : json['dateOnly'],
    dateYearMonthOnly:
      json['dateYearMonthOnly'] == null ? undefined : json['dateYearMonthOnly'],
    dateYearOnly:
      json['dateYearOnly'] == null ? undefined : json['dateYearOnly'],
    days: json['days'] == null ? undefined : json['days'],
    hours: json['hours'] == null ? undefined : json['hours'],
    internalDateTime:
      json['internalDateTime'] == null
        ? undefined
        : new Date(json['internalDateTime']),
    minutes: json['minutes'] == null ? undefined : json['minutes'],
    months: json['months'] == null ? undefined : json['months'],
    seconds: json['seconds'] == null ? undefined : json['seconds'],
    timeAsString:
      json['timeAsString'] == null ? undefined : json['timeAsString'],
    timeInSeconds:
      json['timeInSeconds'] == null ? undefined : json['timeInSeconds'],
    years: json['years'] == null ? undefined : json['years'],
  };
}

export function ISODateToJSON(value?: ISODate | null): any {
  if (value == null) {
    return value;
  }
  return {
    dateAndTime: value['dateAndTime'],
    dateAndTimeUtc: value['dateAndTimeUtc'],
    dateAsString: value['dateAsString'],
    dateOnly: value['dateOnly'],
    dateYearMonthOnly: value['dateYearMonthOnly'],
    dateYearOnly: value['dateYearOnly'],
    days: value['days'],
    hours: value['hours'],
    internalDateTime:
      value['internalDateTime'] == null
        ? undefined
        : value['internalDateTime'].toISOString(),
    minutes: value['minutes'],
    months: value['months'],
    seconds: value['seconds'],
    timeAsString: value['timeAsString'],
    timeInSeconds: value['timeInSeconds'],
    years: value['years'],
  };
}
