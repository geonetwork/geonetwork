/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface MeResponse
 */
export interface MeResponse {
  /**
   *
   * @type {boolean}
   * @memberof MeResponse
   */
  admin?: boolean;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  email?: string;
  /**
   *
   * @type {Array<number>}
   * @memberof MeResponse
   */
  groupsWithEditor?: Array<number>;
  /**
   *
   * @type {Array<number>}
   * @memberof MeResponse
   */
  groupsWithRegisteredUser?: Array<number>;
  /**
   *
   * @type {Array<number>}
   * @memberof MeResponse
   */
  groupsWithReviewer?: Array<number>;
  /**
   *
   * @type {Array<number>}
   * @memberof MeResponse
   */
  groupsWithUserAdmin?: Array<number>;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  organisation?: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  profile?: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof MeResponse
   */
  username?: string;
}

/**
 * Check if a given object implements the MeResponse interface.
 */
export function instanceOfMeResponse(value: object): value is MeResponse {
  return true;
}

export function MeResponseFromJSON(json: any): MeResponse {
  return MeResponseFromJSONTyped(json, false);
}

export function MeResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): MeResponse {
  if (json == null) {
    return json;
  }
  return {
    admin: json['admin'] == null ? undefined : json['admin'],
    email: json['email'] == null ? undefined : json['email'],
    groupsWithEditor:
      json['groupsWithEditor'] == null ? undefined : json['groupsWithEditor'],
    groupsWithRegisteredUser:
      json['groupsWithRegisteredUser'] == null
        ? undefined
        : json['groupsWithRegisteredUser'],
    groupsWithReviewer:
      json['groupsWithReviewer'] == null
        ? undefined
        : json['groupsWithReviewer'],
    groupsWithUserAdmin:
      json['groupsWithUserAdmin'] == null
        ? undefined
        : json['groupsWithUserAdmin'],
    hash: json['hash'] == null ? undefined : json['hash'],
    id: json['id'] == null ? undefined : json['id'],
    name: json['name'] == null ? undefined : json['name'],
    organisation:
      json['organisation'] == null ? undefined : json['organisation'],
    profile: json['profile'] == null ? undefined : json['profile'],
    surname: json['surname'] == null ? undefined : json['surname'],
    username: json['username'] == null ? undefined : json['username'],
  };
}

export function MeResponseToJSON(value?: MeResponse | null): any {
  if (value == null) {
    return value;
  }
  return {
    admin: value['admin'],
    email: value['email'],
    groupsWithEditor: value['groupsWithEditor'],
    groupsWithRegisteredUser: value['groupsWithRegisteredUser'],
    groupsWithReviewer: value['groupsWithReviewer'],
    groupsWithUserAdmin: value['groupsWithUserAdmin'],
    hash: value['hash'],
    id: value['id'],
    name: value['name'],
    organisation: value['organisation'],
    profile: value['profile'],
    surname: value['surname'],
    username: value['username'],
  };
}
