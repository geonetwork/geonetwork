/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MetadataCategory } from './MetadataCategory';
import {
  MetadataCategoryFromJSON,
  MetadataCategoryFromJSONTyped,
  MetadataCategoryToJSON,
} from './MetadataCategory';

/**
 * Group details
 * @export
 * @interface Group
 */
export interface Group {
  /**
   *
   * @type {Array<MetadataCategory>}
   * @memberof Group
   */
  allowedCategories?: Array<MetadataCategory>;
  /**
   *
   * @type {MetadataCategory}
   * @memberof Group
   */
  defaultCategory?: MetadataCategory;
  /**
   *
   * @type {string}
   * @memberof Group
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Group
   */
  email?: string;
  /**
   *
   * @type {boolean}
   * @memberof Group
   */
  enableAllowedCategories?: boolean;
  /**
   *
   * @type {number}
   * @memberof Group
   */
  id?: number;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Group
   */
  label?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof Group
   */
  logo?: string;
  /**
   *
   * @type {string}
   * @memberof Group
   */
  minimumProfileForPrivileges?: GroupMinimumProfileForPrivilegesEnum;
  /**
   *
   * @type {string}
   * @memberof Group
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof Group
   */
  referrer?: number;
  /**
   *
   * @type {boolean}
   * @memberof Group
   */
  reserved?: boolean;
  /**
   *
   * @type {string}
   * @memberof Group
   */
  website?: string;
}

/**
 * @export
 */
export const GroupMinimumProfileForPrivilegesEnum = {
  Administrator: 'Administrator',
  UserAdmin: 'UserAdmin',
  Reviewer: 'Reviewer',
  Editor: 'Editor',
  RegisteredUser: 'RegisteredUser',
  Guest: 'Guest',
  Monitor: 'Monitor',
} as const;
export type GroupMinimumProfileForPrivilegesEnum =
  (typeof GroupMinimumProfileForPrivilegesEnum)[keyof typeof GroupMinimumProfileForPrivilegesEnum];

/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): value is Group {
  return true;
}

export function GroupFromJSON(json: any): Group {
  return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Group {
  if (json == null) {
    return json;
  }
  return {
    allowedCategories:
      json['allowedCategories'] == null
        ? undefined
        : (json['allowedCategories'] as Array<any>).map(
            MetadataCategoryFromJSON
          ),
    defaultCategory:
      json['defaultCategory'] == null
        ? undefined
        : MetadataCategoryFromJSON(json['defaultCategory']),
    description: json['description'] == null ? undefined : json['description'],
    email: json['email'] == null ? undefined : json['email'],
    enableAllowedCategories:
      json['enableAllowedCategories'] == null
        ? undefined
        : json['enableAllowedCategories'],
    id: json['id'] == null ? undefined : json['id'],
    label: json['label'] == null ? undefined : json['label'],
    logo: json['logo'] == null ? undefined : json['logo'],
    minimumProfileForPrivileges:
      json['minimumProfileForPrivileges'] == null
        ? undefined
        : json['minimumProfileForPrivileges'],
    name: json['name'] == null ? undefined : json['name'],
    referrer: json['referrer'] == null ? undefined : json['referrer'],
    reserved: json['reserved'] == null ? undefined : json['reserved'],
    website: json['website'] == null ? undefined : json['website'],
  };
}

export function GroupToJSON(value?: Group | null): any {
  if (value == null) {
    return value;
  }
  return {
    allowedCategories:
      value['allowedCategories'] == null
        ? undefined
        : (value['allowedCategories'] as Array<any>).map(
            MetadataCategoryToJSON
          ),
    defaultCategory: MetadataCategoryToJSON(value['defaultCategory']),
    description: value['description'],
    email: value['email'],
    enableAllowedCategories: value['enableAllowedCategories'],
    id: value['id'],
    label: value['label'],
    logo: value['logo'],
    minimumProfileForPrivileges: value['minimumProfileForPrivileges'],
    name: value['name'],
    referrer: value['referrer'],
    reserved: value['reserved'],
    website: value['website'],
  };
}
