/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Group } from './Group';
import { GroupFromJSON, GroupFromJSONTyped, GroupToJSON } from './Group';
import type { User } from './User';
import { UserFromJSON, UserFromJSONTyped, UserToJSON } from './User';
import type { UserGroupId } from './UserGroupId';
import {
  UserGroupIdFromJSON,
  UserGroupIdFromJSONTyped,
  UserGroupIdToJSON,
} from './UserGroupId';

/**
 *
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
  /**
   *
   * @type {Group}
   * @memberof UserGroup
   */
  group?: Group;
  /**
   *
   * @type {UserGroupId}
   * @memberof UserGroup
   */
  id?: UserGroupId;
  /**
   *
   * @type {string}
   * @memberof UserGroup
   */
  profile?: UserGroupProfileEnum;
  /**
   *
   * @type {User}
   * @memberof UserGroup
   */
  user?: User;
}

/**
 * @export
 */
export const UserGroupProfileEnum = {
  Administrator: 'Administrator',
  UserAdmin: 'UserAdmin',
  Reviewer: 'Reviewer',
  Editor: 'Editor',
  RegisteredUser: 'RegisteredUser',
  Guest: 'Guest',
  Monitor: 'Monitor',
} as const;
export type UserGroupProfileEnum =
  (typeof UserGroupProfileEnum)[keyof typeof UserGroupProfileEnum];

/**
 * Check if a given object implements the UserGroup interface.
 */
export function instanceOfUserGroup(value: object): value is UserGroup {
  return true;
}

export function UserGroupFromJSON(json: any): UserGroup {
  return UserGroupFromJSONTyped(json, false);
}

export function UserGroupFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): UserGroup {
  if (json == null) {
    return json;
  }
  return {
    group: json['group'] == null ? undefined : GroupFromJSON(json['group']),
    id: json['id'] == null ? undefined : UserGroupIdFromJSON(json['id']),
    profile: json['profile'] == null ? undefined : json['profile'],
    user: json['user'] == null ? undefined : UserFromJSON(json['user']),
  };
}

export function UserGroupToJSON(value?: UserGroup | null): any {
  if (value == null) {
    return value;
  }
  return {
    group: GroupToJSON(value['group']),
    id: UserGroupIdToJSON(value['id']),
    profile: value['profile'],
    user: UserToJSON(value['user']),
  };
}
