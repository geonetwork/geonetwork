/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Associated } from './Associated';
import {
  AssociatedFromJSON,
  AssociatedFromJSONTyped,
  AssociatedToJSON,
} from './Associated';
import type { Parent } from './Parent';
import { ParentFromJSON, ParentFromJSONTyped, ParentToJSON } from './Parent';
import type { Dataset } from './Dataset';
import {
  DatasetFromJSON,
  DatasetFromJSONTyped,
  DatasetToJSON,
} from './Dataset';
import type { Service } from './Service';
import {
  ServiceFromJSON,
  ServiceFromJSONTyped,
  ServiceToJSON,
} from './Service';
import type { Thumbnail } from './Thumbnail';
import {
  ThumbnailFromJSON,
  ThumbnailFromJSONTyped,
  ThumbnailToJSON,
} from './Thumbnail';
import type { Fcat } from './Fcat';
import { FcatFromJSON, FcatFromJSONTyped, FcatToJSON } from './Fcat';
import type { Related } from './Related';
import {
  RelatedFromJSON,
  RelatedFromJSONTyped,
  RelatedToJSON,
} from './Related';
import type { Children } from './Children';
import {
  ChildrenFromJSON,
  ChildrenFromJSONTyped,
  ChildrenToJSON,
} from './Children';
import type { Hasfeaturecats } from './Hasfeaturecats';
import {
  HasfeaturecatsFromJSON,
  HasfeaturecatsFromJSONTyped,
  HasfeaturecatsToJSON,
} from './Hasfeaturecats';
import type { Hassource } from './Hassource';
import {
  HassourceFromJSON,
  HassourceFromJSONTyped,
  HassourceToJSON,
} from './Hassource';
import type { Online } from './Online';
import { OnlineFromJSON, OnlineFromJSONTyped, OnlineToJSON } from './Online';
import type { RelatedSource } from './RelatedSource';
import {
  RelatedSourceFromJSON,
  RelatedSourceFromJSONTyped,
  RelatedSourceToJSON,
} from './RelatedSource';
import type { Siblings } from './Siblings';
import {
  SiblingsFromJSON,
  SiblingsFromJSONTyped,
  SiblingsToJSON,
} from './Siblings';

/**
 *
 * @export
 * @interface RelatedResponse
 */
export interface RelatedResponse {
  /**
   *
   * @type {Associated}
   * @memberof RelatedResponse
   */
  associated?: Associated;
  /**
   *
   * @type {Children}
   * @memberof RelatedResponse
   */
  children?: Children;
  /**
   *
   * @type {Dataset}
   * @memberof RelatedResponse
   */
  datasets?: Dataset;
  /**
   *
   * @type {Fcat}
   * @memberof RelatedResponse
   */
  fcats?: Fcat;
  /**
   *
   * @type {Hasfeaturecats}
   * @memberof RelatedResponse
   */
  hasfeaturecats?: Hasfeaturecats;
  /**
   *
   * @type {Hassource}
   * @memberof RelatedResponse
   */
  hassources?: Hassource;
  /**
   *
   * @type {Online}
   * @memberof RelatedResponse
   */
  onlines?: Online;
  /**
   *
   * @type {Parent}
   * @memberof RelatedResponse
   */
  parent?: Parent;
  /**
   *
   * @type {Related}
   * @memberof RelatedResponse
   */
  related?: Related;
  /**
   *
   * @type {Service}
   * @memberof RelatedResponse
   */
  services?: Service;
  /**
   *
   * @type {Siblings}
   * @memberof RelatedResponse
   */
  siblings?: Siblings;
  /**
   *
   * @type {RelatedSource}
   * @memberof RelatedResponse
   */
  sources?: RelatedSource;
  /**
   *
   * @type {Thumbnail}
   * @memberof RelatedResponse
   */
  thumbnails?: Thumbnail;
}

/**
 * Check if a given object implements the RelatedResponse interface.
 */
export function instanceOfRelatedResponse(
  value: object
): value is RelatedResponse {
  return true;
}

export function RelatedResponseFromJSON(json: any): RelatedResponse {
  return RelatedResponseFromJSONTyped(json, false);
}

export function RelatedResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): RelatedResponse {
  if (json == null) {
    return json;
  }
  return {
    associated:
      json['associated'] == null
        ? undefined
        : AssociatedFromJSON(json['associated']),
    children:
      json['children'] == null ? undefined : ChildrenFromJSON(json['children']),
    datasets:
      json['datasets'] == null ? undefined : DatasetFromJSON(json['datasets']),
    fcats: json['fcats'] == null ? undefined : FcatFromJSON(json['fcats']),
    hasfeaturecats:
      json['hasfeaturecats'] == null
        ? undefined
        : HasfeaturecatsFromJSON(json['hasfeaturecats']),
    hassources:
      json['hassources'] == null
        ? undefined
        : HassourceFromJSON(json['hassources']),
    onlines:
      json['onlines'] == null ? undefined : OnlineFromJSON(json['onlines']),
    parent: json['parent'] == null ? undefined : ParentFromJSON(json['parent']),
    related:
      json['related'] == null ? undefined : RelatedFromJSON(json['related']),
    services:
      json['services'] == null ? undefined : ServiceFromJSON(json['services']),
    siblings:
      json['siblings'] == null ? undefined : SiblingsFromJSON(json['siblings']),
    sources:
      json['sources'] == null
        ? undefined
        : RelatedSourceFromJSON(json['sources']),
    thumbnails:
      json['thumbnails'] == null
        ? undefined
        : ThumbnailFromJSON(json['thumbnails']),
  };
}

export function RelatedResponseToJSON(value?: RelatedResponse | null): any {
  if (value == null) {
    return value;
  }
  return {
    associated: AssociatedToJSON(value['associated']),
    children: ChildrenToJSON(value['children']),
    datasets: DatasetToJSON(value['datasets']),
    fcats: FcatToJSON(value['fcats']),
    hasfeaturecats: HasfeaturecatsToJSON(value['hasfeaturecats']),
    hassources: HassourceToJSON(value['hassources']),
    onlines: OnlineToJSON(value['onlines']),
    parent: ParentToJSON(value['parent']),
    related: RelatedToJSON(value['related']),
    services: ServiceToJSON(value['services']),
    siblings: SiblingsToJSON(value['siblings']),
    sources: RelatedSourceToJSON(value['sources']),
    thumbnails: ThumbnailToJSON(value['thumbnails']),
  };
}
