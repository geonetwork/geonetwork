/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ISODate } from './ISODate';
import {
  ISODateFromJSON,
  ISODateFromJSONTyped,
  ISODateToJSON,
} from './ISODate';
import type { LinkStatus } from './LinkStatus';
import {
  LinkStatusFromJSON,
  LinkStatusFromJSONTyped,
  LinkStatusToJSON,
} from './LinkStatus';
import type { MetadataLink } from './MetadataLink';
import {
  MetadataLinkFromJSON,
  MetadataLinkFromJSONTyped,
  MetadataLinkToJSON,
} from './MetadataLink';

/**
 *
 * @export
 * @interface Link
 */
export interface Link {
  /**
   *
   * @type {number}
   * @memberof Link
   */
  id?: number;
  /**
   *
   * @type {ISODate}
   * @memberof Link
   */
  lastCheck?: ISODate;
  /**
   *
   * @type {number}
   * @memberof Link
   */
  lastState?: number;
  /**
   *
   * @type {Set<LinkStatus>}
   * @memberof Link
   */
  linkStatus?: Set<LinkStatus>;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  linkType?: LinkLinkTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  protocol?: string;
  /**
   *
   * @type {Set<MetadataLink>}
   * @memberof Link
   */
  records?: Set<MetadataLink>;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  url?: string;
}

/**
 * @export
 */
export const LinkLinkTypeEnum = {
  Http: 'HTTP',
  Metadata: 'METADATA',
} as const;
export type LinkLinkTypeEnum =
  (typeof LinkLinkTypeEnum)[keyof typeof LinkLinkTypeEnum];

/**
 * Check if a given object implements the Link interface.
 */
export function instanceOfLink(value: object): value is Link {
  return true;
}

export function LinkFromJSON(json: any): Link {
  return LinkFromJSONTyped(json, false);
}

export function LinkFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Link {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    lastCheck:
      json['lastCheck'] == null
        ? undefined
        : ISODateFromJSON(json['lastCheck']),
    lastState: json['lastState'] == null ? undefined : json['lastState'],
    linkStatus:
      json['linkStatus'] == null
        ? undefined
        : new Set((json['linkStatus'] as Array<any>).map(LinkStatusFromJSON)),
    linkType: json['linkType'] == null ? undefined : json['linkType'],
    protocol: json['protocol'] == null ? undefined : json['protocol'],
    records:
      json['records'] == null
        ? undefined
        : new Set((json['records'] as Array<any>).map(MetadataLinkFromJSON)),
    url: json['url'] == null ? undefined : json['url'],
  };
}

export function LinkToJSON(value?: Link | null): any {
  if (value == null) {
    return value;
  }
  return {
    id: value['id'],
    lastCheck: ISODateToJSON(value['lastCheck']),
    lastState: value['lastState'],
    linkStatus:
      value['linkStatus'] == null
        ? undefined
        : Array.from(value['linkStatus'] as Set<any>).map(LinkStatusToJSON),
    linkType: value['linkType'],
    protocol: value['protocol'],
    records:
      value['records'] == null
        ? undefined
        : Array.from(value['records'] as Set<any>).map(MetadataLinkToJSON),
    url: value['url'],
  };
}
