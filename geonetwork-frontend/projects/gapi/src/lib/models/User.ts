/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSecurity } from './UserSecurity';
import {
  UserSecurityFromJSON,
  UserSecurityFromJSONTyped,
  UserSecurityToJSON,
} from './UserSecurity';
import type { Address } from './Address';
import {
  AddressFromJSON,
  AddressFromJSONTyped,
  AddressToJSON,
} from './Address';
import type { GrantedAuthority } from './GrantedAuthority';
import {
  GrantedAuthorityFromJSON,
  GrantedAuthorityFromJSONTyped,
  GrantedAuthorityToJSON,
} from './GrantedAuthority';

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  accountNonExpired?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  accountNonLocked?: boolean;
  /**
   *
   * @type {Set<Address>}
   * @memberof User
   */
  addresses?: Set<Address>;
  /**
   *
   * @type {Array<GrantedAuthority>}
   * @memberof User
   */
  authorities?: Array<GrantedAuthority>;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  credentialsNonExpired?: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   *
   * @type {Set<string>}
   * @memberof User
   */
  emailAddresses?: Set<string>;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  enabled?: boolean;
  /**
   *
   * @type {number}
   * @memberof User
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof User
   */
  kind?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastLoginDate?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  organisation?: string;
  /**
   *
   * @type {Address}
   * @memberof User
   */
  primaryAddress?: Address;
  /**
   *
   * @type {string}
   * @memberof User
   */
  profile?: UserProfileEnum;
  /**
   *
   * @type {UserSecurity}
   * @memberof User
   */
  security?: UserSecurity;
  /**
   *
   * @type {string}
   * @memberof User
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  username?: string;
}

/**
 * @export
 */
export const UserProfileEnum = {
  Administrator: 'Administrator',
  UserAdmin: 'UserAdmin',
  Reviewer: 'Reviewer',
  Editor: 'Editor',
  RegisteredUser: 'RegisteredUser',
  Guest: 'Guest',
  Monitor: 'Monitor',
} as const;
export type UserProfileEnum =
  (typeof UserProfileEnum)[keyof typeof UserProfileEnum];

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
  return true;
}

export function UserFromJSON(json: any): User {
  return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): User {
  if (json == null) {
    return json;
  }
  return {
    accountNonExpired:
      json['accountNonExpired'] == null ? undefined : json['accountNonExpired'],
    accountNonLocked:
      json['accountNonLocked'] == null ? undefined : json['accountNonLocked'],
    addresses:
      json['addresses'] == null
        ? undefined
        : new Set((json['addresses'] as Array<any>).map(AddressFromJSON)),
    authorities:
      json['authorities'] == null
        ? undefined
        : (json['authorities'] as Array<any>).map(GrantedAuthorityFromJSON),
    credentialsNonExpired:
      json['credentialsNonExpired'] == null
        ? undefined
        : json['credentialsNonExpired'],
    email: json['email'] == null ? undefined : json['email'],
    emailAddresses:
      json['emailAddresses'] == null ? undefined : json['emailAddresses'],
    enabled: json['enabled'] == null ? undefined : json['enabled'],
    id: json['id'] == null ? undefined : json['id'],
    kind: json['kind'] == null ? undefined : json['kind'],
    lastLoginDate:
      json['lastLoginDate'] == null ? undefined : json['lastLoginDate'],
    name: json['name'] == null ? undefined : json['name'],
    organisation:
      json['organisation'] == null ? undefined : json['organisation'],
    primaryAddress:
      json['primaryAddress'] == null
        ? undefined
        : AddressFromJSON(json['primaryAddress']),
    profile: json['profile'] == null ? undefined : json['profile'],
    security:
      json['security'] == null
        ? undefined
        : UserSecurityFromJSON(json['security']),
    surname: json['surname'] == null ? undefined : json['surname'],
    username: json['username'] == null ? undefined : json['username'],
  };
}

export function UserToJSON(value?: User | null): any {
  if (value == null) {
    return value;
  }
  return {
    accountNonExpired: value['accountNonExpired'],
    accountNonLocked: value['accountNonLocked'],
    addresses:
      value['addresses'] == null
        ? undefined
        : Array.from(value['addresses'] as Set<any>).map(AddressToJSON),
    authorities:
      value['authorities'] == null
        ? undefined
        : (value['authorities'] as Array<any>).map(GrantedAuthorityToJSON),
    credentialsNonExpired: value['credentialsNonExpired'],
    email: value['email'],
    emailAddresses:
      value['emailAddresses'] == null
        ? undefined
        : Array.from(value['emailAddresses'] as Set<any>),
    enabled: value['enabled'],
    id: value['id'],
    kind: value['kind'],
    lastLoginDate: value['lastLoginDate'],
    name: value['name'],
    organisation: value['organisation'],
    primaryAddress: AddressToJSON(value['primaryAddress']),
    profile: value['profile'],
    security: UserSecurityToJSON(value['security']),
    surname: value['surname'],
    username: value['username'],
  };
}
