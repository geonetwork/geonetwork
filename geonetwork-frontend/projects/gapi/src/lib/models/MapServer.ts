/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Mapserver details
 * @export
 * @interface MapServer
 */
export interface MapServer {
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  configurl?: string;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof MapServer
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  namespace?: string;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  namespacePrefix?: string;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  password?: string;
  /**
   *
   * @type {MapServer}
   * @memberof MapServer
   */
  pushStyleInWorkspace?: MapServer;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  pushStyleInWorkspaceJpaWorkaround?: string;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  stylerurl?: string;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  wcsurl?: string;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  wfsurl?: string;
  /**
   *
   * @type {string}
   * @memberof MapServer
   */
  wmsurl?: string;
}

/**
 * Check if a given object implements the MapServer interface.
 */
export function instanceOfMapServer(value: object): value is MapServer {
  return true;
}

export function MapServerFromJSON(json: any): MapServer {
  return MapServerFromJSONTyped(json, false);
}

export function MapServerFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): MapServer {
  if (json == null) {
    return json;
  }
  return {
    configurl: json['configurl'] == null ? undefined : json['configurl'],
    description: json['description'] == null ? undefined : json['description'],
    id: json['id'] == null ? undefined : json['id'],
    name: json['name'] == null ? undefined : json['name'],
    namespace: json['namespace'] == null ? undefined : json['namespace'],
    namespacePrefix:
      json['namespacePrefix'] == null ? undefined : json['namespacePrefix'],
    password: json['password'] == null ? undefined : json['password'],
    pushStyleInWorkspace:
      json['pushStyleInWorkspace'] == null
        ? undefined
        : MapServerFromJSON(json['pushStyleInWorkspace']),
    pushStyleInWorkspaceJpaWorkaround:
      json['pushStyleInWorkspace_JpaWorkaround'] == null
        ? undefined
        : json['pushStyleInWorkspace_JpaWorkaround'],
    stylerurl: json['stylerurl'] == null ? undefined : json['stylerurl'],
    username: json['username'] == null ? undefined : json['username'],
    wcsurl: json['wcsurl'] == null ? undefined : json['wcsurl'],
    wfsurl: json['wfsurl'] == null ? undefined : json['wfsurl'],
    wmsurl: json['wmsurl'] == null ? undefined : json['wmsurl'],
  };
}

export function MapServerToJSON(value?: MapServer | null): any {
  if (value == null) {
    return value;
  }
  return {
    configurl: value['configurl'],
    description: value['description'],
    id: value['id'],
    name: value['name'],
    namespace: value['namespace'],
    namespacePrefix: value['namespacePrefix'],
    password: value['password'],
    pushStyleInWorkspace: MapServerToJSON(value['pushStyleInWorkspace']),
    pushStyleInWorkspace_JpaWorkaround:
      value['pushStyleInWorkspaceJpaWorkaround'],
    stylerurl: value['stylerurl'],
    username: value['username'],
    wcsurl: value['wcsurl'],
    wfsurl: value['wfsurl'],
    wmsurl: value['wmsurl'],
  };
}
