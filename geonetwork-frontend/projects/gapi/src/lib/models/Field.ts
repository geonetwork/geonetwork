/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Field
 */
export interface Field {
  /**
   *
   * @type {string}
   * @memberof Field
   */
  codelist?: string;
  /**
   *
   * @type {string}
   * @memberof Field
   */
  indexField?: string;
  /**
   *
   * @type {string}
   * @memberof Field
   */
  insertMode?: string;
  /**
   *
   * @type {string}
   * @memberof Field
   */
  name?: string;
  /**
   *
   * @type {boolean}
   * @memberof Field
   */
  removable?: boolean;
  /**
   *
   * @type {string}
   * @memberof Field
   */
  template?: string;
  /**
   *
   * @type {string}
   * @memberof Field
   */
  use?: string;
  /**
   *
   * @type {string}
   * @memberof Field
   */
  xpath?: string;
}

/**
 * Check if a given object implements the Field interface.
 */
export function instanceOfField(value: object): value is Field {
  return true;
}

export function FieldFromJSON(json: any): Field {
  return FieldFromJSONTyped(json, false);
}

export function FieldFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Field {
  if (json == null) {
    return json;
  }
  return {
    codelist: json['codelist'] == null ? undefined : json['codelist'],
    indexField: json['indexField'] == null ? undefined : json['indexField'],
    insertMode: json['insertMode'] == null ? undefined : json['insertMode'],
    name: json['name'] == null ? undefined : json['name'],
    removable: json['removable'] == null ? undefined : json['removable'],
    template: json['template'] == null ? undefined : json['template'],
    use: json['use'] == null ? undefined : json['use'],
    xpath: json['xpath'] == null ? undefined : json['xpath'],
  };
}

export function FieldToJSON(value?: Field | null): any {
  if (value == null) {
    return value;
  }
  return {
    codelist: value['codelist'],
    indexField: value['indexField'],
    insertMode: value['insertMode'],
    name: value['name'],
    removable: value['removable'],
    template: value['template'],
    use: value['use'],
    xpath: value['xpath'],
  };
}
