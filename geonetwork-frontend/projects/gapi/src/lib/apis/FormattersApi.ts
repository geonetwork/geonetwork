/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { FormatterDataResponse } from '../models/index';
import {
  FormatterDataResponseFromJSON,
  FormatterDataResponseToJSON,
} from '../models/index';

export interface AddFormatterRequest {
  file: Array<Blob>;
}

export interface DeleteFormatterRequest {
  formatter: string;
  schema: string;
}

export interface DownloadFormatterRequest {
  formatter: string;
  schema: string;
}

export interface GetFormatterFileContentRequest {
  formatter: string;
  schema: string;
  file: string;
}

export interface GetFormatterFilesRequest {
  formatter: string;
  schema: string;
}

export interface ListFormattersRequest {
  id?: string;
  uuid?: string;
  schema?: string;
  pluginOnly?: boolean;
  publishedOnly?: boolean;
}

export interface UpdateFormatterFileRequest {
  formatter: string;
  schema: string;
  file: string;
  data: string;
}

/**
 *
 */
export class FormattersApi extends runtime.BaseAPI {
  /**
   * Import a XSLT formatter (usually a zip named \'schema-formatter.zip\')
   */
  async addFormatterRaw(
    requestParameters: AddFormatterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['file'] == null) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter "file" was null or undefined when calling addFormatter().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['file'] != null) {
      queryParameters['file'] = requestParameters['file'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/formatters`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Import a XSLT formatter (usually a zip named \'schema-formatter.zip\')
   */
  async addFormatter(
    requestParameters: AddFormatterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.addFormatterRaw(requestParameters, initOverrides);
  }

  /**
   * Formatters are used to render records in various format (HTML, PDF, ...). When a record is rendered a cache is populated for better performance. By default the cache is an H2 database with files on the filesystems (See <dataDirectory>/resources/htmlcache/formatter-cache folder).
   * Clear formatter cache
   */
  async clearFormatterCacheRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/formatters/cache`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Formatters are used to render records in various format (HTML, PDF, ...). When a record is rendered a cache is populated for better performance. By default the cache is an H2 database with files on the filesystems (See <dataDirectory>/resources/htmlcache/formatter-cache folder).
   * Clear formatter cache
   */
  async clearFormatterCache(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.clearFormatterCacheRaw(initOverrides);
  }

  /**
   * Delete a formatter
   */
  async deleteFormatterRaw(
    requestParameters: DeleteFormatterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['formatter'] == null) {
      throw new runtime.RequiredError(
        'formatter',
        'Required parameter "formatter" was null or undefined when calling deleteFormatter().'
      );
    }

    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling deleteFormatter().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/formatters/{schema}/{formatter}`
          .replace(
            `{${'formatter'}}`,
            encodeURIComponent(String(requestParameters['formatter']))
          )
          .replace(
            `{${'schema'}}`,
            encodeURIComponent(String(requestParameters['schema']))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a formatter
   */
  async deleteFormatter(
    requestParameters: DeleteFormatterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteFormatterRaw(requestParameters, initOverrides);
  }

  /**
   * Download a formatter as ZIP
   */
  async downloadFormatterRaw(
    requestParameters: DownloadFormatterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['formatter'] == null) {
      throw new runtime.RequiredError(
        'formatter',
        'Required parameter "formatter" was null or undefined when calling downloadFormatter().'
      );
    }

    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling downloadFormatter().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/formatters/{schema}/{formatter}`
          .replace(
            `{${'formatter'}}`,
            encodeURIComponent(String(requestParameters['formatter']))
          )
          .replace(
            `{${'schema'}}`,
            encodeURIComponent(String(requestParameters['schema']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Download a formatter as ZIP
   */
  async downloadFormatter(
    requestParameters: DownloadFormatterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.downloadFormatterRaw(requestParameters, initOverrides);
  }

  /**
   * Get formatter file content
   */
  async getFormatterFileContentRaw(
    requestParameters: GetFormatterFileContentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['formatter'] == null) {
      throw new runtime.RequiredError(
        'formatter',
        'Required parameter "formatter" was null or undefined when calling getFormatterFileContent().'
      );
    }

    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling getFormatterFileContent().'
      );
    }

    if (requestParameters['file'] == null) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter "file" was null or undefined when calling getFormatterFileContent().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/formatters/{schema}/{formatter}/files/{file}`
          .replace(
            `{${'formatter'}}`,
            encodeURIComponent(String(requestParameters['formatter']))
          )
          .replace(
            `{${'schema'}}`,
            encodeURIComponent(String(requestParameters['schema']))
          )
          .replace(
            `{${'file'}}`,
            encodeURIComponent(String(requestParameters['file']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get formatter file content
   */
  async getFormatterFileContent(
    requestParameters: GetFormatterFileContentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.getFormatterFileContentRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get formatter files
   */
  async getFormatterFilesRaw(
    requestParameters: GetFormatterFilesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['formatter'] == null) {
      throw new runtime.RequiredError(
        'formatter',
        'Required parameter "formatter" was null or undefined when calling getFormatterFiles().'
      );
    }

    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling getFormatterFiles().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/formatters/{schema}/{formatter}/files`
          .replace(
            `{${'formatter'}}`,
            encodeURIComponent(String(requestParameters['formatter']))
          )
          .replace(
            `{${'schema'}}`,
            encodeURIComponent(String(requestParameters['schema']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get formatter files
   */
  async getFormatterFiles(
    requestParameters: GetFormatterFilesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.getFormatterFilesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get formatters
   */
  async listFormattersRaw(
    requestParameters: ListFormattersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FormatterDataResponse>> {
    const queryParameters: any = {};

    if (requestParameters['id'] != null) {
      queryParameters['id'] = requestParameters['id'];
    }

    if (requestParameters['uuid'] != null) {
      queryParameters['uuid'] = requestParameters['uuid'];
    }

    if (requestParameters['schema'] != null) {
      queryParameters['schema'] = requestParameters['schema'];
    }

    if (requestParameters['pluginOnly'] != null) {
      queryParameters['pluginOnly'] = requestParameters['pluginOnly'];
    }

    if (requestParameters['publishedOnly'] != null) {
      queryParameters['publishedOnly'] = requestParameters['publishedOnly'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/formatters`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      FormatterDataResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get formatters
   */
  async listFormatters(
    requestParameters: ListFormattersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FormatterDataResponse> {
    const response = await this.listFormattersRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update formatter file
   */
  async updateFormatterFileRaw(
    requestParameters: UpdateFormatterFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['formatter'] == null) {
      throw new runtime.RequiredError(
        'formatter',
        'Required parameter "formatter" was null or undefined when calling updateFormatterFile().'
      );
    }

    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling updateFormatterFile().'
      );
    }

    if (requestParameters['file'] == null) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter "file" was null or undefined when calling updateFormatterFile().'
      );
    }

    if (requestParameters['data'] == null) {
      throw new runtime.RequiredError(
        'data',
        'Required parameter "data" was null or undefined when calling updateFormatterFile().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['data'] != null) {
      queryParameters['data'] = requestParameters['data'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/formatters/{schema}/{formatter}/files/{file}`
          .replace(
            `{${'formatter'}}`,
            encodeURIComponent(String(requestParameters['formatter']))
          )
          .replace(
            `{${'schema'}}`,
            encodeURIComponent(String(requestParameters['schema']))
          )
          .replace(
            `{${'file'}}`,
            encodeURIComponent(String(requestParameters['file']))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update formatter file
   */
  async updateFormatterFile(
    requestParameters: UpdateFormatterFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateFormatterFileRaw(requestParameters, initOverrides);
  }
}
