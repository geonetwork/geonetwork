/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { BatchEditing, Codelist, Element } from '../models/index';
import {
  BatchEditingFromJSON,
  BatchEditingToJSON,
  CodelistFromJSON,
  CodelistToJSON,
  ElementFromJSON,
  ElementToJSON,
} from '../models/index';

export interface GetCodelistsTranslationsRequest {
  schema: string;
  codelist: Array<string>;
}

export interface GetConfigurationRequest {
  schema: string;
}

export interface GetConfigurationsRequest {
  schema?: Array<string>;
}

export interface GetEditorAssociatedPanelConfigurationRequest {
  schema: string;
  name: string;
}

export interface GetElementDetailsRequest {
  schema: string;
  element: string;
  parent?: string;
  displayIf?: string;
  xpath?: string;
  isoType?: string;
}

export interface GetSchemaCodelistsWithDetailsRequest {
  schema: string;
  codelist: string;
  parent?: string;
  displayIf?: string;
  xpath?: string;
  isoType?: string;
}

export interface GetSchemaTranslationsRequest {
  schema: string;
  codelist: string;
  parent?: string;
  displayIf?: string;
  xpath?: string;
  isoType?: string;
}

/**
 *
 */
export class StandardsApi extends runtime.BaseAPI {
  /**
   * All translations are combined in the same object. No distinction by codelist. This is useful if you need lots of codelists terms to be loaded.
   * Get multiple codelist translations
   */
  async getCodelistsTranslationsRaw(
    requestParameters: GetCodelistsTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string }>> {
    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling getCodelistsTranslations().'
      );
    }

    if (requestParameters['codelist'] == null) {
      throw new runtime.RequiredError(
        'codelist',
        'Required parameter "codelist" was null or undefined when calling getCodelistsTranslations().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['codelist'] != null) {
      queryParameters['codelist'] = requestParameters['codelist'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/standards/{schema}/codelists`.replace(
          `{${'schema'}}`,
          encodeURIComponent(String(requestParameters['schema']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * All translations are combined in the same object. No distinction by codelist. This is useful if you need lots of codelists terms to be loaded.
   * Get multiple codelist translations
   */
  async getCodelistsTranslations(
    requestParameters: GetCodelistsTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string }> {
    const response = await this.getCodelistsTranslationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get batch editor configuration for a standard
   */
  async getConfigurationRaw(
    requestParameters: GetConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: BatchEditing }>> {
    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling getConfiguration().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/standards/{schema}/batchconfiguration`.replace(
          `{${'schema'}}`,
          encodeURIComponent(String(requestParameters['schema']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      runtime.mapValues(jsonValue, BatchEditingFromJSON)
    );
  }

  /**
   * Get batch editor configuration for a standard
   */
  async getConfiguration(
    requestParameters: GetConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: BatchEditing }> {
    const response = await this.getConfigurationRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get batch editor configuration for standards
   */
  async getConfigurationsRaw(
    requestParameters: GetConfigurationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: BatchEditing }>> {
    const queryParameters: any = {};

    if (requestParameters['schema'] != null) {
      queryParameters['schema'] = requestParameters['schema'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/standards/batchconfiguration`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      runtime.mapValues(jsonValue, BatchEditingFromJSON)
    );
  }

  /**
   * Get batch editor configuration for standards
   */
  async getConfigurations(
    requestParameters: GetConfigurationsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: BatchEditing }> {
    const response = await this.getConfigurationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get editor associated resources panel configuration
   */
  async getEditorAssociatedPanelConfigurationRaw(
    requestParameters: GetEditorAssociatedPanelConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling getEditorAssociatedPanelConfiguration().'
      );
    }

    if (requestParameters['name'] == null) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter "name" was null or undefined when calling getEditorAssociatedPanelConfiguration().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/standards/{schema}/editor/associatedpanel/config/{name}.json`
          .replace(
            `{${'schema'}}`,
            encodeURIComponent(String(requestParameters['schema']))
          )
          .replace(
            `{${'name'}}`,
            encodeURIComponent(String(requestParameters['name']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get editor associated resources panel configuration
   */
  async getEditorAssociatedPanelConfiguration(
    requestParameters: GetEditorAssociatedPanelConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.getEditorAssociatedPanelConfigurationRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get descriptor details
   */
  async getElementDetailsRaw(
    requestParameters: GetElementDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Element>> {
    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling getElementDetails().'
      );
    }

    if (requestParameters['element'] == null) {
      throw new runtime.RequiredError(
        'element',
        'Required parameter "element" was null or undefined when calling getElementDetails().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['parent'] != null) {
      queryParameters['parent'] = requestParameters['parent'];
    }

    if (requestParameters['displayIf'] != null) {
      queryParameters['displayIf'] = requestParameters['displayIf'];
    }

    if (requestParameters['xpath'] != null) {
      queryParameters['xpath'] = requestParameters['xpath'];
    }

    if (requestParameters['isoType'] != null) {
      queryParameters['isoType'] = requestParameters['isoType'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/standards/{schema}/descriptors/{element}/details`
          .replace(
            `{${'schema'}}`,
            encodeURIComponent(String(requestParameters['schema']))
          )
          .replace(
            `{${'element'}}`,
            encodeURIComponent(String(requestParameters['element']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ElementFromJSON(jsonValue)
    );
  }

  /**
   * Get descriptor details
   */
  async getElementDetails(
    requestParameters: GetElementDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Element> {
    const response = await this.getElementDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get codelist details
   */
  async getSchemaCodelistsWithDetailsRaw(
    requestParameters: GetSchemaCodelistsWithDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Codelist>> {
    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling getSchemaCodelistsWithDetails().'
      );
    }

    if (requestParameters['codelist'] == null) {
      throw new runtime.RequiredError(
        'codelist',
        'Required parameter "codelist" was null or undefined when calling getSchemaCodelistsWithDetails().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['parent'] != null) {
      queryParameters['parent'] = requestParameters['parent'];
    }

    if (requestParameters['displayIf'] != null) {
      queryParameters['displayIf'] = requestParameters['displayIf'];
    }

    if (requestParameters['xpath'] != null) {
      queryParameters['xpath'] = requestParameters['xpath'];
    }

    if (requestParameters['isoType'] != null) {
      queryParameters['isoType'] = requestParameters['isoType'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/standards/{schema}/codelists/{codelist}/details`
          .replace(
            `{${'schema'}}`,
            encodeURIComponent(String(requestParameters['schema']))
          )
          .replace(
            `{${'codelist'}}`,
            encodeURIComponent(String(requestParameters['codelist']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      CodelistFromJSON(jsonValue)
    );
  }

  /**
   * Get codelist details
   */
  async getSchemaCodelistsWithDetails(
    requestParameters: GetSchemaCodelistsWithDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Codelist> {
    const response = await this.getSchemaCodelistsWithDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get codelist translations
   */
  async getSchemaTranslationsRaw(
    requestParameters: GetSchemaTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string }>> {
    if (requestParameters['schema'] == null) {
      throw new runtime.RequiredError(
        'schema',
        'Required parameter "schema" was null or undefined when calling getSchemaTranslations().'
      );
    }

    if (requestParameters['codelist'] == null) {
      throw new runtime.RequiredError(
        'codelist',
        'Required parameter "codelist" was null or undefined when calling getSchemaTranslations().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['parent'] != null) {
      queryParameters['parent'] = requestParameters['parent'];
    }

    if (requestParameters['displayIf'] != null) {
      queryParameters['displayIf'] = requestParameters['displayIf'];
    }

    if (requestParameters['xpath'] != null) {
      queryParameters['xpath'] = requestParameters['xpath'];
    }

    if (requestParameters['isoType'] != null) {
      queryParameters['isoType'] = requestParameters['isoType'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/standards/{schema}/codelists/{codelist}`
          .replace(
            `{${'schema'}}`,
            encodeURIComponent(String(requestParameters['schema']))
          )
          .replace(
            `{${'codelist'}}`,
            encodeURIComponent(String(requestParameters['codelist']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get codelist translations
   */
  async getSchemaTranslations(
    requestParameters: GetSchemaTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string }> {
    const response = await this.getSchemaTranslationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get standards
   */
  async getStandardConfigurationsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/standards`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get standards
   */
  async getStandardConfigurations(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.getStandardConfigurationsRaw(initOverrides);
  }

  /**
   * Reload standards
   */
  async reloadSchemaRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/standards/reload`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Reload standards
   */
  async reloadSchema(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.reloadSchemaRaw(initOverrides);
  }
}
