/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { IsoLanguage, Language } from '../models/index';
import {
  IsoLanguageFromJSON,
  IsoLanguageToJSON,
  LanguageFromJSON,
  LanguageToJSON,
} from '../models/index';

export interface AddLanguagesRequest {
  langCode: string;
}

export interface DeleteLanguageRequest {
  langCode: string;
}

/**
 *
 */
export class LanguagesApi extends runtime.BaseAPI {
  /**
   * Add all default translations from all *Desc tables in the database. This operation will only add translations for a default catalog installation. Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/_*.
   * Add a language
   */
  async addLanguagesRaw(
    requestParameters: AddLanguagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['langCode'] == null) {
      throw new runtime.RequiredError(
        'langCode',
        'Required parameter "langCode" was null or undefined when calling addLanguages().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/languages/{langCode}`.replace(
          `{${'langCode'}}`,
          encodeURIComponent(String(requestParameters['langCode']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add all default translations from all *Desc tables in the database. This operation will only add translations for a default catalog installation. Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/_*.
   * Add a language
   */
  async addLanguages(
    requestParameters: AddLanguagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.addLanguagesRaw(requestParameters, initOverrides);
  }

  /**
   * Delete all translations from all *Desc tables in the database. Warning: This will also remove all translations you may have done to those objects (eg. custom groups).
   * Remove a language
   */
  async deleteLanguageRaw(
    requestParameters: DeleteLanguageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['langCode'] == null) {
      throw new runtime.RequiredError(
        'langCode',
        'Required parameter "langCode" was null or undefined when calling deleteLanguage().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/languages/{langCode}`.replace(
          `{${'langCode'}}`,
          encodeURIComponent(String(requestParameters['langCode']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete all translations from all *Desc tables in the database. Warning: This will also remove all translations you may have done to those objects (eg. custom groups).
   * Remove a language
   */
  async deleteLanguage(
    requestParameters: DeleteLanguageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteLanguageRaw(requestParameters, initOverrides);
  }

  /**
   * Languages available in this version of the application. Those that you can add using PUT operation and which have SQL script to initialize the language.
   * Get languages available in the application
   */
  async getApplicationLanguagesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Language>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/languages/application`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(LanguageFromJSON)
    );
  }

  /**
   * Languages available in this version of the application. Those that you can add using PUT operation and which have SQL script to initialize the language.
   * Get languages available in the application
   */
  async getApplicationLanguages(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Language>> {
    const response = await this.getApplicationLanguagesRaw(initOverrides);
    return await response.value();
  }

  /**
   * ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).
   * Get ISO languages
   */
  async getIsoLanguagesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IsoLanguage>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/isolanguages`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(IsoLanguageFromJSON)
    );
  }

  /**
   * ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).
   * Get ISO languages
   */
  async getIsoLanguages(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IsoLanguage>> {
    const response = await this.getIsoLanguagesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Languages for the application having translations in the database. All tables with \'Desc\' suffix contains translation for some domain objects like groups, tags, ...
   * Get languages
   */
  async getLanguagesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Language>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/languages`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(LanguageFromJSON)
    );
  }

  /**
   * Languages for the application having translations in the database. All tables with \'Desc\' suffix contains translation for some domain objects like groups, tags, ...
   * Get languages
   */
  async getLanguages(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Language>> {
    const response = await this.getLanguagesRaw(initOverrides);
    return await response.value();
  }
}
