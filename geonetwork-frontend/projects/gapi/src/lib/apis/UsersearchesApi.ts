/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  PaginatedUserSearchResponse,
  UserSearchDto,
} from '../models/index';
import {
  PaginatedUserSearchResponseFromJSON,
  PaginatedUserSearchResponseToJSON,
  UserSearchDtoFromJSON,
  UserSearchDtoToJSON,
} from '../models/index';

export interface CreateUserCustomSearchRequest {
  userSearchDto: UserSearchDto;
}

export interface DeleteUserCustomSerachRequest {
  searchIdentifier: number;
}

export interface GetAllUserCustomSearchesRequest {
  featuredType?: GetAllUserCustomSearchesFeaturedTypeEnum;
}

export interface GetAllUserCustomSearchesPageRequest {
  featuredType?: GetAllUserCustomSearchesPageFeaturedTypeEnum;
  search?: string;
  offset?: number;
  limit?: number;
}

export interface GetFeaturedUserCustomSearchesRequest {
  type?: GetFeaturedUserCustomSearchesTypeEnum;
}

export interface GetUserCustomSearchRequest {
  searchIdentifier: number;
}

export interface UpdateCustomUserSearchRequest {
  searchIdentifier: number;
  userSearchDto: UserSearchDto;
}

/**
 *
 */
export class UsersearchesApi extends runtime.BaseAPI {
  /**
   * Creates a user search.
   * Creates a user search
   */
  async createUserCustomSearchRaw(
    requestParameters: CreateUserCustomSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (requestParameters['userSearchDto'] == null) {
      throw new runtime.RequiredError(
        'userSearchDto',
        'Required parameter "userSearchDto" was null or undefined when calling createUserCustomSearch().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/usersearches`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UserSearchDtoToJSON(requestParameters['userSearchDto']),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<number>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Creates a user search.
   * Creates a user search
   */
  async createUserCustomSearch(
    requestParameters: CreateUserCustomSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.createUserCustomSearchRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Deletes a user search by identifier.
   * Delete a user search
   */
  async deleteUserCustomSerachRaw(
    requestParameters: DeleteUserCustomSerachRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['searchIdentifier'] == null) {
      throw new runtime.RequiredError(
        'searchIdentifier',
        'Required parameter "searchIdentifier" was null or undefined when calling deleteUserCustomSerach().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/usersearches/{searchIdentifier}`.replace(
          `{${'searchIdentifier'}}`,
          encodeURIComponent(String(requestParameters['searchIdentifier']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Deletes a user search by identifier.
   * Delete a user search
   */
  async deleteUserCustomSerach(
    requestParameters: DeleteUserCustomSerachRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.deleteUserCustomSerachRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get user custom searches for all users (no paginated)
   */
  async getAllUserCustomSearchesRaw(
    requestParameters: GetAllUserCustomSearchesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserSearchDto>>> {
    const queryParameters: any = {};

    if (requestParameters['featuredType'] != null) {
      queryParameters['featuredType'] = requestParameters['featuredType'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/usersearches/all`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UserSearchDtoFromJSON)
    );
  }

  /**
   * Get user custom searches for all users (no paginated)
   */
  async getAllUserCustomSearches(
    requestParameters: GetAllUserCustomSearchesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserSearchDto>> {
    const response = await this.getAllUserCustomSearchesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get user custom searches for all users (paginated)
   */
  async getAllUserCustomSearchesPageRaw(
    requestParameters: GetAllUserCustomSearchesPageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedUserSearchResponse>> {
    const queryParameters: any = {};

    if (requestParameters['featuredType'] != null) {
      queryParameters['featuredType'] = requestParameters['featuredType'];
    }

    if (requestParameters['search'] != null) {
      queryParameters['search'] = requestParameters['search'];
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/usersearches/allpaginated`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      PaginatedUserSearchResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get user custom searches for all users (paginated)
   */
  async getAllUserCustomSearchesPage(
    requestParameters: GetAllUserCustomSearchesPageRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedUserSearchResponse> {
    const response = await this.getAllUserCustomSearchesPageRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get featured user custom searches
   */
  async getFeaturedUserCustomSearchesRaw(
    requestParameters: GetFeaturedUserCustomSearchesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserSearchDto>>> {
    const queryParameters: any = {};

    if (requestParameters['type'] != null) {
      queryParameters['type'] = requestParameters['type'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/usersearches/featured`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UserSearchDtoFromJSON)
    );
  }

  /**
   * Get featured user custom searches
   */
  async getFeaturedUserCustomSearches(
    requestParameters: GetFeaturedUserCustomSearchesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserSearchDto>> {
    const response = await this.getFeaturedUserCustomSearchesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get custom search
   */
  async getUserCustomSearchRaw(
    requestParameters: GetUserCustomSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserSearchDto>> {
    if (requestParameters['searchIdentifier'] == null) {
      throw new runtime.RequiredError(
        'searchIdentifier',
        'Required parameter "searchIdentifier" was null or undefined when calling getUserCustomSearch().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/usersearches/{searchIdentifier}`.replace(
          `{${'searchIdentifier'}}`,
          encodeURIComponent(String(requestParameters['searchIdentifier']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      UserSearchDtoFromJSON(jsonValue)
    );
  }

  /**
   * Get custom search
   */
  async getUserCustomSearch(
    requestParameters: GetUserCustomSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserSearchDto> {
    const response = await this.getUserCustomSearchRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get user custom searches
   */
  async getUserCustomSearchesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserSearchDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/usersearches`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UserSearchDtoFromJSON)
    );
  }

  /**
   * Get user custom searches
   */
  async getUserCustomSearches(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserSearchDto>> {
    const response = await this.getUserCustomSearchesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update a user search
   */
  async updateCustomUserSearchRaw(
    requestParameters: UpdateCustomUserSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['searchIdentifier'] == null) {
      throw new runtime.RequiredError(
        'searchIdentifier',
        'Required parameter "searchIdentifier" was null or undefined when calling updateCustomUserSearch().'
      );
    }

    if (requestParameters['userSearchDto'] == null) {
      throw new runtime.RequiredError(
        'userSearchDto',
        'Required parameter "userSearchDto" was null or undefined when calling updateCustomUserSearch().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/usersearches/{searchIdentifier}`.replace(
          `{${'searchIdentifier'}}`,
          encodeURIComponent(String(requestParameters['searchIdentifier']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UserSearchDtoToJSON(requestParameters['userSearchDto']),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a user search
   */
  async updateCustomUserSearch(
    requestParameters: UpdateCustomUserSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateCustomUserSearchRaw(requestParameters, initOverrides);
  }
}

/**
 * @export
 */
export const GetAllUserCustomSearchesFeaturedTypeEnum = {
  Home: 'HOME',
  EditorBoard: 'EDITOR_BOARD',
} as const;
export type GetAllUserCustomSearchesFeaturedTypeEnum =
  (typeof GetAllUserCustomSearchesFeaturedTypeEnum)[keyof typeof GetAllUserCustomSearchesFeaturedTypeEnum];
/**
 * @export
 */
export const GetAllUserCustomSearchesPageFeaturedTypeEnum = {
  Home: 'HOME',
  EditorBoard: 'EDITOR_BOARD',
} as const;
export type GetAllUserCustomSearchesPageFeaturedTypeEnum =
  (typeof GetAllUserCustomSearchesPageFeaturedTypeEnum)[keyof typeof GetAllUserCustomSearchesPageFeaturedTypeEnum];
/**
 * @export
 */
export const GetFeaturedUserCustomSearchesTypeEnum = {
  Home: 'HOME',
  EditorBoard: 'EDITOR_BOARD',
} as const;
export type GetFeaturedUserCustomSearchesTypeEnum =
  (typeof GetFeaturedUserCustomSearchesTypeEnum)[keyof typeof GetFeaturedUserCustomSearchesTypeEnum];
