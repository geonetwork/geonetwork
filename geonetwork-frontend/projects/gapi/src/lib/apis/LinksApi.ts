/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  LinkFilter,
  PageLink,
  SimpleMetadataProcessingReport,
} from '../models/index';
import {
  LinkFilterFromJSON,
  LinkFilterToJSON,
  PageLinkFromJSON,
  PageLinkToJSON,
  SimpleMetadataProcessingReportFromJSON,
  SimpleMetadataProcessingReportToJSON,
} from '../models/index';

export interface AnalyzeLinksRequest {
  url?: Array<string>;
}

export interface AnalyzeRecordLinksRequest {
  uuids?: Array<string>;
  bucket?: string;
  removeFirst?: boolean;
  analyze?: boolean;
}

export interface GetRecordLinksRequest {
  filter?: LinkFilter;
  groupIdFilter?: Array<number>;
  groupOwnerIdFilter?: Array<number>;
  httpErrorStatusValueFilter?: Array<number>;
  excludeHarvestedMetadataFilter?: boolean;
  page?: number;
  size?: number;
  sort?: string;
}

export interface GetRecordLinksAsCsvRequest {
  filter?: LinkFilter;
  groupIdFilter?: Array<number>;
  groupOwnerIdFilter?: Array<number>;
  httpStatusValueFilter?: Array<number>;
  excludeHarvestedMetadataFilter?: boolean;
  page?: number;
  size?: number;
  sort?: string;
}

export interface GetRecordLinksPostRequest {
  filter?: LinkFilter;
  groupIdFilter?: Array<number>;
  groupOwnerIdFilter?: Array<number>;
  httpStatusValueFilter?: Array<number>;
  excludeHarvestedMetadataFilter?: boolean;
  page?: number;
  size?: number;
  sort?: string;
}

/**
 *
 */
export class LinksApi extends runtime.BaseAPI {
  /**
   * Analyze one or more links
   */
  async analyzeLinksRaw(
    requestParameters: AnalyzeLinksRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['url'] != null) {
      queryParameters['url'] = requestParameters['url'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/records/links/analyzeurl`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Analyze one or more links
   */
  async analyzeLinks(
    requestParameters: AnalyzeLinksRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.analyzeLinksRaw(requestParameters, initOverrides);
  }

  /**
   * One of uuids or bucket parameter is required if not an Administrator. Only records that you can edit will be validated.
   * Analyze records links
   */
  async analyzeRecordLinksRaw(
    requestParameters: AnalyzeRecordLinksRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SimpleMetadataProcessingReport>> {
    const queryParameters: any = {};

    if (requestParameters['uuids'] != null) {
      queryParameters['uuids'] = requestParameters['uuids'];
    }

    if (requestParameters['bucket'] != null) {
      queryParameters['bucket'] = requestParameters['bucket'];
    }

    if (requestParameters['removeFirst'] != null) {
      queryParameters['removeFirst'] = requestParameters['removeFirst'];
    }

    if (requestParameters['analyze'] != null) {
      queryParameters['analyze'] = requestParameters['analyze'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/records/links/analyze`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      SimpleMetadataProcessingReportFromJSON(jsonValue)
    );
  }

  /**
   * One of uuids or bucket parameter is required if not an Administrator. Only records that you can edit will be validated.
   * Analyze records links
   */
  async analyzeRecordLinks(
    requestParameters: AnalyzeRecordLinksRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SimpleMetadataProcessingReport> {
    const response = await this.analyzeRecordLinksRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get record links
   */
  async getRecordLinksRaw(
    requestParameters: GetRecordLinksRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PageLink>> {
    const queryParameters: any = {};

    if (requestParameters['filter'] != null) {
      queryParameters['filter'] = requestParameters['filter'];
    }

    if (requestParameters['groupIdFilter'] != null) {
      queryParameters['groupIdFilter'] = requestParameters['groupIdFilter'];
    }

    if (requestParameters['groupOwnerIdFilter'] != null) {
      queryParameters['groupOwnerIdFilter'] =
        requestParameters['groupOwnerIdFilter'];
    }

    if (requestParameters['httpErrorStatusValueFilter'] != null) {
      queryParameters['httpErrorStatusValueFilter'] =
        requestParameters['httpErrorStatusValueFilter'];
    }

    if (requestParameters['excludeHarvestedMetadataFilter'] != null) {
      queryParameters['excludeHarvestedMetadataFilter'] =
        requestParameters['excludeHarvestedMetadataFilter'];
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['size'] != null) {
      queryParameters['size'] = requestParameters['size'];
    }

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/records/links`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      PageLinkFromJSON(jsonValue)
    );
  }

  /**
   * Get record links
   */
  async getRecordLinks(
    requestParameters: GetRecordLinksRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PageLink> {
    const response = await this.getRecordLinksRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get record links as CSV
   */
  async getRecordLinksAsCsvRaw(
    requestParameters: GetRecordLinksAsCsvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['filter'] != null) {
      queryParameters['filter'] = requestParameters['filter'];
    }

    if (requestParameters['groupIdFilter'] != null) {
      queryParameters['groupIdFilter'] = requestParameters['groupIdFilter'];
    }

    if (requestParameters['groupOwnerIdFilter'] != null) {
      queryParameters['groupOwnerIdFilter'] =
        requestParameters['groupOwnerIdFilter'];
    }

    if (requestParameters['httpStatusValueFilter'] != null) {
      queryParameters['httpStatusValueFilter'] =
        requestParameters['httpStatusValueFilter'];
    }

    if (requestParameters['excludeHarvestedMetadataFilter'] != null) {
      queryParameters['excludeHarvestedMetadataFilter'] =
        requestParameters['excludeHarvestedMetadataFilter'];
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['size'] != null) {
      queryParameters['size'] = requestParameters['size'];
    }

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/records/links/csv`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get record links as CSV
   */
  async getRecordLinksAsCsv(
    requestParameters: GetRecordLinksAsCsvRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.getRecordLinksAsCsvRaw(requestParameters, initOverrides);
  }

  /**
   * Get record links
   */
  async getRecordLinksPostRaw(
    requestParameters: GetRecordLinksPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PageLink>> {
    const queryParameters: any = {};

    if (requestParameters['filter'] != null) {
      queryParameters['filter'] = requestParameters['filter'];
    }

    if (requestParameters['groupIdFilter'] != null) {
      queryParameters['groupIdFilter'] = requestParameters['groupIdFilter'];
    }

    if (requestParameters['groupOwnerIdFilter'] != null) {
      queryParameters['groupOwnerIdFilter'] =
        requestParameters['groupOwnerIdFilter'];
    }

    if (requestParameters['httpStatusValueFilter'] != null) {
      queryParameters['httpStatusValueFilter'] =
        requestParameters['httpStatusValueFilter'];
    }

    if (requestParameters['excludeHarvestedMetadataFilter'] != null) {
      queryParameters['excludeHarvestedMetadataFilter'] =
        requestParameters['excludeHarvestedMetadataFilter'];
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['size'] != null) {
      queryParameters['size'] = requestParameters['size'];
    }

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/records/links`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      PageLinkFromJSON(jsonValue)
    );
  }

  /**
   * Get record links
   */
  async getRecordLinksPost(
    requestParameters: GetRecordLinksPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PageLink> {
    const response = await this.getRecordLinksPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Remove all links and status history
   */
  async purgeAllRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/records/links`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove all links and status history
   */
  async purgeAll(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.purgeAllRaw(initOverrides);
  }
}
