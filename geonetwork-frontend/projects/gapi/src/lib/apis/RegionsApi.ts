/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { Category, ListRegionsResponse } from '../models/index';
import {
  CategoryFromJSON,
  CategoryToJSON,
  ListRegionsResponseFromJSON,
  ListRegionsResponseToJSON,
} from '../models/index';

export interface GetGeomAsImageRequest {
  mapsrs?: string;
  width?: number;
  height?: number;
  background?: string;
  geom?: string;
  geomtype?: string;
  geomsrs?: string;
  fillColor?: string;
  strokeColor?: string;
}

export interface GetRegionsRequest {
  label?: string;
  categoryId?: string;
  maxRecords?: number;
}

/**
 *
 */
export class RegionsApi extends runtime.BaseAPI {
  /**
   * A rendering of the geometry as a png.
   * Get geometry as image
   */
  async getGeomAsImageRaw(
    requestParameters: GetGeomAsImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {};

    if (requestParameters['mapsrs'] != null) {
      queryParameters['mapsrs'] = requestParameters['mapsrs'];
    }

    if (requestParameters['width'] != null) {
      queryParameters['width'] = requestParameters['width'];
    }

    if (requestParameters['height'] != null) {
      queryParameters['height'] = requestParameters['height'];
    }

    if (requestParameters['background'] != null) {
      queryParameters['background'] = requestParameters['background'];
    }

    if (requestParameters['geom'] != null) {
      queryParameters['geom'] = requestParameters['geom'];
    }

    if (requestParameters['geomtype'] != null) {
      queryParameters['geomtype'] = requestParameters['geomtype'];
    }

    if (requestParameters['geomsrs'] != null) {
      queryParameters['geomsrs'] = requestParameters['geomsrs'];
    }

    if (requestParameters['fillColor'] != null) {
      queryParameters['fillColor'] = requestParameters['fillColor'];
    }

    if (requestParameters['strokeColor'] != null) {
      queryParameters['strokeColor'] = requestParameters['strokeColor'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/regions/geom.png`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * A rendering of the geometry as a png.
   * Get geometry as image
   */
  async getGeomAsImage(
    requestParameters: GetGeomAsImageRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.getGeomAsImageRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get list of region types
   */
  async getRegionTypesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Category>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/regions/types`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(CategoryFromJSON)
    );
  }

  /**
   * Get list of region types
   */
  async getRegionTypes(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Category>> {
    const response = await this.getRegionTypesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get list of regions
   */
  async getRegionsRaw(
    requestParameters: GetRegionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListRegionsResponse>> {
    const queryParameters: any = {};

    if (requestParameters['label'] != null) {
      queryParameters['label'] = requestParameters['label'];
    }

    if (requestParameters['categoryId'] != null) {
      queryParameters['categoryId'] = requestParameters['categoryId'];
    }

    if (requestParameters['maxRecords'] != null) {
      queryParameters['maxRecords'] = requestParameters['maxRecords'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/regions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ListRegionsResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get list of regions
   */
  async getRegions(
    requestParameters: GetRegionsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListRegionsResponse> {
    const response = await this.getRegionsRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
