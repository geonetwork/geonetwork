/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { Selection } from '../models/index';
import { SelectionFromJSON, SelectionToJSON } from '../models/index';

export interface AddToUserSelectionRequest {
  selectionIdentifier: number;
  userIdentifier: number;
  uuid?: Array<string>;
}

export interface CreatePersistentSelectionTypeRequest {
  selection: Selection;
}

export interface DeleteFromUserSelectionRequest {
  selectionIdentifier: number;
  userIdentifier: number;
  uuid?: Array<string>;
}

export interface DeleteUserSelectionRequest {
  selectionIdentifier: number;
}

export interface GetSelectionRecordsRequest {
  selectionIdentifier: number;
  userIdentifier: number;
}

export interface UpdateUserSelectionRequest {
  selectionIdentifier: number;
  selection: Selection;
}

/**
 *
 */
export class UserselectionsApi extends runtime.BaseAPI {
  /**
   * Add items to a user selection set
   */
  async addToUserSelectionRaw(
    requestParameters: AddToUserSelectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['selectionIdentifier'] == null) {
      throw new runtime.RequiredError(
        'selectionIdentifier',
        'Required parameter "selectionIdentifier" was null or undefined when calling addToUserSelection().'
      );
    }

    if (requestParameters['userIdentifier'] == null) {
      throw new runtime.RequiredError(
        'userIdentifier',
        'Required parameter "userIdentifier" was null or undefined when calling addToUserSelection().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['uuid'] != null) {
      queryParameters['uuid'] = requestParameters['uuid'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userselections/{selectionIdentifier}/{userIdentifier}`
          .replace(
            `{${'selectionIdentifier'}}`,
            encodeURIComponent(String(requestParameters['selectionIdentifier']))
          )
          .replace(
            `{${'userIdentifier'}}`,
            encodeURIComponent(String(requestParameters['userIdentifier']))
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Add items to a user selection set
   */
  async addToUserSelection(
    requestParameters: AddToUserSelectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.addToUserSelectionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Add a user selection set
   */
  async createPersistentSelectionTypeRaw(
    requestParameters: CreatePersistentSelectionTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['selection'] == null) {
      throw new runtime.RequiredError(
        'selection',
        'Required parameter "selection" was null or undefined when calling createPersistentSelectionType().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/userselections`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: SelectionToJSON(requestParameters['selection']),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Add a user selection set
   */
  async createPersistentSelectionType(
    requestParameters: CreatePersistentSelectionTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.createPersistentSelectionTypeRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Remove items to a user selection set
   */
  async deleteFromUserSelectionRaw(
    requestParameters: DeleteFromUserSelectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['selectionIdentifier'] == null) {
      throw new runtime.RequiredError(
        'selectionIdentifier',
        'Required parameter "selectionIdentifier" was null or undefined when calling deleteFromUserSelection().'
      );
    }

    if (requestParameters['userIdentifier'] == null) {
      throw new runtime.RequiredError(
        'userIdentifier',
        'Required parameter "userIdentifier" was null or undefined when calling deleteFromUserSelection().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['uuid'] != null) {
      queryParameters['uuid'] = requestParameters['uuid'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userselections/{selectionIdentifier}/{userIdentifier}`
          .replace(
            `{${'selectionIdentifier'}}`,
            encodeURIComponent(String(requestParameters['selectionIdentifier']))
          )
          .replace(
            `{${'userIdentifier'}}`,
            encodeURIComponent(String(requestParameters['userIdentifier']))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove items to a user selection set
   */
  async deleteFromUserSelection(
    requestParameters: DeleteFromUserSelectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteFromUserSelectionRaw(requestParameters, initOverrides);
  }

  /**
   * Remove a user selection set
   */
  async deleteUserSelectionRaw(
    requestParameters: DeleteUserSelectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['selectionIdentifier'] == null) {
      throw new runtime.RequiredError(
        'selectionIdentifier',
        'Required parameter "selectionIdentifier" was null or undefined when calling deleteUserSelection().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userselections/{selectionIdentifier}`.replace(
          `{${'selectionIdentifier'}}`,
          encodeURIComponent(String(requestParameters['selectionIdentifier']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove a user selection set
   */
  async deleteUserSelection(
    requestParameters: DeleteUserSelectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteUserSelectionRaw(requestParameters, initOverrides);
  }

  /**
   * Get list of user selection sets
   */
  async getSelectionListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Selection>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userselections`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(SelectionFromJSON)
    );
  }

  /**
   * Get list of user selection sets
   */
  async getSelectionList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Selection>> {
    const response = await this.getSelectionListRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get record in a user selection set
   */
  async getSelectionRecordsRaw(
    requestParameters: GetSelectionRecordsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    if (requestParameters['selectionIdentifier'] == null) {
      throw new runtime.RequiredError(
        'selectionIdentifier',
        'Required parameter "selectionIdentifier" was null or undefined when calling getSelectionRecords().'
      );
    }

    if (requestParameters['userIdentifier'] == null) {
      throw new runtime.RequiredError(
        'userIdentifier',
        'Required parameter "userIdentifier" was null or undefined when calling getSelectionRecords().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userselections/{selectionIdentifier}/{userIdentifier}`
          .replace(
            `{${'selectionIdentifier'}}`,
            encodeURIComponent(String(requestParameters['selectionIdentifier']))
          )
          .replace(
            `{${'userIdentifier'}}`,
            encodeURIComponent(String(requestParameters['userIdentifier']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get record in a user selection set
   */
  async getSelectionRecords(
    requestParameters: GetSelectionRecordsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.getSelectionRecordsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update a user selection set
   */
  async updateUserSelectionRaw(
    requestParameters: UpdateUserSelectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['selectionIdentifier'] == null) {
      throw new runtime.RequiredError(
        'selectionIdentifier',
        'Required parameter "selectionIdentifier" was null or undefined when calling updateUserSelection().'
      );
    }

    if (requestParameters['selection'] == null) {
      throw new runtime.RequiredError(
        'selection',
        'Required parameter "selection" was null or undefined when calling updateUserSelection().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/userselections/{selectionIdentifier}`.replace(
          `{${'selectionIdentifier'}}`,
          encodeURIComponent(String(requestParameters['selectionIdentifier']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: SelectionToJSON(requestParameters['selection']),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a user selection set
   */
  async updateUserSelection(
    requestParameters: UpdateUserSelectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateUserSelectionRaw(requestParameters, initOverrides);
  }
}
