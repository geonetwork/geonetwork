/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  RatingAverage,
  RatingCriteria,
  UserFeedbackDTO,
} from '../models/index';
import {
  RatingAverageFromJSON,
  RatingAverageToJSON,
  RatingCriteriaFromJSON,
  RatingCriteriaToJSON,
  UserFeedbackDTOFromJSON,
  UserFeedbackDTOToJSON,
} from '../models/index';

export interface DeleteUserFeedbackRequest {
  uuid: string;
}

export interface GetMetadataRatingRequest {
  metadataUuid: string;
}

export interface GetUserCommentRequest {
  uuid: string;
}

export interface GetUserCommentsRequest {
  metadataUuid?: string;
  size?: number;
}

export interface GetUserCommentsOnARecordRequest {
  metadataUuid: string;
  size?: number;
}

export interface NewUserFeedbackRequest {
  userFeedbackDTO: UserFeedbackDTO;
}

export interface PublishFeedbackRequest {
  uuid: string;
}

export interface SendEmailToContactRequest {
  metadataUuid: string;
  name: string;
  org: string;
  email: string;
  comments: string;
  recaptcha?: string;
  phone?: string;
  subject?: string;
  _function?: string;
  type?: string;
  category?: string;
  metadataEmail?: string;
}

/**
 *
 */
export class UserfeedbackApi extends runtime.BaseAPI {
  /**
   * Removes a user feedback
   * Removes a user feedback
   */
  async deleteUserFeedbackRaw(
    requestParameters: DeleteUserFeedbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling deleteUserFeedback().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userfeedback/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Removes a user feedback
   * Removes a user feedback
   */
  async deleteUserFeedback(
    requestParameters: DeleteUserFeedbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteUserFeedbackRaw(requestParameters, initOverrides);
  }

  /**
   * Provides an average rating for a metadata record
   */
  async getMetadataRatingRaw(
    requestParameters: GetMetadataRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RatingAverage>> {
    if (requestParameters['metadataUuid'] == null) {
      throw new runtime.RequiredError(
        'metadataUuid',
        'Required parameter "metadataUuid" was null or undefined when calling getMetadataRating().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/records/{metadataUuid}/userfeedbackrating`.replace(
          `{${'metadataUuid'}}`,
          encodeURIComponent(String(requestParameters['metadataUuid']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      RatingAverageFromJSON(jsonValue)
    );
  }

  /**
   * Provides an average rating for a metadata record
   */
  async getMetadataRating(
    requestParameters: GetMetadataRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RatingAverage> {
    const response = await this.getMetadataRatingRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get list of rating criteria
   */
  async getRatingCriteriaRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<RatingCriteria>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userfeedback/ratingcriteria`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(RatingCriteriaFromJSON)
    );
  }

  /**
   * Get list of rating criteria
   */
  async getRatingCriteria(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<RatingCriteria>> {
    const response = await this.getRatingCriteriaRaw(initOverrides);
    return await response.value();
  }

  /**
   * Finds a specific user feedback
   */
  async getUserCommentRaw(
    requestParameters: GetUserCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserFeedbackDTO>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling getUserComment().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userfeedback/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      UserFeedbackDTOFromJSON(jsonValue)
    );
  }

  /**
   * Finds a specific user feedback
   */
  async getUserComment(
    requestParameters: GetUserCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserFeedbackDTO> {
    const response = await this.getUserCommentRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *  This list will include also the draft user feedback if the client is logged as reviewer.
   * Finds a list of user feedback records.
   */
  async getUserCommentsRaw(
    requestParameters: GetUserCommentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserFeedbackDTO>>> {
    const queryParameters: any = {};

    if (requestParameters['metadataUuid'] != null) {
      queryParameters['metadataUuid'] = requestParameters['metadataUuid'];
    }

    if (requestParameters['size'] != null) {
      queryParameters['size'] = requestParameters['size'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userfeedback`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UserFeedbackDTOFromJSON)
    );
  }

  /**
   *  This list will include also the draft user feedback if the client is logged as reviewer.
   * Finds a list of user feedback records.
   */
  async getUserComments(
    requestParameters: GetUserCommentsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserFeedbackDTO>> {
    const response = await this.getUserCommentsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *  This list will include also the draft user feedback if the client is logged as reviewer.
   * Finds a list of user feedback for a specific records.
   */
  async getUserCommentsOnARecordRaw(
    requestParameters: GetUserCommentsOnARecordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserFeedbackDTO>>> {
    if (requestParameters['metadataUuid'] == null) {
      throw new runtime.RequiredError(
        'metadataUuid',
        'Required parameter "metadataUuid" was null or undefined when calling getUserCommentsOnARecord().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['size'] != null) {
      queryParameters['size'] = requestParameters['size'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/records/{metadataUuid}/userfeedback`.replace(
          `{${'metadataUuid'}}`,
          encodeURIComponent(String(requestParameters['metadataUuid']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UserFeedbackDTOFromJSON)
    );
  }

  /**
   *  This list will include also the draft user feedback if the client is logged as reviewer.
   * Finds a list of user feedback for a specific records.
   */
  async getUserCommentsOnARecord(
    requestParameters: GetUserCommentsOnARecordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserFeedbackDTO>> {
    const response = await this.getUserCommentsOnARecordRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Creates a user feedback in draft status if the user is not logged in.
   * Creates a user feedback
   */
  async newUserFeedbackRaw(
    requestParameters: NewUserFeedbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['userFeedbackDTO'] == null) {
      throw new runtime.RequiredError(
        'userFeedbackDTO',
        'Required parameter "userFeedbackDTO" was null or undefined when calling newUserFeedback().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/userfeedback`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserFeedbackDTOToJSON(requestParameters['userFeedbackDTO']),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Creates a user feedback in draft status if the user is not logged in.
   * Creates a user feedback
   */
  async newUserFeedback(
    requestParameters: NewUserFeedbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.newUserFeedbackRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * For reviewers
   * Publishes a feedback
   */
  async publishFeedbackRaw(
    requestParameters: PublishFeedbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling publishFeedback().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/userfeedback/{uuid}/publish`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * For reviewers
   * Publishes a feedback
   */
  async publishFeedback(
    requestParameters: PublishFeedbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.publishFeedbackRaw(requestParameters, initOverrides);
  }

  /**
   * Send an email to catalogue administrator or record\'s contact
   */
  async sendEmailToContactRaw(
    requestParameters: SendEmailToContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['metadataUuid'] == null) {
      throw new runtime.RequiredError(
        'metadataUuid',
        'Required parameter "metadataUuid" was null or undefined when calling sendEmailToContact().'
      );
    }

    if (requestParameters['name'] == null) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter "name" was null or undefined when calling sendEmailToContact().'
      );
    }

    if (requestParameters['org'] == null) {
      throw new runtime.RequiredError(
        'org',
        'Required parameter "org" was null or undefined when calling sendEmailToContact().'
      );
    }

    if (requestParameters['email'] == null) {
      throw new runtime.RequiredError(
        'email',
        'Required parameter "email" was null or undefined when calling sendEmailToContact().'
      );
    }

    if (requestParameters['comments'] == null) {
      throw new runtime.RequiredError(
        'comments',
        'Required parameter "comments" was null or undefined when calling sendEmailToContact().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['recaptcha'] != null) {
      queryParameters['recaptcha'] = requestParameters['recaptcha'];
    }

    if (requestParameters['name'] != null) {
      queryParameters['name'] = requestParameters['name'];
    }

    if (requestParameters['org'] != null) {
      queryParameters['org'] = requestParameters['org'];
    }

    if (requestParameters['email'] != null) {
      queryParameters['email'] = requestParameters['email'];
    }

    if (requestParameters['comments'] != null) {
      queryParameters['comments'] = requestParameters['comments'];
    }

    if (requestParameters['phone'] != null) {
      queryParameters['phone'] = requestParameters['phone'];
    }

    if (requestParameters['subject'] != null) {
      queryParameters['subject'] = requestParameters['subject'];
    }

    if (requestParameters['_function'] != null) {
      queryParameters['function'] = requestParameters['_function'];
    }

    if (requestParameters['type'] != null) {
      queryParameters['type'] = requestParameters['type'];
    }

    if (requestParameters['category'] != null) {
      queryParameters['category'] = requestParameters['category'];
    }

    if (requestParameters['metadataEmail'] != null) {
      queryParameters['metadataEmail'] = requestParameters['metadataEmail'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/records/{metadataUuid}/alert`.replace(
          `{${'metadataUuid'}}`,
          encodeURIComponent(String(requestParameters['metadataUuid']))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Send an email to catalogue administrator or record\'s contact
   */
  async sendEmailToContact(
    requestParameters: SendEmailToContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.sendEmailToContactRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
