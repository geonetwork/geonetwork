/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

export interface DescribeRequest {
  metadataUuid: string;
}

export interface DescribeResourceRequest {
  fileIdentifier?: string;
  spatialDatasetIdentifierCode?: string;
  spatialDatasetIdentifierNamespace?: string;
}

export interface DownloadResourceRequest {
  spatialDatasetIdentifierCode: string;
  spatialDatasetIdentifierNamespace: string;
  crs: string;
}

export interface FeedsRequest {
  fileIdentifier?: string;
}

/**
 *
 */
export class AtomApi extends runtime.BaseAPI {
  /**
   * Describe service
   */
  async describeRaw(
    requestParameters: DescribeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['metadataUuid'] == null) {
      throw new runtime.RequiredError(
        'metadataUuid',
        'Required parameter "metadataUuid" was null or undefined when calling describe().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/atom/describe/service/{metadataUuid}`.replace(
          `{${'metadataUuid'}}`,
          encodeURIComponent(String(requestParameters['metadataUuid']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Describe service
   */
  async describe(
    requestParameters: DescribeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.describeRaw(requestParameters, initOverrides);
  }

  /**
   * Describe resource
   */
  async describeResourceRaw(
    requestParameters: DescribeResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters['fileIdentifier'] != null) {
      queryParameters['fileIdentifier'] = requestParameters['fileIdentifier'];
    }

    if (requestParameters['spatialDatasetIdentifierCode'] != null) {
      queryParameters['spatial_dataset_identifier_code'] =
        requestParameters['spatialDatasetIdentifierCode'];
    }

    if (requestParameters['spatialDatasetIdentifierNamespace'] != null) {
      queryParameters['spatial_dataset_identifier_namespace'] =
        requestParameters['spatialDatasetIdentifierNamespace'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/atom/describe/resource`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Describe resource
   */
  async describeResource(
    requestParameters: DescribeResourceRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.describeResourceRaw(requestParameters, initOverrides);
  }

  /**
   * This service if a dataset has only 1 download format for a CRS returns the file, otherwise returns a feed with downloads for the dataset.
   * Get a data file related to dataset
   */
  async downloadResourceRaw(
    requestParameters: DownloadResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['spatialDatasetIdentifierCode'] == null) {
      throw new runtime.RequiredError(
        'spatialDatasetIdentifierCode',
        'Required parameter "spatialDatasetIdentifierCode" was null or undefined when calling downloadResource().'
      );
    }

    if (requestParameters['spatialDatasetIdentifierNamespace'] == null) {
      throw new runtime.RequiredError(
        'spatialDatasetIdentifierNamespace',
        'Required parameter "spatialDatasetIdentifierNamespace" was null or undefined when calling downloadResource().'
      );
    }

    if (requestParameters['crs'] == null) {
      throw new runtime.RequiredError(
        'crs',
        'Required parameter "crs" was null or undefined when calling downloadResource().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['spatialDatasetIdentifierCode'] != null) {
      queryParameters['spatial_dataset_identifier_code'] =
        requestParameters['spatialDatasetIdentifierCode'];
    }

    if (requestParameters['spatialDatasetIdentifierNamespace'] != null) {
      queryParameters['spatial_dataset_identifier_namespace'] =
        requestParameters['spatialDatasetIdentifierNamespace'];
    }

    if (requestParameters['crs'] != null) {
      queryParameters['crs'] = requestParameters['crs'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/atom/download/resource`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This service if a dataset has only 1 download format for a CRS returns the file, otherwise returns a feed with downloads for the dataset.
   * Get a data file related to dataset
   */
  async downloadResource(
    requestParameters: DownloadResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.downloadResourceRaw(requestParameters, initOverrides);
  }

  /**
   * Get ATOM feeds
   */
  async feedsRaw(
    requestParameters: FeedsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    if (requestParameters['fileIdentifier'] != null) {
      queryParameters['fileIdentifier'] = requestParameters['fileIdentifier'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/atom/feeds`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get ATOM feeds
   */
  async feeds(
    requestParameters: FeedsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object | null | undefined> {
    const response = await this.feedsRaw(requestParameters, initOverrides);
    switch (response.raw.status) {
      case 200:
        return await response.value();
      case 204:
        return null;
      default:
        return await response.value();
    }
  }

  /**
   * Check in the settings which protocol identify ATOM feeds in your catalogue.Only applies to ISO19139 records.
   * Scan records for ATOM feeds
   */
  async scanRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/atom/scan`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Check in the settings which protocol identify ATOM feeds in your catalogue.Only applies to ISO19139 records.
   * Scan records for ATOM feeds
   */
  async scan(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object | null | undefined> {
    const response = await this.scanRaw(initOverrides);
    switch (response.raw.status) {
      case 201:
        return await response.value();
      case 204:
        return null;
      default:
        return await response.value();
    }
  }
}
