/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { UiSetting } from '../models/index';
import { UiSettingFromJSON, UiSettingToJSON } from '../models/index';

export interface DeleteUiConfigurationRequest {
  uiIdentifier: string;
}

export interface GetUiConfigurationRequest {
  uiIdentifier: string;
}

export interface PutUiConfigurationRequest {
  uiSetting: UiSetting;
}

export interface UpdateUiConfigurationRequest {
  uiIdentifier: string;
  uiSetting: UiSetting;
}

/**
 *
 */
export class UiApi extends runtime.BaseAPI {
  /**
   * Remove a UI Configuration
   */
  async deleteUiConfigurationRaw(
    requestParameters: DeleteUiConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['uiIdentifier'] == null) {
      throw new runtime.RequiredError(
        'uiIdentifier',
        'Required parameter "uiIdentifier" was null or undefined when calling deleteUiConfiguration().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/ui/{uiIdentifier}`.replace(
          `{${'uiIdentifier'}}`,
          encodeURIComponent(String(requestParameters['uiIdentifier']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove a UI Configuration
   */
  async deleteUiConfiguration(
    requestParameters: DeleteUiConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteUiConfigurationRaw(requestParameters, initOverrides);
  }

  /**
   * Get a UI configuration
   */
  async getUiConfigurationRaw(
    requestParameters: GetUiConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UiSetting>> {
    if (requestParameters['uiIdentifier'] == null) {
      throw new runtime.RequiredError(
        'uiIdentifier',
        'Required parameter "uiIdentifier" was null or undefined when calling getUiConfiguration().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/ui/{uiIdentifier}`.replace(
          `{${'uiIdentifier'}}`,
          encodeURIComponent(String(requestParameters['uiIdentifier']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      UiSettingFromJSON(jsonValue)
    );
  }

  /**
   * Get a UI configuration
   */
  async getUiConfiguration(
    requestParameters: GetUiConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UiSetting> {
    const response = await this.getUiConfigurationRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get UI configuration
   */
  async getUiConfigurationsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UiSetting>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/ui`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UiSettingFromJSON)
    );
  }

  /**
   * Get UI configuration
   */
  async getUiConfigurations(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UiSetting>> {
    const response = await this.getUiConfigurationsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a UI configuration
   */
  async putUiConfigurationRaw(
    requestParameters: PutUiConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['uiSetting'] == null) {
      throw new runtime.RequiredError(
        'uiSetting',
        'Required parameter "uiSetting" was null or undefined when calling putUiConfiguration().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/ui`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UiSettingToJSON(requestParameters['uiSetting']),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create a UI configuration
   */
  async putUiConfiguration(
    requestParameters: PutUiConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.putUiConfigurationRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update a UI configuration
   */
  async updateUiConfigurationRaw(
    requestParameters: UpdateUiConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['uiIdentifier'] == null) {
      throw new runtime.RequiredError(
        'uiIdentifier',
        'Required parameter "uiIdentifier" was null or undefined when calling updateUiConfiguration().'
      );
    }

    if (requestParameters['uiSetting'] == null) {
      throw new runtime.RequiredError(
        'uiSetting',
        'Required parameter "uiSetting" was null or undefined when calling updateUiConfiguration().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/ui/{uiIdentifier}`.replace(
          `{${'uiIdentifier'}}`,
          encodeURIComponent(String(requestParameters['uiIdentifier']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UiSettingToJSON(requestParameters['uiSetting']),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a UI configuration
   */
  async updateUiConfiguration(
    requestParameters: UpdateUiConfigurationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateUiConfigurationRaw(requestParameters, initOverrides);
  }
}
