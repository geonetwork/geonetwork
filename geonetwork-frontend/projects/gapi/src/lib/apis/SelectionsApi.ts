/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork 4.4.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.4.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

export interface AddRequest {
  bucket: string;
  uuid?: Array<string>;
}

export interface ClearRequest {
  bucket: string;
  uuid?: Array<string>;
}

export interface GetRequest {
  bucket: string;
}

/**
 *
 */
export class SelectionsApi extends runtime.BaseAPI {
  /**
   * Select one or more items
   */
  async addRaw(
    requestParameters: AddRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (requestParameters['bucket'] == null) {
      throw new runtime.RequiredError(
        'bucket',
        'Required parameter "bucket" was null or undefined when calling add().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['uuid'] != null) {
      queryParameters['uuid'] = requestParameters['uuid'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/selections/{bucket}`.replace(
          `{${'bucket'}}`,
          encodeURIComponent(String(requestParameters['bucket']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<number>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Select one or more items
   */
  async add(
    requestParameters: AddRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.addRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Clear selection or remove items
   */
  async clearRaw(
    requestParameters: ClearRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<number>> {
    if (requestParameters['bucket'] == null) {
      throw new runtime.RequiredError(
        'bucket',
        'Required parameter "bucket" was null or undefined when calling clear().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['uuid'] != null) {
      queryParameters['uuid'] = requestParameters['uuid'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/selections/{bucket}`.replace(
          `{${'bucket'}}`,
          encodeURIComponent(String(requestParameters['bucket']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<number>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Clear selection or remove items
   */
  async clear(
    requestParameters: ClearRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<number> {
    const response = await this.clearRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get current selection
   */
  async getRaw(
    requestParameters: GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Set<string>>> {
    if (requestParameters['bucket'] == null) {
      throw new runtime.RequiredError(
        'bucket',
        'Required parameter "bucket" was null or undefined when calling get().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/selections/{bucket}`.replace(
          `{${'bucket'}}`,
          encodeURIComponent(String(requestParameters['bucket']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get current selection
   */
  async get(
    requestParameters: GetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Set<string>> {
    const response = await this.getRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get current selections
   */
  async getSelectionsAndSizeRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: number }>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/selections`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get current selections
   */
  async getSelectionsAndSize(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: number }> {
    const response = await this.getSelectionsAndSizeRaw(initOverrides);
    return await response.value();
  }
}
