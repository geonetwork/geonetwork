{
  "openapi": "3.0.1",
  "info": {
    "contact": {
      "email": "geonetwork-users@lists.sourceforge.net",
      "name": "GeoNetwork user mailing list",
      "url": "https://sourceforge.net/p/geonetwork/mailman/geonetwork-users/"
    },
    "description": "This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.",
    "license": {
      "name": "GPL 2.0",
      "url": "https://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
    },
    "title": "GeoNetwork 4.4.7 OpenAPI Documentation",
    "version": "4.4.7"
  },
  "externalDocs": {
    "description": "Learn how to access the catalog using the GeoNetwork REST API.",
    "url": "http://localhost:7979/geonetwork/doc/api"
  },
  "servers": [
    {
      "url": "{catalog}/{portal}/api",
      "description": "My GeoNetwork",
      "variables": {
        "catalog": {
          "description": "The GeoNetwork catalog to contact",
          "default": "http://localhost:7979/geonetwork",
          "enum": [
            "http://localhost:7979/geonetwork",
            "../.."
          ]
        },
        "portal": {
          "description": "The thematic portal",
          "default": "srv",
          "enum": [
            "srv"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "description": "Catalog operations",
      "name": "site"
    },
    {
      "description": "Standard related operations",
      "name": "standards"
    },
    {
      "description": "DOI servers related operations",
      "name": "doiservers"
    },
    {
      "description": "Mapservices related operations",
      "name": "mapservices"
    },
    {
      "description": "Harvester operations",
      "name": "harvesters"
    },
    {
      "description": "Selection related operations",
      "name": "selections"
    },
    {
      "description": "Tags operations",
      "name": "tags"
    },
    {
      "description": "Registries related operations",
      "name": "registries"
    },
    {
      "description": "Privileges operations",
      "name": "operations"
    },
    {
      "description": "Record link operations",
      "name": "links"
    },
    {
      "description": "Proxy for Elasticsearch catalog search operations",
      "name": "search"
    },
    {
      "description": "User feedback",
      "name": "userfeedback"
    },
    {
      "description": "Static pages inside GeoNetwork",
      "name": "pages"
    },
    {
      "description": "Related records",
      "name": "related"
    },
    {
      "description": "Utility operations",
      "name": "tools"
    },
    {
      "description": "Workflow status operations",
      "name": "status"
    },
    {
      "description": "Languages operations",
      "name": "languages"
    },
    {
      "description": "ATOM",
      "name": "atom"
    },
    {
      "description": "Translation providers",
      "name": "translationproviders"
    },
    {
      "description": "Formatter operations",
      "name": "formatters"
    },
    {
      "description": "Functionalities for custom styling",
      "name": "customstyle"
    },
    {
      "description": "Processing operations",
      "name": "processes"
    },
    {
      "description": "Groups operations",
      "name": "groups"
    },
    {
      "description": "Source catalogue operations",
      "name": "sources"
    },
    {
      "description": "Metadata record operations",
      "name": "records"
    },
    {
      "description": "Mapservers related operations",
      "name": "mapservers"
    },
    {
      "description": "User selections related operations",
      "name": "userselections"
    },
    {
      "description": "Logos operations",
      "name": "logos"
    },
    {
      "description": "Identifiers operations",
      "name": "identifiers"
    },
    {
      "description": "Me operations",
      "name": "me"
    },
    {
      "description": "User custom searches operations",
      "name": "usersearches"
    },
    {
      "description": "Regions operations",
      "name": "regions"
    },
    {
      "description": "User interface configuration operations",
      "name": "ui"
    },
    {
      "description": "User operations",
      "name": "users"
    }
  ],
  "paths": {
    "/atom/describe/resource": {
      "get": {
        "operationId": "describeResource",
        "parameters": [
          {
            "description": "fileIdentifier",
            "in": "query",
            "name": "fileIdentifier",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "spatial_dataset_identifier_code",
            "in": "query",
            "name": "spatial_dataset_identifier_code",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "spatial_dataset_identifier_namespace",
            "in": "query",
            "name": "spatial_dataset_identifier_namespace",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Feeds."
          },
          "204": {
            "description": "Not authenticated."
          }
        },
        "summary": "Describe resource",
        "tags": [
          "atom"
        ]
      }
    },
    "/atom/describe/service/{metadataUuid}": {
      "get": {
        "operationId": "describe",
        "parameters": [
          {
            "description": "metadataUuid",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Feeds."
          },
          "204": {
            "description": "Not authenticated."
          }
        },
        "summary": "Describe service",
        "tags": [
          "atom"
        ]
      }
    },
    "/atom/download/resource": {
      "get": {
        "description": "This service if a dataset has only 1 download format for a CRS returns the file, otherwise returns a feed with downloads for the dataset.",
        "operationId": "downloadResource",
        "parameters": [
          {
            "description": "spatial_dataset_identifier_code",
            "in": "query",
            "name": "spatial_dataset_identifier_code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "spatial_dataset_identifier_namespace",
            "in": "query",
            "name": "spatial_dataset_identifier_namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "crs",
            "in": "query",
            "name": "crs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Get a data file related to dataset"
          },
          "204": {
            "description": "Not authenticated."
          }
        },
        "summary": "Get a data file related to dataset",
        "tags": [
          "atom"
        ]
      }
    },
    "/atom/feeds": {
      "get": {
        "operationId": "feeds",
        "parameters": [
          {
            "description": "fileIdentifier",
            "in": "query",
            "name": "fileIdentifier",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/html": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Get a list of feeds."
          },
          "204": {
            "description": "Not authenticated."
          }
        },
        "summary": "Get ATOM feeds",
        "tags": [
          "atom"
        ]
      }
    },
    "/atom/scan": {
      "get": {
        "description": "Check in the settings which protocol identify ATOM feeds in your catalogue.Only applies to ISO19139 records.",
        "operationId": "scan",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Scan completed."
          },
          "204": {
            "description": "Not authenticated."
          }
        },
        "summary": "Scan records for ATOM feeds",
        "tags": [
          "atom"
        ]
      }
    },
    "/customstyle": {
      "get": {
        "description": "This returns a map with all Less variables.",
        "operationId": "getCssStyle",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get CssStyleSettings",
        "tags": [
          "customstyle"
        ]
      },
      "post": {
        "description": "Saves custom style variables.",
        "operationId": "saveCssStyle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Saves custom style variables.",
        "tags": [
          "customstyle"
        ]
      }
    },
    "/doiservers": {
      "get": {
        "operationId": "getDoiServers_1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnonymousDoiServer"
                  }
                }
              }
            },
            "description": "List of all DOI servers."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnonymousDoiServer"
                  }
                }
              }
            },
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Get DOI servers",
        "tags": [
          "doiservers"
        ]
      },
      "put": {
        "description": "Return the id of the newly created DOI server.",
        "operationId": "addDoiServer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoiServerDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "DOI server created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Bad parameters."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Add a DOI server",
        "tags": [
          "doiservers"
        ]
      }
    },
    "/doiservers/metadata/{metadataId}": {
      "get": {
        "operationId": "getDoiServers",
        "parameters": [
          {
            "description": "Metadata UUID",
            "in": "path",
            "name": "metadataId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnonymousDoiServer"
                  }
                }
              }
            },
            "description": "List of all DOI servers where a metadata can be published."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnonymousDoiServer"
                  }
                }
              }
            },
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Get DOI servers that can be used with a metadata",
        "tags": [
          "doiservers"
        ]
      }
    },
    "/doiservers/{doiServerId}": {
      "delete": {
        "operationId": "deleteMapserver",
        "parameters": [
          {
            "description": "DOI server identifier",
            "in": "path",
            "name": "doiServerId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DOI server removed."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Remove a DOI server",
        "tags": [
          "doiservers"
        ]
      },
      "get": {
        "operationId": "getDoiServer",
        "parameters": [
          {
            "description": "DOI server identifier",
            "in": "path",
            "name": "doiServerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymousDoiServer"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymousDoiServer"
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Get a DOI Server",
        "tags": [
          "doiservers"
        ]
      },
      "put": {
        "operationId": "updateDoiServer",
        "parameters": [
          {
            "description": "DOI server identifier",
            "in": "path",
            "name": "doiServerId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoiServerDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "DOI server updated."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Update a DOI server",
        "tags": [
          "doiservers"
        ]
      }
    },
    "/doiservers/{doiServerId}/auth": {
      "post": {
        "operationId": "updateDoiServerAuth",
        "parameters": [
          {
            "description": "DOI server identifier",
            "in": "path",
            "name": "doiServerId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Password",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DOI server updated."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Update a DOI server authentication",
        "tags": [
          "doiservers"
        ]
      }
    },
    "/formatters": {
      "get": {
        "operationId": "listFormatters",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "uuid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "schema",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "in": "query",
            "name": "pluginOnly",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "publishedOnly",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatterDataResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get formatters",
        "tags": [
          "formatters"
        ]
      },
      "post": {
        "operationId": "addFormatter",
        "parameters": [
          {
            "in": "query",
            "name": "file",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary",
                "example": null
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Import a XSLT formatter (usually a zip named 'schema-formatter.zip')",
        "tags": [
          "formatters"
        ]
      }
    },
    "/formatters/cache": {
      "delete": {
        "description": "Formatters are used to render records in various format (HTML, PDF, ...). When a record is rendered a cache is populated for better performance. By default the cache is an H2 database with files on the filesystems (See <dataDirectory>/resources/htmlcache/formatter-cache folder).",
        "operationId": "clearFormatterCache",
        "responses": {
          "204": {
            "description": "Cache cleared."
          },
          "403": {
            "description": "Operation not allowed. Only Administrator can access it."
          }
        },
        "summary": "Clear formatter cache",
        "tags": [
          "formatters"
        ]
      }
    },
    "/formatters/{schema}/{formatter}": {
      "delete": {
        "operationId": "deleteFormatter",
        "parameters": [
          {
            "in": "path",
            "name": "formatter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Delete a formatter",
        "tags": [
          "formatters"
        ]
      },
      "get": {
        "operationId": "downloadFormatter",
        "parameters": [
          {
            "in": "path",
            "name": "formatter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Download a formatter as ZIP",
        "tags": [
          "formatters"
        ]
      }
    },
    "/formatters/{schema}/{formatter}/files": {
      "get": {
        "operationId": "getFormatterFiles",
        "parameters": [
          {
            "in": "path",
            "name": "formatter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get formatter files",
        "tags": [
          "formatters"
        ]
      }
    },
    "/formatters/{schema}/{formatter}/files/{file}": {
      "get": {
        "operationId": "getFormatterFileContent",
        "parameters": [
          {
            "in": "path",
            "name": "formatter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get formatter file content",
        "tags": [
          "formatters"
        ]
      },
      "post": {
        "operationId": "updateFormatterFile",
        "parameters": [
          {
            "in": "path",
            "name": "formatter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "data",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Update formatter file",
        "tags": [
          "formatters"
        ]
      }
    },
    "/groups": {
      "get": {
        "description": "The catalog contains one or more groups. By default, there is 3 reserved groups (Internet, Intranet, Guest) and a sample group.<br/>This service returns all catalog groups when not authenticated or when current is user is an administrator. The list can contains or not reserved groups depending on the parameters.<br/>When authenticated, return user groups optionally filtered on a specific user profile.",
        "operationId": "getGroups",
        "parameters": [
          {
            "description": "Including Internet, Intranet, Guest groups or not",
            "in": "query",
            "name": "withReservedGroup",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "For a specific profile",
            "in": "query",
            "name": "profile",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get groups",
        "tags": [
          "groups"
        ]
      },
      "put": {
        "description": "Return the identifier of the group created.",
        "operationId": "addGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Group created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Group with that id or name already exist."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          }
        },
        "summary": "Add a group",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{groupIdentifier}": {
      "delete": {
        "description": "Remove a group by first removing sharing settings, link to users and finally reindex all affected records.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "description": "Group identifier.",
            "in": "path",
            "name": "groupIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Force removal even if records are assigned to that group.",
            "in": "query",
            "name": "force",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group removed."
          },
          "403": {
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Remove a group",
        "tags": [
          "groups"
        ]
      },
      "get": {
        "description": "Return the requested group details.",
        "operationId": "getGroup",
        "parameters": [
          {
            "description": "Group identifier",
            "in": "path",
            "name": "groupIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Group information for the group id supplied."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Get group",
        "tags": [
          "groups"
        ]
      },
      "put": {
        "operationId": "updateGroup",
        "parameters": [
          {
            "description": "Group identifier",
            "in": "path",
            "name": "groupIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Group updated."
          },
          "403": {
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Update a group",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{groupIdentifier}/users": {
      "get": {
        "operationId": "getGroupUsers",
        "parameters": [
          {
            "description": "Group identifier",
            "in": "path",
            "name": "groupIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": "List of users in that group."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Get group users",
        "tags": [
          "groups"
        ]
      }
    },
    "/groups/{groupId}/logo": {
      "get": {
        "description": "If last-modified header is present it is used to check if the logo has been modified since the header date. If it hasn't been modified returns an empty 304 Not Modified response. If modified returns the image. If the group has no logo then returns a transparent 1x1 px PNG image.",
        "operationId": "getGroupLogo",
        "parameters": [
          {
            "description": "Group identifier",
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Get the group logo image.",
        "tags": [
          "groups"
        ]
      }
    },
    "/harvesters/properties/{property}": {
      "get": {
        "operationId": "checkHarvesterPropertyExist",
        "parameters": [
          {
            "description": "The harvester property to check",
            "in": "path",
            "name": "property",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The value to search",
            "in": "query",
            "name": "exist",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONTINUE",
                    "SWITCHING_PROTOCOLS",
                    "PROCESSING",
                    "CHECKPOINT",
                    "OK",
                    "CREATED",
                    "ACCEPTED",
                    "NON_AUTHORITATIVE_INFORMATION",
                    "NO_CONTENT",
                    "RESET_CONTENT",
                    "PARTIAL_CONTENT",
                    "MULTI_STATUS",
                    "ALREADY_REPORTED",
                    "IM_USED",
                    "MULTIPLE_CHOICES",
                    "MOVED_PERMANENTLY",
                    "FOUND",
                    "MOVED_TEMPORARILY",
                    "SEE_OTHER",
                    "NOT_MODIFIED",
                    "USE_PROXY",
                    "TEMPORARY_REDIRECT",
                    "PERMANENT_REDIRECT",
                    "BAD_REQUEST",
                    "UNAUTHORIZED",
                    "PAYMENT_REQUIRED",
                    "FORBIDDEN",
                    "NOT_FOUND",
                    "METHOD_NOT_ALLOWED",
                    "NOT_ACCEPTABLE",
                    "PROXY_AUTHENTICATION_REQUIRED",
                    "REQUEST_TIMEOUT",
                    "CONFLICT",
                    "GONE",
                    "LENGTH_REQUIRED",
                    "PRECONDITION_FAILED",
                    "PAYLOAD_TOO_LARGE",
                    "REQUEST_ENTITY_TOO_LARGE",
                    "URI_TOO_LONG",
                    "REQUEST_URI_TOO_LONG",
                    "UNSUPPORTED_MEDIA_TYPE",
                    "REQUESTED_RANGE_NOT_SATISFIABLE",
                    "EXPECTATION_FAILED",
                    "I_AM_A_TEAPOT",
                    "INSUFFICIENT_SPACE_ON_RESOURCE",
                    "METHOD_FAILURE",
                    "DESTINATION_LOCKED",
                    "UNPROCESSABLE_ENTITY",
                    "LOCKED",
                    "FAILED_DEPENDENCY",
                    "TOO_EARLY",
                    "UPGRADE_REQUIRED",
                    "PRECONDITION_REQUIRED",
                    "TOO_MANY_REQUESTS",
                    "REQUEST_HEADER_FIELDS_TOO_LARGE",
                    "UNAVAILABLE_FOR_LEGAL_REASONS",
                    "INTERNAL_SERVER_ERROR",
                    "NOT_IMPLEMENTED",
                    "BAD_GATEWAY",
                    "SERVICE_UNAVAILABLE",
                    "GATEWAY_TIMEOUT",
                    "HTTP_VERSION_NOT_SUPPORTED",
                    "VARIANT_ALSO_NEGOTIATES",
                    "INSUFFICIENT_STORAGE",
                    "LOOP_DETECTED",
                    "BANDWIDTH_LIMIT_EXCEEDED",
                    "NOT_EXTENDED",
                    "NETWORK_AUTHENTICATION_REQUIRED"
                  ]
                }
              }
            },
            "description": "Property does not exist."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONTINUE",
                    "SWITCHING_PROTOCOLS",
                    "PROCESSING",
                    "CHECKPOINT",
                    "OK",
                    "CREATED",
                    "ACCEPTED",
                    "NON_AUTHORITATIVE_INFORMATION",
                    "NO_CONTENT",
                    "RESET_CONTENT",
                    "PARTIAL_CONTENT",
                    "MULTI_STATUS",
                    "ALREADY_REPORTED",
                    "IM_USED",
                    "MULTIPLE_CHOICES",
                    "MOVED_PERMANENTLY",
                    "FOUND",
                    "MOVED_TEMPORARILY",
                    "SEE_OTHER",
                    "NOT_MODIFIED",
                    "USE_PROXY",
                    "TEMPORARY_REDIRECT",
                    "PERMANENT_REDIRECT",
                    "BAD_REQUEST",
                    "UNAUTHORIZED",
                    "PAYMENT_REQUIRED",
                    "FORBIDDEN",
                    "NOT_FOUND",
                    "METHOD_NOT_ALLOWED",
                    "NOT_ACCEPTABLE",
                    "PROXY_AUTHENTICATION_REQUIRED",
                    "REQUEST_TIMEOUT",
                    "CONFLICT",
                    "GONE",
                    "LENGTH_REQUIRED",
                    "PRECONDITION_FAILED",
                    "PAYLOAD_TOO_LARGE",
                    "REQUEST_ENTITY_TOO_LARGE",
                    "URI_TOO_LONG",
                    "REQUEST_URI_TOO_LONG",
                    "UNSUPPORTED_MEDIA_TYPE",
                    "REQUESTED_RANGE_NOT_SATISFIABLE",
                    "EXPECTATION_FAILED",
                    "I_AM_A_TEAPOT",
                    "INSUFFICIENT_SPACE_ON_RESOURCE",
                    "METHOD_FAILURE",
                    "DESTINATION_LOCKED",
                    "UNPROCESSABLE_ENTITY",
                    "LOCKED",
                    "FAILED_DEPENDENCY",
                    "TOO_EARLY",
                    "UPGRADE_REQUIRED",
                    "PRECONDITION_REQUIRED",
                    "TOO_MANY_REQUESTS",
                    "REQUEST_HEADER_FIELDS_TOO_LARGE",
                    "UNAVAILABLE_FOR_LEGAL_REASONS",
                    "INTERNAL_SERVER_ERROR",
                    "NOT_IMPLEMENTED",
                    "BAD_GATEWAY",
                    "SERVICE_UNAVAILABLE",
                    "GATEWAY_TIMEOUT",
                    "HTTP_VERSION_NOT_SUPPORTED",
                    "VARIANT_ALSO_NEGOTIATES",
                    "INSUFFICIENT_STORAGE",
                    "LOOP_DETECTED",
                    "BANDWIDTH_LIMIT_EXCEEDED",
                    "NOT_EXTENDED",
                    "NETWORK_AUTHENTICATION_REQUIRED"
                  ]
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONTINUE",
                    "SWITCHING_PROTOCOLS",
                    "PROCESSING",
                    "CHECKPOINT",
                    "OK",
                    "CREATED",
                    "ACCEPTED",
                    "NON_AUTHORITATIVE_INFORMATION",
                    "NO_CONTENT",
                    "RESET_CONTENT",
                    "PARTIAL_CONTENT",
                    "MULTI_STATUS",
                    "ALREADY_REPORTED",
                    "IM_USED",
                    "MULTIPLE_CHOICES",
                    "MOVED_PERMANENTLY",
                    "FOUND",
                    "MOVED_TEMPORARILY",
                    "SEE_OTHER",
                    "NOT_MODIFIED",
                    "USE_PROXY",
                    "TEMPORARY_REDIRECT",
                    "PERMANENT_REDIRECT",
                    "BAD_REQUEST",
                    "UNAUTHORIZED",
                    "PAYMENT_REQUIRED",
                    "FORBIDDEN",
                    "NOT_FOUND",
                    "METHOD_NOT_ALLOWED",
                    "NOT_ACCEPTABLE",
                    "PROXY_AUTHENTICATION_REQUIRED",
                    "REQUEST_TIMEOUT",
                    "CONFLICT",
                    "GONE",
                    "LENGTH_REQUIRED",
                    "PRECONDITION_FAILED",
                    "PAYLOAD_TOO_LARGE",
                    "REQUEST_ENTITY_TOO_LARGE",
                    "URI_TOO_LONG",
                    "REQUEST_URI_TOO_LONG",
                    "UNSUPPORTED_MEDIA_TYPE",
                    "REQUESTED_RANGE_NOT_SATISFIABLE",
                    "EXPECTATION_FAILED",
                    "I_AM_A_TEAPOT",
                    "INSUFFICIENT_SPACE_ON_RESOURCE",
                    "METHOD_FAILURE",
                    "DESTINATION_LOCKED",
                    "UNPROCESSABLE_ENTITY",
                    "LOCKED",
                    "FAILED_DEPENDENCY",
                    "TOO_EARLY",
                    "UPGRADE_REQUIRED",
                    "PRECONDITION_REQUIRED",
                    "TOO_MANY_REQUESTS",
                    "REQUEST_HEADER_FIELDS_TOO_LARGE",
                    "UNAVAILABLE_FOR_LEGAL_REASONS",
                    "INTERNAL_SERVER_ERROR",
                    "NOT_IMPLEMENTED",
                    "BAD_GATEWAY",
                    "SERVICE_UNAVAILABLE",
                    "GATEWAY_TIMEOUT",
                    "HTTP_VERSION_NOT_SUPPORTED",
                    "VARIANT_ALSO_NEGOTIATES",
                    "INSUFFICIENT_STORAGE",
                    "LOOP_DETECTED",
                    "BANDWIDTH_LIMIT_EXCEEDED",
                    "NOT_EXTENDED",
                    "NETWORK_AUTHENTICATION_REQUIRED"
                  ]
                }
              }
            },
            "description": "A property with that value already exist."
          }
        },
        "summary": "Check if a harvester name or host already exist",
        "tags": [
          "harvesters"
        ]
      }
    },
    "/harvesters/{harvesterUuid}/assign": {
      "post": {
        "operationId": "assignHarvestedRecordToSource",
        "parameters": [
          {
            "description": "The harvester UUID",
            "in": "path",
            "name": "harvesterUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The target source UUID",
            "in": "query",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Harvester records transfered to new source."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONTINUE",
                    "SWITCHING_PROTOCOLS",
                    "PROCESSING",
                    "CHECKPOINT",
                    "OK",
                    "CREATED",
                    "ACCEPTED",
                    "NON_AUTHORITATIVE_INFORMATION",
                    "NO_CONTENT",
                    "RESET_CONTENT",
                    "PARTIAL_CONTENT",
                    "MULTI_STATUS",
                    "ALREADY_REPORTED",
                    "IM_USED",
                    "MULTIPLE_CHOICES",
                    "MOVED_PERMANENTLY",
                    "FOUND",
                    "MOVED_TEMPORARILY",
                    "SEE_OTHER",
                    "NOT_MODIFIED",
                    "USE_PROXY",
                    "TEMPORARY_REDIRECT",
                    "PERMANENT_REDIRECT",
                    "BAD_REQUEST",
                    "UNAUTHORIZED",
                    "PAYMENT_REQUIRED",
                    "FORBIDDEN",
                    "NOT_FOUND",
                    "METHOD_NOT_ALLOWED",
                    "NOT_ACCEPTABLE",
                    "PROXY_AUTHENTICATION_REQUIRED",
                    "REQUEST_TIMEOUT",
                    "CONFLICT",
                    "GONE",
                    "LENGTH_REQUIRED",
                    "PRECONDITION_FAILED",
                    "PAYLOAD_TOO_LARGE",
                    "REQUEST_ENTITY_TOO_LARGE",
                    "URI_TOO_LONG",
                    "REQUEST_URI_TOO_LONG",
                    "UNSUPPORTED_MEDIA_TYPE",
                    "REQUESTED_RANGE_NOT_SATISFIABLE",
                    "EXPECTATION_FAILED",
                    "I_AM_A_TEAPOT",
                    "INSUFFICIENT_SPACE_ON_RESOURCE",
                    "METHOD_FAILURE",
                    "DESTINATION_LOCKED",
                    "UNPROCESSABLE_ENTITY",
                    "LOCKED",
                    "FAILED_DEPENDENCY",
                    "TOO_EARLY",
                    "UPGRADE_REQUIRED",
                    "PRECONDITION_REQUIRED",
                    "TOO_MANY_REQUESTS",
                    "REQUEST_HEADER_FIELDS_TOO_LARGE",
                    "UNAVAILABLE_FOR_LEGAL_REASONS",
                    "INTERNAL_SERVER_ERROR",
                    "NOT_IMPLEMENTED",
                    "BAD_GATEWAY",
                    "SERVICE_UNAVAILABLE",
                    "GATEWAY_TIMEOUT",
                    "HTTP_VERSION_NOT_SUPPORTED",
                    "VARIANT_ALSO_NEGOTIATES",
                    "INSUFFICIENT_STORAGE",
                    "LOOP_DETECTED",
                    "BANDWIDTH_LIMIT_EXCEEDED",
                    "NOT_EXTENDED",
                    "NETWORK_AUTHENTICATION_REQUIRED"
                  ]
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONTINUE",
                    "SWITCHING_PROTOCOLS",
                    "PROCESSING",
                    "CHECKPOINT",
                    "OK",
                    "CREATED",
                    "ACCEPTED",
                    "NON_AUTHORITATIVE_INFORMATION",
                    "NO_CONTENT",
                    "RESET_CONTENT",
                    "PARTIAL_CONTENT",
                    "MULTI_STATUS",
                    "ALREADY_REPORTED",
                    "IM_USED",
                    "MULTIPLE_CHOICES",
                    "MOVED_PERMANENTLY",
                    "FOUND",
                    "MOVED_TEMPORARILY",
                    "SEE_OTHER",
                    "NOT_MODIFIED",
                    "USE_PROXY",
                    "TEMPORARY_REDIRECT",
                    "PERMANENT_REDIRECT",
                    "BAD_REQUEST",
                    "UNAUTHORIZED",
                    "PAYMENT_REQUIRED",
                    "FORBIDDEN",
                    "NOT_FOUND",
                    "METHOD_NOT_ALLOWED",
                    "NOT_ACCEPTABLE",
                    "PROXY_AUTHENTICATION_REQUIRED",
                    "REQUEST_TIMEOUT",
                    "CONFLICT",
                    "GONE",
                    "LENGTH_REQUIRED",
                    "PRECONDITION_FAILED",
                    "PAYLOAD_TOO_LARGE",
                    "REQUEST_ENTITY_TOO_LARGE",
                    "URI_TOO_LONG",
                    "REQUEST_URI_TOO_LONG",
                    "UNSUPPORTED_MEDIA_TYPE",
                    "REQUESTED_RANGE_NOT_SATISFIABLE",
                    "EXPECTATION_FAILED",
                    "I_AM_A_TEAPOT",
                    "INSUFFICIENT_SPACE_ON_RESOURCE",
                    "METHOD_FAILURE",
                    "DESTINATION_LOCKED",
                    "UNPROCESSABLE_ENTITY",
                    "LOCKED",
                    "FAILED_DEPENDENCY",
                    "TOO_EARLY",
                    "UPGRADE_REQUIRED",
                    "PRECONDITION_REQUIRED",
                    "TOO_MANY_REQUESTS",
                    "REQUEST_HEADER_FIELDS_TOO_LARGE",
                    "UNAVAILABLE_FOR_LEGAL_REASONS",
                    "INTERNAL_SERVER_ERROR",
                    "NOT_IMPLEMENTED",
                    "BAD_GATEWAY",
                    "SERVICE_UNAVAILABLE",
                    "GATEWAY_TIMEOUT",
                    "HTTP_VERSION_NOT_SUPPORTED",
                    "VARIANT_ALSO_NEGOTIATES",
                    "INSUFFICIENT_STORAGE",
                    "LOOP_DETECTED",
                    "BANDWIDTH_LIMIT_EXCEEDED",
                    "NOT_EXTENDED",
                    "NETWORK_AUTHENTICATION_REQUIRED"
                  ]
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Assign harvester records to a new source",
        "tags": [
          "harvesters"
        ]
      }
    },
    "/i18n/cache": {
      "delete": {
        "operationId": "cleanTranslationsPackagesCache",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Clean translation packages cache.",
        "tags": [
          "tools"
        ]
      }
    },
    "/i18n/db": {
      "get": {
        "operationId": "getTranslations",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "List translations for database description table",
        "tags": [
          "tools"
        ]
      }
    },
    "/i18n/db/custom": {
      "get": {
        "operationId": "getCustomTranslations",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Translations"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "List custom user translations",
        "tags": [
          "tools"
        ]
      }
    },
    "/i18n/db/translations": {
      "delete": {
        "operationId": "removeAllTranslations",
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Remove all database translations.",
        "tags": [
          "tools"
        ]
      },
      "get": {
        "operationId": "getDbTranslations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "translationKey1": "Translated Key One",
                  "translationKey2": "Translated Key Two",
                  "translationKey3": "Translated Key Three"
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "List database translations (used to overrides client application translations).",
        "tags": [
          "tools"
        ]
      },
      "put": {
        "operationId": "addTranslations",
        "parameters": [
          {
            "in": "query",
            "name": "replace",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Translations"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Add or update all database translations.",
        "tags": [
          "tools"
        ]
      }
    },
    "/i18n/db/translations/{key}": {
      "delete": {
        "description": "Delete custom translations stored in the database.",
        "operationId": "deleteTranslations",
        "parameters": [
          {
            "description": "Untranslated key for which all translations will be deleted.",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete database translations.",
        "tags": [
          "tools"
        ]
      },
      "put": {
        "description": "Database translations can be used to customize labels in the UI for different languages.",
        "operationId": "addTranslationsFor",
        "parameters": [
          {
            "description": "Untranslated key for which translations are provided.",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Set to `true` to erase all existing translations for that key",
            "in": "query",
            "name": "replace",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "eng": "my translation",
                "ger": "meine Übersetzung",
                "fre": "ma traduction"
              },
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "description": "An object where keys are valid 3-letter language codes (e.g. `eng` or `fre`) and values are custom translations for the corresponding language.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Add or update database translations for a key.",
        "tags": [
          "tools"
        ]
      }
    },
    "/i18n/packages": {
      "get": {
        "operationId": "getTranslationsPackages",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get list of translation packages.",
        "tags": [
          "tools"
        ]
      }
    },
    "/i18n/packages/{pack}": {
      "get": {
        "operationId": "getTranslationsPackage",
        "parameters": [
          {
            "in": "path",
            "name": "pack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get a translation package.",
        "tags": [
          "tools"
        ]
      }
    },
    "/identifiers": {
      "get": {
        "description": "Identifier templates are used to create record UUIDs having a particular structure. The template will be used when user creates a new record. The identifier template to use is defined in the admin console > metadata and templates.",
        "operationId": "getIdentifiers",
        "parameters": [
          {
            "description": "Only user defined ones",
            "in": "query",
            "name": "userDefinedOnly",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataIdentifierTemplate"
                  }
                }
              }
            },
            "description": "List of identifier templates."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataIdentifierTemplate"
                  }
                }
              }
            },
            "description": "Operation not allowed. Only Editor can access it."
          }
        },
        "summary": "Get identifier templates",
        "tags": [
          "identifiers"
        ]
      },
      "put": {
        "operationId": "addIdentifier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataIdentifierTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Identifier template created."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Operation not allowed. Only Editor can access it."
          }
        },
        "summary": "Add an identifier template",
        "tags": [
          "identifiers"
        ]
      }
    },
    "/identifiers/{identifier}": {
      "delete": {
        "operationId": "deleteIdentifier",
        "parameters": [
          {
            "description": "Identifier template identifier",
            "in": "path",
            "name": "identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template identifier removed."
          },
          "403": {
            "description": "Operation not allowed. Only Editor can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Remove an identifier template",
        "tags": [
          "identifiers"
        ]
      },
      "put": {
        "operationId": "updateIdentifier",
        "parameters": [
          {
            "description": "Identifier template identifier",
            "in": "path",
            "name": "identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataIdentifierTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Identifier template updated."
          },
          "403": {
            "description": "Operation not allowed. Only Editor can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Update an identifier template",
        "tags": [
          "identifiers"
        ]
      }
    },
    "/isolanguages": {
      "get": {
        "description": "ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).",
        "operationId": "getIsoLanguages",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IsoLanguage"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get ISO languages",
        "tags": [
          "languages"
        ]
      }
    },
    "/languages": {
      "get": {
        "description": "Languages for the application having translations in the database. All tables with 'Desc' suffix contains translation for some domain objects like groups, tags, ...",
        "operationId": "getLanguages",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Language"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get languages",
        "tags": [
          "languages"
        ]
      }
    },
    "/languages/application": {
      "get": {
        "description": "Languages available in this version of the application. Those that you can add using PUT operation and which have SQL script to initialize the language.",
        "operationId": "getApplicationLanguages",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Language"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get languages available in the application",
        "tags": [
          "languages"
        ]
      }
    },
    "/languages/{langCode}": {
      "delete": {
        "description": "Delete all translations from all *Desc tables in the database. Warning: This will also remove all translations you may have done to those objects (eg. custom groups).",
        "operationId": "deleteLanguage",
        "parameters": [
          {
            "description": "ISO 3 letter code",
            "in": "path",
            "name": "langCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Language translations removed."
          },
          "403": {
            "description": "Operation not allowed. Only Administrator can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Remove a language",
        "tags": [
          "languages"
        ]
      },
      "put": {
        "description": "Add all default translations from all *Desc tables in the database. This operation will only add translations for a default catalog installation. Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/*.",
        "operationId": "addLanguages",
        "parameters": [
          {
            "description": "ISO 3 letter code",
            "in": "path",
            "name": "langCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Language translations added."
          },
          "403": {
            "description": "Operation not allowed. Only Administrator can access it."
          },
          "404": {
            "description": "Resource not found. eg. No SQL file available for that langugae."
          }
        },
        "summary": "Add a language",
        "tags": [
          "languages"
        ]
      }
    },
    "/logos": {
      "get": {
        "description": "Logos are used for the catalog, the groups logos, and harvester icons. Logos are stored in the data directory in <dataDirectory>/resources/images/harvesting.<br/> Records are attached to a source. A source can be the local catalog or a harvester node. When a source is created, its logo is located in the images/logos folder with the source UUID as filename. For some sources the logo can be automatically retrieved (eg. when harvesting GeoNetwork catalogs). For others, the logo is usually manually defined when configuring the harvester.",
        "operationId": "getLogos",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get all logos",
        "tags": [
          "logos"
        ]
      },
      "post": {
        "operationId": "addLogo",
        "parameters": [
          {
            "description": "The logo image to upload",
            "in": "query",
            "name": "file",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary",
                "example": null
              }
            }
          },
          {
            "description": "Overwrite if exists",
            "in": "query",
            "name": "overwrite",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Logo added."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          }
        },
        "summary": "Add a logo",
        "tags": [
          "logos"
        ]
      }
    },
    "/logos/{file}": {
      "delete": {
        "operationId": "deleteLogo",
        "parameters": [
          {
            "description": "The logo filename to delete",
            "in": "path",
            "name": "file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Logo removed."
          },
          "403": {
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Remove a logo",
        "tags": [
          "logos"
        ]
      },
      "get": {
        "operationId": "getLogo",
        "parameters": [
          {
            "description": "The logo filename",
            "in": "path",
            "name": "file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logo returned."
          },
          "403": {
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Get a logo",
        "tags": [
          "logos"
        ]
      }
    },
    "/mapservers": {
      "get": {
        "description": "Mapservers are used by the catalog to publish record attachments (eg. ZIP file with shape) or record associated resources (eg. database table, file on the local network) in a remote mapserver like GeoServer or MapServer. The catalog communicate with the mapserver using GeoServer REST API.",
        "operationId": "getMapservers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnonymousMapserver"
                  }
                }
              }
            },
            "description": "List of all mapservers."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnonymousMapserver"
                  }
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Get mapservers",
        "tags": [
          "mapservers"
        ]
      },
      "put": {
        "description": "Return the id of the newly created mapserver.",
        "operationId": "addMapserver",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapServer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Mapserver created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Bad parameters."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Operation not allowed. Only Reviewvers can access it."
          }
        },
        "summary": "Add a mapserver",
        "tags": [
          "mapservers"
        ]
      }
    },
    "/mapservers/{mapserverId}": {
      "delete": {
        "operationId": "deleteMapserver_1",
        "parameters": [
          {
            "description": "Mapserver identifier",
            "in": "path",
            "name": "mapserverId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Mapserver removed."
          },
          "403": {
            "description": "Operation not allowed. Only Reviewvers can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Remove a mapserver",
        "tags": [
          "mapservers"
        ]
      },
      "get": {
        "operationId": "getMapserver",
        "parameters": [
          {
            "description": "Mapserver identifier",
            "in": "path",
            "name": "mapserverId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymousMapserver"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymousMapserver"
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Get a mapserver",
        "tags": [
          "mapservers"
        ]
      },
      "put": {
        "operationId": "updateMapserver",
        "parameters": [
          {
            "description": "Mapserver identifier",
            "in": "path",
            "name": "mapserverId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapServer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Mapserver updated."
          },
          "403": {
            "description": "Operation not allowed. Only Reviewvers can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Update a mapserver",
        "tags": [
          "mapservers"
        ]
      }
    },
    "/mapservers/{mapserverId}/auth": {
      "post": {
        "description": "The remote mapserver REST API may require basic authentication. This operation set the username and password.",
        "operationId": "updateMapserverAuth",
        "parameters": [
          {
            "description": "Mapserver identifier",
            "in": "path",
            "name": "mapserverId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User name",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Password",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Mapserver updated."
          },
          "403": {
            "description": "Operation not allowed. Only Reviewvers can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Update a mapserver authentication",
        "tags": [
          "mapservers"
        ]
      }
    },
    "/mapservers/{mapserverId}/records/{metadataUuid}": {
      "delete": {
        "operationId": "deleteMapserverResource",
        "parameters": [
          {
            "description": "Mapserver identifier",
            "in": "path",
            "name": "mapserverId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource name (could be a file or a db connection)",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Metadata title",
            "in": "query",
            "name": "metadataTitle",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Metadata abstract",
            "in": "query",
            "name": "metadataAbstract",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Remove a metadata mapserver resource",
        "tags": [
          "mapservers"
        ]
      },
      "get": {
        "operationId": "getMapserverResource",
        "parameters": [
          {
            "description": "Mapserver identifier",
            "in": "path",
            "name": "mapserverId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource name (could be a file or a db connection)",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Metadata title",
            "in": "query",
            "name": "metadataTitle",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Metadata abstract",
            "in": "query",
            "name": "metadataAbstract",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Check metadata mapserver resource is published ",
        "tags": [
          "mapservers"
        ]
      },
      "put": {
        "operationId": "publishMapserverResource",
        "parameters": [
          {
            "description": "Mapserver identifier",
            "in": "path",
            "name": "mapserverId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource name (could be a file or a db connection)",
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Metadata title",
            "in": "query",
            "name": "metadataTitle",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Metadata abstract",
            "in": "query",
            "name": "metadataAbstract",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Publish a metadata resource in a mapserver",
        "tags": [
          "mapservers"
        ]
      }
    },
    "/mapservices": {
      "get": {
        "description": "Return the list of mapservices. mapservices are used to identify secured map services.",
        "operationId": "getMapservices",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapService"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get mapservices",
        "tags": [
          "mapservices"
        ]
      }
    },
    "/me": {
      "get": {
        "description": "If not authenticated, return status 204 (NO_CONTENT), else return basic user information. This operation is usually used to know if current user is authenticated or not.It returns also info about groups and profiles.",
        "operationId": "getMe",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeResponse"
                }
              }
            },
            "description": "Authenticated. Return user details."
          },
          "204": {
            "description": "Not authenticated."
          }
        },
        "summary": "Get information about me",
        "tags": [
          "me"
        ]
      }
    },
    "/operations": {
      "get": {
        "description": "Return the list of operations. Operations are used to define authorization per group. Extending the list of default operations (ie. view, dynamic, download, editing, notify, featured) might be feasible but is experimental.<br/> Featured is not really used anymore (was used in past version for home page highlights).",
        "operationId": "getOperations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Operation"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get operations",
        "tags": [
          "operations"
        ]
      }
    },
    "/pages": {
      "get": {
        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
        "operationId": "listPages",
        "parameters": [
          {
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "section",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "TOP",
                "FOOTER",
                "MENU",
                "SUBMENU",
                "CUSTOM_MENU1",
                "CUSTOM_MENU2",
                "CUSTOM_MENU3"
              ]
            }
          },
          {
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LINK",
                "HTML",
                "HTMLPAGE",
                "TEXT"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageProperties"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "List all pages according to the filters",
        "tags": [
          "pages"
        ]
      },
      "post": {
        "description": "<p>Is not possible to load a link and a file at the same time.</p> <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
        "operationId": "addPageUploadingFile",
        "parameters": [
          {
            "in": "query",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sections",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "TOP",
                  "FOOTER",
                  "MENU",
                  "SUBMENU",
                  "CUSTOM_MENU1",
                  "CUSTOM_MENU2",
                  "CUSTOM_MENU3"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "PUBLIC",
                "PUBLIC_ONLY",
                "GROUPS",
                "PRIVATE",
                "HIDDEN"
              ]
            }
          },
          {
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LINK",
                "HTML",
                "HTMLPAGE",
                "TEXT"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "example": null,
                "properties": {
                  "data": {
                    "type": "string",
                    "format": "binary",
                    "example": null
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Page saved"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Wrong parameters are provided"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Page already in the system: use PUT"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "File not valid"
          }
        },
        "summary": "Add a page by uploading a file",
        "tags": [
          "pages"
        ]
      },
      "put": {
        "description": "<p>Is not possible to load a link and a file at the same time.</p> <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
        "operationId": "addPageWithoutUploadingFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PageProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Page saved"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Wrong parameters are provided"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Page already in the system: use PUT"
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "File not valid"
          }
        },
        "summary": "Add a page",
        "tags": [
          "pages"
        ]
      }
    },
    "/pages/config/formats": {
      "get": {
        "operationId": "getPageFormats",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "LINK",
                      "HTML",
                      "HTMLPAGE",
                      "TEXT"
                    ]
                  }
                }
              }
            },
            "description": "Page found"
          }
        },
        "tags": [
          "pages"
        ]
      }
    },
    "/pages/config/sections": {
      "get": {
        "operationId": "getPageSections",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "TOP",
                      "FOOTER",
                      "MENU",
                      "SUBMENU",
                      "CUSTOM_MENU1",
                      "CUSTOM_MENU2",
                      "CUSTOM_MENU3"
                    ]
                  }
                }
              }
            },
            "description": "Page found"
          }
        },
        "tags": [
          "pages"
        ]
      }
    },
    "/pages/config/status": {
      "get": {
        "operationId": "getPageStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "PUBLIC",
                      "PUBLIC_ONLY",
                      "GROUPS",
                      "PRIVATE",
                      "HIDDEN"
                    ]
                  }
                }
              }
            },
            "description": "Page found"
          }
        },
        "tags": [
          "pages"
        ]
      }
    },
    "/pages/{language}/{pageId}": {
      "delete": {
        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
        "operationId": "deletePage",
        "parameters": [
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page removed"
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          },
          "404": {
            "description": "Page not found"
          }
        },
        "summary": "Delete a page",
        "tags": [
          "pages"
        ]
      },
      "get": {
        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
        "operationId": "getPage",
        "parameters": [
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageProperties"
                }
              }
            },
            "description": "Page found"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageProperties"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageProperties"
                }
              }
            },
            "description": "Page not found"
          }
        },
        "summary": "Return the page object details except the content",
        "tags": [
          "pages"
        ]
      },
      "put": {
        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
        "operationId": "updatePage",
        "parameters": [
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PageProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Page changes saved"
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Update a page",
        "tags": [
          "pages"
        ]
      }
    },
    "/pages/{language}/{pageId}/content": {
      "get": {
        "description": "<a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More info</a>",
        "operationId": "getPageContent",
        "parameters": [
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Page found"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Page not found"
          }
        },
        "summary": "Return the static html content identified by pageId",
        "tags": [
          "pages"
        ]
      }
    },
    "/processes/db/search-and-replace": {
      "get": {
        "description": " When errors occur during processing, the processing report is returned in JSON format.",
        "operationId": "previewProcessSearchAndReplace",
        "parameters": [
          {
            "description": "Use regular expression (may not be supported by all databases - tested with H2 and PostgreSQL)",
            "in": "query",
            "name": "useRegexp",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Value to search for",
            "in": "query",
            "name": "search",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Replacement",
            "in": "query",
            "name": "replace",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "regexpFlags",
            "in": "query",
            "name": "regexpFlags",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Return differences with diff, diffhtml or patch",
            "in": "query",
            "name": "diffType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "patch",
                "diff",
                "diffhtml"
              ]
            }
          },
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Processed records."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          },
          "500": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "If one record processed is invalid."
          }
        },
        "summary": "Preview of search and replace text.",
        "tags": [
          "processes"
        ]
      },
      "post": {
        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
        "operationId": "processSearchAndReplace",
        "parameters": [
          {
            "description": "Use regular expression (may not be supported by all databases - tested with H2 and PostgreSQL)",
            "in": "query",
            "name": "useRegexp",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Value to search for",
            "in": "query",
            "name": "search",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Replacement",
            "in": "query",
            "name": "replace",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "regexpFlags",
            "in": "query",
            "name": "regexpFlags",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true updates the DateStamp (or equivalent in standards different to ISO 19139) field in the metadata with the current timestamp",
            "in": "query",
            "name": "updateDateStamp",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Index after processing",
            "example": false,
            "in": "query",
            "name": "index",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XsltMetadataProcessingReport"
                }
              }
            },
            "description": "Report about processed records."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XsltMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Apply a database search and replace to one or more records",
        "tags": [
          "processes"
        ]
      }
    },
    "/processes/reports": {
      "delete": {
        "operationId": "deleteProcessReport",
        "responses": {
          "204": {
            "description": "Report registry cleared."
          },
          "403": {
            "description": "Operation not allowed. Only authenticated user can access it."
          }
        },
        "summary": "Clear process reports list",
        "tags": [
          "processes"
        ]
      },
      "get": {
        "description": "When processing, the report is stored in memory and allows to retrieve progress repport during processing. Usually, process reports are returned by the synchronous processing operation.",
        "operationId": "getProcessReport",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcessingReport"
                  }
                }
              }
            },
            "description": "List of reports returned."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcessingReport"
                  }
                }
              }
            },
            "description": "Operation not allowed. Only authenticated user can access it."
          }
        },
        "summary": "Get current process reports",
        "tags": [
          "processes"
        ]
      }
    },
    "/processes/search-and-replace": {
      "post": {
        "deprecated": true,
        "description": "Service to apply replacements to one or more records.\n To define a replacement, send the following parameters:\n * mdsection-139815551372=metadata\n * mdfield-1398155513728=id.contact.individualName\n * replaceValue-1398155513728=Juan\n * searchValue-1398155513728=Jose\n\n<br/>Batch editing can also be used for similar works.",
        "operationId": "searchAndReplace",
        "parameters": [
          {
            "in": "query",
            "name": "process",
            "required": false,
            "schema": {
              "type": "string",
              "default": "massive-content-update"
            }
          },
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Test only (ie. metadata are not saved). Return the report only.",
            "in": "query",
            "name": "isTesting",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Case insensitive search.",
            "in": "query",
            "name": "isCaseInsensitive",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "'record' to apply vacuum.xsl, 'element' to remove empty elements. Empty to not affect empty elements.",
            "in": "query",
            "name": "vacuumMode",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataReplacementProcessingReport"
                }
              }
            },
            "description": "Replacements applied."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataReplacementProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Search and replace values in one or more ISO19139 records",
        "tags": [
          "processes"
        ]
      }
    },
    "/processes/{process}": {
      "get": {
        "description": "Preview result of a process applied to metadata records with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process. Append mode has 2 limitations. First, it only support a set of records in the same schema. Secondly, it does not propagate URL parameters. This mode is mainly used to create custom reports based on metadata records content.If process name ends with '.csv', the XSL process output a text document which is returned. When errors occur during processing, the processing report is returned in JSON format.",
        "operationId": "previewProcessRecords",
        "parameters": [
          {
            "description": "Process identifier",
            "in": "path",
            "name": "process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return differences with diff, diffhtml or patch",
            "in": "query",
            "name": "diffType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "patch",
                "diff",
                "diffhtml"
              ]
            }
          },
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Append documents before processing",
            "example": false,
            "in": "query",
            "name": "appendFirst",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Apply update fixed info",
            "example": false,
            "in": "query",
            "name": "applyUpdateFixedInfo",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Processed records."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Preview process result applied to one or more records",
        "tags": [
          "processes"
        ]
      },
      "post": {
        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
        "operationId": "processRecords",
        "parameters": [
          {
            "description": "Process identifier",
            "in": "path",
            "name": "process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true updates the DateStamp (or equivalent in standards different to ISO 19139) field in the metadata with the current timestamp",
            "in": "query",
            "name": "updateDateStamp",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Index after processing",
            "example": false,
            "in": "query",
            "name": "index",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XsltMetadataProcessingReport"
                }
              }
            },
            "description": "Report about processed records."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XsltMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Apply a process to one or more records",
        "tags": [
          "processes"
        ]
      }
    },
    "/records": {
      "delete": {
        "description": "User MUST be able to edit the record to delete it. ",
        "operationId": "deleteRecords",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Backup first the record as MEF in the metadata removed folder.",
            "in": "query",
            "name": "withBackup",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Report about deleted records."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Delete one or more records",
        "tags": [
          "records"
        ]
      },
      "get": {
        "description": ".",
        "operationId": "getAsRdf",
        "parameters": [
          {
            "description": "Indicates the start position in a sorted list of matches that the client wants to use as the beginning of a page result.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "description": "Indicates the number of hits per page.",
            "in": "query",
            "name": "hitsPerPage",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Search key",
            "in": "query",
            "name": "any",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A search key for the title.",
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A search facet in the Lucene index. Use the GeoNetwork GUI search to generate the suitable filter values. Example: standard/dcat-ap&createDateYear/2018&sourceCatalog/6d93613e-2b76-4e26-94af-4b4c420a1758 (filter by creation year and source catalog).",
            "in": "query",
            "name": "facet.q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Lucene sortBy criteria. Relevant values: relevance, title, changeDate.",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort order. Possible values: reverse.",
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use the Lucene FuzzyQuery. Values range from 0.0 to 1.0 and defaults to 0.8.",
            "in": "query",
            "name": "similarity",
            "schema": {
              "type": "number",
              "format": "float",
              "default": 0.8
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the catalog content as RDF."
          },
          "303": {
            "description": "Redirect the client to the first in-sequence page resource. This happens when the paging parameters (from, hitsPerPage) are not included in the request."
          }
        },
        "summary": "Get catalog content as RDF. This endpoint supports the same Lucene query parameters as for the GUI search.",
        "tags": [
          "records"
        ]
      },
      "post": {
        "description": "Add record in the catalog by uploading files.",
        "operationId": "insertFile",
        "parameters": [
          {
            "description": "The type of record.",
            "in": "query",
            "name": "metadataType",
            "required": false,
            "schema": {
              "type": "string",
              "default": "METADATA",
              "enum": [
                "METADATA",
                "TEMPLATE",
                "SUB_TEMPLATE",
                "TEMPLATE_OF_SUB_TEMPLATE"
              ]
            }
          },
          {
            "description": "XML or MEF file to upload",
            "in": "query",
            "name": "file",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary",
                "example": null
              }
            }
          },
          {
            "description": "Record identifier processing.",
            "in": "query",
            "name": "uuidProcessing",
            "required": false,
            "schema": {
              "type": "string",
              "default": "NOTHING",
              "enum": [
                "GENERATEUUID",
                "NOTHING",
                "OVERWRITE",
                "REMOVE_AND_REPLACE"
              ]
            }
          },
          {
            "description": "The group the record is attached to.",
            "in": "query",
            "name": "group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tags to assign to the record.",
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Validate the record first and reject it if not valid.",
            "in": "query",
            "name": "rejectIfInvalid",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "(XML file only) Publish record.",
            "in": "query",
            "name": "publishToAll",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "(MEF file only) Assign to current catalog.",
            "in": "query",
            "name": "assignToCatalog",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "XSL transformation to apply to the record.",
            "in": "query",
            "name": "transformWith",
            "required": false,
            "schema": {
              "type": "string",
              "default": "_none_"
            }
          },
          {
            "description": "Force the schema of the record. If not set, schema autodetection is used (and is the preferred method).",
            "in": "query",
            "name": "schema",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "(experimental) Add extra information to the record.",
            "in": "query",
            "name": "extra",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Is editable by group members with editor profile? If not, only the author and administrator can edit the record.",
            "in": "query",
            "name": "allowEditGroupMembers",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Report about imported records."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Add a record from XML or MEF/ZIP file",
        "tags": [
          "records"
        ]
      },
      "put": {
        "description": "Add one or more record from an XML fragment, URL or file in a folder on the catalog server. When loadingfrom the catalog server folder, it might be faster to use a local filesystem harvester.",
        "operationId": "insert",
        "parameters": [
          {
            "description": "The type of record.",
            "in": "query",
            "name": "metadataType",
            "required": false,
            "schema": {
              "type": "string",
              "default": "METADATA",
              "enum": [
                "METADATA",
                "TEMPLATE",
                "SUB_TEMPLATE",
                "TEMPLATE_OF_SUB_TEMPLATE"
              ]
            }
          },
          {
            "description": "URL of a file to download and insert.",
            "in": "query",
            "name": "url",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Server folder where to look for files.",
            "in": "query",
            "name": "serverFolder",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "(Server folder import only) Recursive search in folder.",
            "in": "query",
            "name": "recursiveSearch",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "(XML file only and if workflow is not enabled) Publish record.",
            "in": "query",
            "name": "publishToAll",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "(MEF file only) Assign to current catalog.",
            "in": "query",
            "name": "assignToCatalog",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Record identifier processing.",
            "in": "query",
            "name": "uuidProcessing",
            "required": false,
            "schema": {
              "type": "string",
              "default": "NOTHING",
              "enum": [
                "GENERATEUUID",
                "NOTHING",
                "OVERWRITE",
                "REMOVE_AND_REPLACE"
              ]
            }
          },
          {
            "description": "The group the record is attached to.",
            "in": "query",
            "name": "group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tags to assign to the record.",
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Validate the record first and reject it if not valid.",
            "in": "query",
            "name": "rejectIfInvalid",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "XSL transformation to apply to the record.",
            "in": "query",
            "name": "transformWith",
            "required": false,
            "schema": {
              "type": "string",
              "default": "_none_"
            }
          },
          {
            "description": "Force the schema of the record. If not set, schema autodetection is used (and is the preferred method).",
            "in": "query",
            "name": "schema",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Is editable by group members with editor profile? If not, only the author and administrator can edit the record.",
            "in": "query",
            "name": "allowEditGroupMembers",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "(experimental) Add extra information to the record.",
            "in": "query",
            "name": "extra",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "type": "string",
                "description": "XML fragment."
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Report about imported records."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Add a record",
        "tags": [
          "records"
        ]
      }
    },
    "/records/approve": {
      "put": {
        "operationId": "approve",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataBatchApproveParameter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Metadata approved ."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Metadata workflow not enabled."
          }
        },
        "summary": "Set the records status to approved",
        "tags": [
          "records"
        ]
      }
    },
    "/records/backups": {
      "put": {
        "description": "The backup contains all metadata not harvested including templates.",
        "operationId": "trigger",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Return succeed message."
          }
        },
        "summary": "Trigger MEF backup archive",
        "tags": [
          "records"
        ]
      }
    },
    "/records/backups/latest": {
      "get": {
        "description": "The backup contains all metadata not harvested including templates.",
        "operationId": "downloadBackup",
        "responses": {
          "404": {
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "example": null
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Download MEF backup archive",
        "tags": [
          "records"
        ]
      }
    },
    "/records/batchediting": {
      "put": {
        "operationId": "batchEdit",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true updates the DateStamp (or equivalent in standards different to ISO 19139) field in the metadata with the current timestamp",
            "in": "query",
            "name": "updateDateStamp",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BatchEditParameter"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProcessingReport"
                }
              }
            },
            "description": "Return a report of what has been done."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Edit a set of records by XPath expressions. This operations applies the update-fixed-info.xsl transformation for the metadata schema and updates the change date if the parameter updateDateStamp is set to true.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/batchediting/preview": {
      "post": {
        "operationId": "previewBatchEdit",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return differences with diff, diffhtml or patch",
            "in": "query",
            "name": "diffType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "patch",
                "diff",
                "diffhtml"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BatchEditParameter"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Processed records."
          },
          "403": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Preview edits made by XPath expressions.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/csv": {
      "get": {
        "description": "The CSV is a short summary of each records.",
        "operationId": "exportAsCsv",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "eng"
            }
          },
          {
            "description": "XPath pointing to the XML element to loop on.",
            "example": "Use . for the metadata, .//gmd:CI_ResponsibleParty for all contacts in ISO19139, .//gmd:transferOptions/*/gmd:onLine/* for all online resources in ISO19139.",
            "in": "query",
            "name": "loopElementXpath",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Properties to collect",
            "example": ".//gmd:electronicMailAddress/*/text()",
            "in": "query",
            "name": "propertiesXpath",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Column separator",
            "example": ",",
            "in": "query",
            "name": "sep",
            "required": false,
            "schema": {
              "type": "string",
              "default": ","
            }
          },
          {
            "description": "Multiple values separator",
            "example": "###",
            "in": "query",
            "name": "internalSep",
            "required": false,
            "schema": {
              "type": "string",
              "default": "###"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return requested records as CSV."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get a set of metadata records as CSV",
        "tags": [
          "records"
        ]
      }
    },
    "/records/duplicate": {
      "put": {
        "description": "Create a record from a template or by copying an existing record.Return the UUID of the newly created record. Existing links in the source record are preserved, this means that the new record may contains link to the source attachments. They need to be manually updated after creation.",
        "operationId": "create",
        "parameters": [
          {
            "description": "The type of record.",
            "in": "query",
            "name": "metadataType",
            "required": false,
            "schema": {
              "type": "string",
              "default": "METADATA",
              "enum": [
                "METADATA",
                "TEMPLATE",
                "SUB_TEMPLATE",
                "TEMPLATE_OF_SUB_TEMPLATE"
              ]
            }
          },
          {
            "description": "UUID of the source record to copy.",
            "in": "query",
            "name": "sourceUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Assign a custom UUID. If this UUID already exist an error is returned. This is enabled only if metadata create / generate UUID settings is activated.",
            "in": "query",
            "name": "targetUuid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The group the record is attached to.",
            "in": "query",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Is editable by group members with editor profile? If not, only the author and administrator can edit the record.",
            "in": "query",
            "name": "allowEditGroupMembers",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Tags to assign to the record.",
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Copy categories from source?",
            "in": "query",
            "name": "hasCategoryOfSource",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Is child of the record to copy?",
            "in": "query",
            "name": "isChildOfSource",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Copy attachments from source?",
            "in": "query",
            "name": "hasAttachmentsOfSource",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Return the internal id of the newly created record."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Create a new record",
        "tags": [
          "records"
        ]
      }
    },
    "/records/importfrommap": {
      "post": {
        "description": "Add record in the catalog by uploading a map context.",
        "operationId": "insertOgcMapContextFile",
        "parameters": [
          {
            "description": "A map title",
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A map abstract",
            "in": "query",
            "name": "recordAbstract",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OGC OWS context as string",
            "in": "query",
            "name": "xml",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OGC OWS context file name",
            "in": "query",
            "name": "filename",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "OGC OWS context URL",
            "in": "query",
            "name": "url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A map viewer URL to visualize the map",
            "in": "query",
            "name": "viewerUrl",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Map overview as PNG (base64 encoded)",
            "in": "query",
            "name": "overview",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Map overview filename",
            "in": "query",
            "name": "overviewFilename",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Topic category",
            "in": "query",
            "name": "topic",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Publish record.",
            "in": "query",
            "name": "publishToAll",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Record identifier processing.",
            "in": "query",
            "name": "uuidProcessing",
            "required": false,
            "schema": {
              "type": "string",
              "default": "NOTHING",
              "enum": [
                "GENERATEUUID",
                "NOTHING",
                "OVERWRITE",
                "REMOVE_AND_REPLACE"
              ]
            }
          },
          {
            "description": "The group the record is attached to.",
            "in": "query",
            "name": "group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Schema",
            "in": "query",
            "name": "schema",
            "required": false,
            "schema": {
              "type": "string",
              "default": "iso19139"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Report about imported records."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Add a map metadata record from OGC OWS context",
        "tags": [
          "records"
        ]
      }
    },
    "/records/index": {
      "get": {
        "description": "Index a set of records provided either by a bucket or a list of uuids",
        "operationId": "index",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexResponse"
                }
              }
            },
            "description": "Record indexed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexResponse"
                }
              }
            },
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Index a set of records",
        "tags": [
          "records"
        ]
      }
    },
    "/records/links": {
      "delete": {
        "operationId": "purgeAll",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove all links and status history",
        "tags": [
          "links"
        ]
      },
      "get": {
        "operationId": "getRecordLinks",
        "parameters": [
          {
            "description": "Filter, e.g. \"{url: 'png', lastState: 'ko', records: 'e421'}\", lastState being 'ok'/'ko'/'unknown'",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/LinkFilter"
            }
          },
          {
            "description": "Optional, filter links to records published in that group.",
            "in": "query",
            "name": "groupIdFilter",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Optional, filter links to records created in that group.",
            "in": "query",
            "name": "groupOwnerIdFilter",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Optional, filter links to http status.",
            "in": "query",
            "name": "httpErrorStatusValueFilter",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Optional, filter links excluding harvested metadata.",
            "in": "query",
            "name": "excludeHarvestedMetadataFilter",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Results page you want to retrieve (0..N)",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Number of records per page.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. ",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageLink"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get record links",
        "tags": [
          "links"
        ]
      },
      "post": {
        "operationId": "getRecordLinksPost",
        "parameters": [
          {
            "description": "Filter, e.g. \"{url: 'png', lastState: 'ko', records: 'e421'}\", lastState being 'ok'/'ko'/'unknown'",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/LinkFilter"
            }
          },
          {
            "description": "Optional, filter links to records published in that group.",
            "in": "query",
            "name": "groupIdFilter",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Optional, filter links to records created in that group.",
            "in": "query",
            "name": "groupOwnerIdFilter",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Optional, filter links to http status.",
            "in": "query",
            "name": "httpStatusValueFilter",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Optional, filter links excluding harvested metadata.",
            "in": "query",
            "name": "excludeHarvestedMetadataFilter",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Results page you want to retrieve (0..N)",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Number of records per page.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. ",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageLink"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get record links",
        "tags": [
          "links"
        ]
      }
    },
    "/records/links/analyze": {
      "post": {
        "description": "One of uuids or bucket parameter is required if not an Administrator. Only records that you can edit will be validated.",
        "operationId": "analyzeRecordLinks",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only allowed if Administrator.",
            "in": "query",
            "name": "removeFirst",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "in": "query",
            "name": "analyze",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Analyze records links",
        "tags": [
          "links"
        ]
      }
    },
    "/records/links/analyzeurl": {
      "post": {
        "operationId": "analyzeLinks",
        "parameters": [
          {
            "description": "URL",
            "in": "query",
            "name": "url",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Analyze one or more links",
        "tags": [
          "links"
        ]
      }
    },
    "/records/links/csv": {
      "get": {
        "description": "Get record links as CSV",
        "operationId": "getRecordLinksAsCsv",
        "parameters": [
          {
            "description": "Filter, e.g. \"{url: 'png', lastState: 'ko', records: 'e421'}\", lastState being 'ok'/'ko'/'unknown'",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/LinkFilter"
            }
          },
          {
            "description": "Optional, filter links to records published in that group.",
            "in": "query",
            "name": "groupIdFilter",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Optional, filter links to records created in that group.",
            "in": "query",
            "name": "groupOwnerIdFilter",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Optional, filter links to http status.",
            "in": "query",
            "name": "httpStatusValueFilter",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Optional, filter links excluding harvested metadata.",
            "in": "query",
            "name": "excludeHarvestedMetadataFilter",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Results page you want to retrieve (0..N)",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Number of records per page.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. ",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "links"
        ]
      }
    },
    "/records/ownership": {
      "put": {
        "operationId": "setGroupAndOwner",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Group identifier",
            "in": "query",
            "name": "groupIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User identifier",
            "in": "query",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Records group and owner updated"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Set group and owner for one or more records",
        "tags": [
          "records"
        ]
      }
    },
    "/records/pdf": {
      "get": {
        "description": "The PDF is a short summary of each records with links to the complete metadata record in different format (ie. landing page on the portal, XML)",
        "operationId": "exportAsPdf",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "type": "string",
              "default": "eng"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return requested records as PDF."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get a set of metadata records as PDF",
        "tags": [
          "records"
        ]
      }
    },
    "/records/publish": {
      "put": {
        "description": "See record sharing for more details.",
        "operationId": "publishMultipleRecords",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Publication type",
            "in": "query",
            "name": "publicationType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Report about updated privileges."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Publish one or more records",
        "tags": [
          "records"
        ]
      }
    },
    "/records/samples": {
      "put": {
        "description": "Add sample records for one or more schemas. Samples are defined for each standard in the samples folder as MEF files.",
        "operationId": "addSamples",
        "parameters": [
          {
            "description": "Schema identifiers",
            "example": "iso19139",
            "in": "query",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Return a report of what has been done."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Add samples",
        "tags": [
          "records"
        ]
      }
    },
    "/records/sharing": {
      "get": {
        "operationId": "getSharingSettings",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharingResponse"
                }
              }
            },
            "description": "Return a default array of group and operations that can be used to set record sharing properties."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharingResponse"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Get record sharing settings",
        "tags": [
          "records"
        ]
      },
      "put": {
        "description": "See record sharing for more details.",
        "operationId": "shareMultipleRecords",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharingParameter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Report about updated privileges."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Set sharing settings for one or more records",
        "tags": [
          "records"
        ]
      }
    },
    "/records/sharing/options": {
      "get": {
        "operationId": "getPublicationOptions",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicationOption"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get publication options.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/status/search": {
      "get": {
        "operationId": "getWorkflowStatusByType",
        "parameters": [
          {
            "description": "One or more types to retrieve (ie. worflow, event, task). Default is all.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "workflow",
                  "task",
                  "event"
                ]
              }
            }
          },
          {
            "description": "All event details including XML changes. Responses are bigger. Default is false",
            "in": "query",
            "name": "details",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort Order (ie. DESC or ASC). Default is none.",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "description": "One or more event author. Default is all.",
            "in": "query",
            "name": "author",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "One or more event owners. Default is all.",
            "in": "query",
            "name": "owner",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "One or more record identifier. Default is all.",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "One or more metadata record identifier. Default is all.",
            "in": "query",
            "name": "recordIdentifier",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "One or more metadata uuid. Default is all.",
            "in": "query",
            "name": "uuid",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "One or more status id. Default is all.",
            "in": "query",
            "name": "statusIds",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Start date",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End date",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "From page",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "Number of records to return",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataStatusResponse"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Search status",
        "tags": [
          "records"
        ]
      }
    },
    "/records/submit": {
      "put": {
        "operationId": "submit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataBatchSubmitParameter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Metadata submitted ."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Metadata workflow not enabled."
          }
        },
        "summary": "Set the records status to submitted",
        "tags": [
          "records"
        ]
      }
    },
    "/records/tags": {
      "delete": {
        "operationId": "deleteTagForRecords",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tag identifier",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Report about removed records."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Delete tags to one or more records",
        "tags": [
          "records"
        ]
      },
      "put": {
        "operationId": "tagRecords",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tag identifier",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Tag identifier to remove.",
            "in": "query",
            "name": "removeId",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Clear all before adding new ones",
            "in": "query",
            "name": "clear",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Report about updated records."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Add or remove tags to one or more records",
        "tags": [
          "records"
        ]
      }
    },
    "/records/templates": {
      "put": {
        "description": "Add template records for one or more schemas. Templates are defined for each standard in the template folder as XML files. Template may also contains subtemplates.",
        "operationId": "addTemplates",
        "parameters": [
          {
            "description": "Schema identifiers",
            "example": "iso19139",
            "in": "query",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Return a report of what has been done."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Add templates",
        "tags": [
          "records"
        ]
      }
    },
    "/records/unpublish": {
      "put": {
        "description": "See record sharing for more details.",
        "operationId": "unpublishMultipleRecords",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Publication type",
            "in": "query",
            "name": "publicationType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Report about updated privileges."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Un-publish one or more records",
        "tags": [
          "records"
        ]
      }
    },
    "/records/validate": {
      "delete": {
        "operationId": "cleanValidationStatus",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Records validation status cleared."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Clear validation status of one or more records",
        "tags": [
          "records"
        ]
      },
      "put": {
        "description": "Update validation status for all records.",
        "operationId": "validateRecords",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Records validated."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Validate one or more records",
        "tags": [
          "records"
        ]
      }
    },
    "/records/validate/inspire": {
      "put": {
        "description": "Update validation status for all records.",
        "operationId": "validateRecordsInspire",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Define the encoding of the record to use. By default, ISO19139 are used as is and ISO19115-3 are converted to ISO19139.If mode = csw, a GetRecordById request is used.If mode = any portal id, then a GetRecordById request is used on this portal CSW entry point which may define custom CSW post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493.",
            "in": "query",
            "name": "mode",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Records validated."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Editors can access it."
          }
        },
        "summary": "Validate one or more records in INSPIRE validator",
        "tags": [
          "records"
        ]
      }
    },
    "/records/versions": {
      "put": {
        "operationId": "enableVersionControlForRecords",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "(Experimental) Enable version control for one or more records",
        "tags": [
          "records"
        ]
      }
    },
    "/records/zip": {
      "get": {
        "description": "Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing the metadata as XML and some others files depending on the version requested. See https://docs.geonetwork-opensource.org/latest/annexes/mef-format/.",
        "operationId": "exportAsMef",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "MEF file format.",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string",
              "default": "full",
              "enum": [
                "SIMPLE",
                "PARTIAL",
                "FULL"
              ]
            }
          },
          {
            "description": "With related records (parent and service).",
            "in": "query",
            "name": "withRelated",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Resolve XLinks in the records.",
            "in": "query",
            "name": "withXLinksResolved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Preserve XLink URLs in the records.",
            "in": "query",
            "name": "withXLinkAttribute",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "addSchemaLocation",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Download the approved version",
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return requested records as ZIP."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get a set of metadata records as ZIP",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}": {
      "delete": {
        "description": "User MUST be able to edit the record to delete it. By default, a backup is made in ZIP format. After that, the record attachments are removed, the document removed from the index and then from the database.",
        "operationId": "deleteRecord",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Backup first the record as MEF in the metadata removed folder.",
            "in": "query",
            "name": "withBackup",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted."
          },
          "401": {
            "description": "This template is referenced"
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Delete a record",
        "tags": [
          "records"
        ]
      },
      "get": {
        "description": "Accept header should indicate which is the appropriate format to return. It could be text/html, application/xml, application/zip, ...If no appropriate Accept header found, the XML format is returned.Depending on the accept header the appropriate formatter is used. When requesting a ZIP, a MEF version 2 file is returned. When requesting HTML, the default formatter is used.",
        "operationId": "getRecord",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/x-gn-mef-1-zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/x-gn-mef-2-zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/xhtml+xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": "Return the record."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xhtml+xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xhtml+xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Get a metadata record",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/alert": {
      "post": {
        "operationId": "sendEmailToContact",
        "parameters": [
          {
            "description": "Metadata record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Recaptcha validation key.",
            "in": "query",
            "name": "recaptcha",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "User name.",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User organisation.",
            "in": "query",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User email address.",
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comment or question.",
            "in": "query",
            "name": "comments",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User phone number.",
            "in": "query",
            "name": "phone",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Email subject.",
            "in": "query",
            "name": "subject",
            "required": false,
            "schema": {
              "type": "string",
              "default": "feedback_subject_userFeedback"
            }
          },
          {
            "description": "User function.",
            "in": "query",
            "name": "function",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-"
            }
          },
          {
            "description": "Comment type.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-"
            }
          },
          {
            "description": "Comment category.",
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-"
            }
          },
          {
            "description": "List of record's contact to send this email (separated by comma).",
            "in": "query",
            "name": "metadataEmail",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Send an email to catalogue administrator or record's contact",
        "tags": [
          "userfeedback"
        ]
      }
    },
    "/records/{metadataUuid}/associated": {
      "get": {
        "description": "Retrieve related services, datasets, sources, ... to this records.<br/><a href='https://docs.geonetwork-opensource.org/latest/user-guide/associating-resources/'>More info</a>",
        "operationId": "getAssociatedResources",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of related resource. If none, all resources are returned.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RelatedItemType"
              },
              "default": []
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Start offset for paging. Default 1. Only applies to related metadata records (ie. not for thumbnails).",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "Number of rows returned. Default 100.",
            "in": "query",
            "name": "rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AssociatedRecord"
                    }
                  }
                }
              }
            },
            "description": "Return the associated resources."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AssociatedRecord"
                    }
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get record associated resources",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/attachments": {
      "delete": {
        "operationId": "delResources",
        "parameters": [
          {
            "description": "The metadata UUID",
            "example": "43d7c186-2187-4bcd-8843-41e575a5ef56",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attachment added."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Delete all uploaded metadata resources",
        "tags": [
          "records"
        ]
      },
      "get": {
        "description": "<a href='https://docs.geonetwork-opensource.org/latest/user-guide/associating-resources/using-filestore/'>More info</a>",
        "operationId": "getAllResources",
        "parameters": [
          {
            "description": "The metadata UUID",
            "example": "43d7c186-2187-4bcd-8843-41e575a5ef56",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort by",
            "example": "type",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "type",
                "name"
              ]
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "*.*"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataResource"
                  }
                }
              }
            },
            "description": "Return the record attachments."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataResource"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "List all metadata attachments",
        "tags": [
          "records"
        ]
      },
      "post": {
        "operationId": "putResource",
        "parameters": [
          {
            "description": "The metadata UUID",
            "example": "43d7c186-2187-4bcd-8843-41e575a5ef56",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The sharing policy",
            "example": "public",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "type": "string",
              "default": "public",
              "enum": [
                "PUBLIC",
                "PRIVATE"
              ]
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "example": null,
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload",
                    "example": null
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataResource"
                }
              }
            },
            "description": "Attachment uploaded."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataResource"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Create a new resource for a given metadata",
        "tags": [
          "records"
        ]
      },
      "put": {
        "operationId": "putResourceFromURL",
        "parameters": [
          {
            "description": "The metadata UUID",
            "example": "43d7c186-2187-4bcd-8843-41e575a5ef56",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The sharing policy",
            "example": "public",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "type": "string",
              "default": "public",
              "enum": [
                "PUBLIC",
                "PRIVATE"
              ]
            }
          },
          {
            "description": "The URL to load in the store",
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string",
              "format": "url"
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataResource"
                }
              }
            },
            "description": "Attachment added."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataResource"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Create a new resource from a URL for a given metadata",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/attachments/print-thumbnail": {
      "put": {
        "description": "<a href='https://docs.geonetwork-opensource.org/latest/user-guide/associating-resources/linking-thumbnail/#linking-thumbnail-from-wms'>More info</a>",
        "operationId": "saveThumbnail",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The mapprint module JSON configuration",
            "in": "query",
            "name": "jsonConfig",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The rotation angle of the map",
            "in": "query",
            "name": "rotationAngle",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataResource"
                }
              }
            },
            "description": "Thumbnail created."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataResource"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Create an overview using the map print module",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/attachments/{resourceId}": {
      "delete": {
        "operationId": "delResource",
        "parameters": [
          {
            "description": "The metadata UUID",
            "example": "43d7c186-2187-4bcd-8843-41e575a5ef56",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The resource identifier (ie. filename)",
            "in": "path",
            "name": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attachment visibility removed."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Delete a metadata resource",
        "tags": [
          "records"
        ]
      },
      "get": {
        "operationId": "getResource",
        "parameters": [
          {
            "description": "The metadata UUID",
            "example": "43d7c186-2187-4bcd-8843-41e575a5ef56",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The resource identifier (ie. filename)",
            "in": "path",
            "name": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Size (only applies to images). From 1px to 2048px.",
            "example": 200,
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": "Record attachment."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to download the resource."
          }
        },
        "summary": "Get a metadata resource",
        "tags": [
          "records"
        ]
      },
      "patch": {
        "operationId": "patchResource",
        "parameters": [
          {
            "description": "The metadata UUID",
            "example": "43d7c186-2187-4bcd-8843-41e575a5ef56",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The resource identifier (ie. filename)",
            "in": "path",
            "name": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The visibility",
            "example": "public",
            "in": "query",
            "name": "visibility",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PUBLIC",
                "PRIVATE"
              ]
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataResource"
                }
              }
            },
            "description": "Attachment visibility updated."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataResource"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Update the metadata resource visibility",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/checkDuplicatedFieldValue": {
      "post": {
        "description": "Verifies if a metadata field value is in use. Fields supported: title (title), alternate title (altTitle) or resource identifier (identifier)",
        "operationId": "checkDuplicatedFieldValue",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DuplicatedValueDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Return true if the field value is duplicated in another metadata or false in other case."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Check if metadata field value is duplicated in another metadata",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/doi/{doiServerId}": {
      "delete": {
        "operationId": "unregisterDoi",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "DOI server identifier",
            "in": "path",
            "name": "doiServerId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DOI unregistered."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          },
          "404": {
            "description": "Metadata or DOI not found."
          },
          "500": {
            "description": "Service unavailable."
          }
        },
        "summary": "Remove a DOI (this is not recommended, DOI are supposed to be persistent once created. This is mainly here for testing).",
        "tags": [
          "records"
        ]
      },
      "put": {
        "operationId": "createDoi",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "DOI server identifier",
            "in": "path",
            "name": "doiServerId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Check status of the report."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Metadata not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Service unavailable."
          }
        },
        "summary": "Submit a record to the Datacite metadata store in order to create a DOI.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/doi/{doiServerId}/checkDoiUrl": {
      "get": {
        "operationId": "checkDoiUrl",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "DOI server identifier",
            "in": "path",
            "name": "doiServerId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "DOI URL created."
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata not found."
          },
          "500": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Service unavailable."
          }
        },
        "summary": "Check the DOI URL created based on current configuration and pattern.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/doi/{doiServerId}/checkPreConditions": {
      "get": {
        "operationId": "checkDoiStatus",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "DOI server identifier",
            "in": "path",
            "name": "doiServerId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              }
            },
            "description": "Record can be proposed to DataCite."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              }
            },
            "description": "Record does not meet preconditions. Check error message."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              }
            },
            "description": "Metadata not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              }
            },
            "description": "Service unavailable."
          }
        },
        "summary": "Check that a record can be submitted to DataCite for DOI creation. DataCite requires some fields to be populated.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/editor": {
      "delete": {
        "description": "Cancel current editing session.",
        "operationId": "cancelEdits",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Editing session cancelled."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Cancel edits",
        "tags": [
          "records"
        ]
      },
      "get": {
        "description": "Return HTML form for editing.",
        "operationId": "startEditing",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tab",
            "in": "query",
            "name": "currTab",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "withAttributes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The editor form."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Edit a record",
        "tags": [
          "records"
        ]
      },
      "post": {
        "description": "Save the HTML form content.",
        "operationId": "saveEdits",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tab",
            "in": "query",
            "name": "tab",
            "required": false,
            "schema": {
              "type": "string",
              "default": "simple"
            }
          },
          {
            "in": "query",
            "name": "withAttributes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "withValidationErrors",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "minor",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Submit for review directly after save.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "description": "Save current edits.",
            "in": "query",
            "name": "commit",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Save and terminate session.",
            "in": "query",
            "name": "terminate",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Record as XML. TODO: rename xml",
            "in": "query",
            "name": "data",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The editor form."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Save edits",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/editor/attributes": {
      "delete": {
        "operationId": "deleteAttribute",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference of the attribute to remove.",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Should attributes be shown on the editor snippet?",
            "in": "query",
            "name": "displayAttributes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attribute removed."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Delete attribute",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/editor/elements": {
      "delete": {
        "operationId": "deleteElement",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference of the element to remove.",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name of the parent.",
            "in": "query",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Should attributes be shown on the editor snippet?",
            "in": "query",
            "name": "displayAttributes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Element removed."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Delete element",
        "tags": [
          "records"
        ]
      },
      "put": {
        "operationId": "addElement",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference of the insertion point.",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the element to add (with prefix)",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Empty for inserting element, `geonet:attribute` for attributes.",
            "in": "query",
            "name": "child",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Should attributes be shown on the editor snippet?",
            "in": "query",
            "name": "displayAttributes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Element added."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Add element",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/editor/elements/{direction}": {
      "put": {
        "operationId": "reorderElement",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference of the element to move.",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Direction",
            "in": "path",
            "name": "direction",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "description": "Should attributes be shown on the editor snippet?",
            "in": "query",
            "name": "displayAttributes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Element reordered."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Reorder element",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/extents.json": {
      "get": {
        "description": "A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.\nProportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)\n\nNamed backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds\n",
        "operationId": "getAllRecordExtentAsJson",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtentDto"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get list of record extents",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/extents.png": {
      "get": {
        "description": "A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.\nProportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)\n\nNamed backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds\n",
        "operationId": "getAllRecordExtentAsImage",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "(optional) the background map projection. If not passed uses the region/getmap/mapproj setting. If the setting is not set defaults to EPSG:4326",
            "in": "query",
            "name": "mapsrs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "(optional) width of the image that is created. Only one of width and height are permitted",
            "in": "query",
            "name": "width",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 300
            }
          },
          {
            "description": "(optional) height of the image that is created. Only one of width and height are permitted",
            "in": "query",
            "name": "height",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "(optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS GetMap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height",
            "in": "query",
            "name": "background",
            "required": false,
            "schema": {
              "type": "string",
              "default": "settings"
            }
          },
          {
            "description": "(optional) Fill color with format RED,GREEN,BLUE,ALPHA",
            "in": "query",
            "name": "fillColor",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0,0,0,30"
            }
          },
          {
            "description": "(optional) Stroke color with format RED,GREEN,BLUE,ALPHA",
            "in": "query",
            "name": "strokeColor",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0,0,0,255"
            }
          },
          {
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/png": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte",
                    "example": null
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get record extents as image",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/extents/{geometryIndex}.png": {
      "get": {
        "description": "A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.\nProportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)\n\nNamed backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds\n",
        "operationId": "getOneRecordExtentAsImage",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Index of the geometry or bounding box to display. Starts at 1.",
            "in": "path",
            "name": "geometryIndex",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "(optional) the background map projection. If not passed uses the region/getmap/mapproj setting. If the setting is not set defaults to EPSG:4326",
            "in": "query",
            "name": "mapsrs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "(optional) width of the image that is created. Only one of width and height are permitted",
            "in": "query",
            "name": "width",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 300
            }
          },
          {
            "description": "(optional) height of the image that is created. Only one of width and height are permitted",
            "in": "query",
            "name": "height",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "(optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS GetMap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height",
            "in": "query",
            "name": "background",
            "required": false,
            "schema": {
              "type": "string",
              "default": "settings"
            }
          },
          {
            "description": "(optional) Fill color with format RED,GREEN,BLUE,ALPHA",
            "in": "query",
            "name": "fillColor",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0,0,0,30"
            }
          },
          {
            "description": "(optional) Stroke color with format RED,GREEN,BLUE,ALPHA",
            "in": "query",
            "name": "strokeColor",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0,0,0,255"
            }
          },
          {
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/png": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte",
                    "example": null
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get one record extent as image",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/featureCatalog": {
      "get": {
        "operationId": "getFeatureCatalog",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureResponse"
                }
              }
            },
            "description": "Return the associated resources."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureResponse"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Returns a map to decode attributes in a dataset (from the associated feature catalog)",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/formatters/json": {
      "get": {
        "operationId": "getRecordAsJson",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Add XSD schema location based on standard configuration (see schema-ident.xml).",
            "in": "query",
            "name": "addSchemaLocation",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Increase record popularity",
            "in": "query",
            "name": "increasePopularity",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Add geonet:info details",
            "in": "query",
            "name": "withInfo",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Download as a file",
            "in": "query",
            "name": "attachment",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Download the approved version",
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": "Return the record."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get a metadata record as JSON",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/formatters/xml": {
      "get": {
        "operationId": "getRecordAsXml",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Add XSD schema location based on standard configuration (see schema-ident.xml).",
            "in": "query",
            "name": "addSchemaLocation",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Increase record popularity",
            "in": "query",
            "name": "increasePopularity",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Add geonet:info details",
            "in": "query",
            "name": "withInfo",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Download as a file",
            "in": "query",
            "name": "attachment",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Download the approved version",
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": "Return the record."
          },
          "403": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get a metadata record as XML",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/formatters/zip": {
      "get": {
        "description": "Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing the metadata as XML and some others files depending on the version requested. See https://docs.geonetwork-opensource.org/latest/annexes/mef-format/.",
        "operationId": "getRecordAsZip",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "MEF file format.",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string",
              "default": "full",
              "enum": [
                "SIMPLE",
                "PARTIAL",
                "FULL"
              ]
            }
          },
          {
            "description": "With related records (parent and service).",
            "in": "query",
            "name": "withRelated",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Resolve XLinks in the records.",
            "in": "query",
            "name": "withXLinksResolved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Preserve XLink URLs in the records.",
            "in": "query",
            "name": "withXLinkAttribute",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "addSchemaLocation",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Download the approved version",
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the record."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get a metadata record as ZIP",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/formatters/{formatterId}": {
      "get": {
        "operationId": "getRecordFormattedBy",
        "parameters": [
          {
            "description": "Formatter type to use.",
            "in": "path",
            "name": "formatterId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "width",
            "required": false,
            "schema": {
              "type": "string",
              "default": "_100",
              "enum": [
                "_25",
                "_50",
                "_75",
                "_100"
              ]
            }
          },
          {
            "in": "query",
            "name": "mdpath",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional language ISO 3 letters code to override HTTP Accept-language header.",
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "output",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "txt",
                "html",
                "xml",
                "json",
                "jsonld",
                "pdf",
                "testpdf"
              ]
            }
          },
          {
            "description": "Download the approved version",
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Get a formatted metadata record",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/group": {
      "put": {
        "description": "A record is related to one group.",
        "operationId": "setRecordGroup",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "description": "Group identifier",
                "format": "int32"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Record group updated."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Set record group",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/ownership": {
      "put": {
        "operationId": "setRecordOwnership",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Group identifier",
            "in": "query",
            "name": "groupIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User identifier",
            "in": "query",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Record group and owner updated"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Set record group and owner",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/permalink": {
      "get": {
        "description": "Permalink is by default the landing page formatter but can be configured in the admin console > settings. If the record as a DOI and if enabled in the settings, then it takes priority.",
        "operationId": "getRecordPermalink",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Return the permalink URL."
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Get metadata record permalink",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/popularity": {
      "get": {
        "operationId": "getRecordPopularity",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Popularity."
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Get record popularity",
        "tags": [
          "records"
        ]
      },
      "post": {
        "description": "Used when a view is based on the search results content and does not really access the record. Record is then added to the indexing queue and popularity will be updated soon.",
        "operationId": "increaseRecordPopularity",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Popularity updated."
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Increase record popularity",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/processes": {
      "get": {
        "description": "Analyze the record an suggest processes to improve the quality of the record.<br/><a href='https://docs.geonetwork-opensource.org/latest/user-guide/workflow/batchupdate-xsl/'>More info</a>",
        "operationId": "getSuggestions",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SuggestionType"
                  }
                }
              }
            },
            "description": "Record suggestions."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SuggestionType"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Get suggestions",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/processes/{process}": {
      "get": {
        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
        "operationId": "processRecordPreview",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Process identifier",
            "in": "path",
            "name": "process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "A preview of the processed record."
          },
          "403": {
            "content": {},
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Preview process result",
        "tags": [
          "records"
        ]
      },
      "post": {
        "description": "Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.",
        "operationId": "processRecord",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Process identifier",
            "in": "path",
            "name": "process",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "allRequestParams",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Record processed and saved."
          },
          "403": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Apply a process",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/publish": {
      "put": {
        "operationId": "publish",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Publication type",
            "in": "query",
            "name": "publicationType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Settings updated."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Set privileges for ALL group to publish the metadata for all users.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/query": {
      "get": {
        "operationId": "getSavedQueries",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SavedQuery"
                  }
                }
              }
            },
            "description": "Saved query available."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SavedQuery"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "List saved queries for this metadata",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/query/{savedQuery}": {
      "post": {
        "description": "All parameters will be substituted to the XPath query. eg. {{protocol}} in the XPath expression will be replaced by the protocol parameter provided in the request body.",
        "operationId": "applyQuery",
        "parameters": [
          {
            "description": "The metadata UUID",
            "example": "43d7c186-2187-4bcd-8843-41e575a5ef56",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The saved query to apply",
            "example": "wfs-indexing-config",
            "in": "path",
            "name": "savedQuery",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The query parameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "List of matching elements. If element are nodes, then they are returned as string."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Apply a saved query for this metadata",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/rate": {
      "put": {
        "description": "User rating of metadata. If the metadata was harvested using the 'GeoNetwork' protocol and the system setting localrating/enable is false (the default), the user's rating is shared between GN nodes in this harvesting network. If the metadata was not harvested or if localrating/enable is true then 'local rating' is applied, counting only rating from users of this node.<br/>When a remote rating is applied, the local rating is not updated. It will be updated on the next harvest run (FIXME ?).",
        "operationId": "rateRecord",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "description": "Rating",
                "format": "int32"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "New rating value."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Rate a record",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/related": {
      "get": {
        "description": "Retrieve related services, datasets, onlines, thumbnails, sources, ... to this records.<br/><a href='https://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More info</a>",
        "operationId": "getRelatedResources",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type of related resource. If none, all resources are returned.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RelatedItemType"
              },
              "default": []
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Start offset for paging. Default 1. Only applies to related metadata records (ie. not for thumbnails).",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "Number of rows returned. Default 100.",
            "in": "query",
            "name": "rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedResponse"
                }
              }
            },
            "description": "Return the associated resources."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedResponse"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get record related resources",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/sharing": {
      "get": {
        "description": "Return current sharing options for a record.",
        "operationId": "getRecordSharingSettings",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharingResponse"
                }
              }
            },
            "description": "The record sharing settings."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharingResponse"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get record sharing settings",
        "tags": [
          "records"
        ]
      },
      "put": {
        "description": "Privileges are assigned by group. User needs to be able to edit a record to set sharing settings. For reserved group (ie. Internet, Intranet & Guest), user MUST be reviewer of one group. For other group, if Only set privileges to user's groups is set in catalog configuration user MUST be a member of the group.<br/>Clear first allows to unset all operations first before setting the new ones.Clear option does not remove reserved groups operation if user is not an administrator, a reviewer or the owner of the record.<br/><a href='https://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/publishing/managing-privileges.html'>More info</a>",
        "operationId": "share",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharingParameter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Settings updated."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Set record sharing",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/status": {
      "delete": {
        "operationId": "deleteAllRecordStatus",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Status removed."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          },
          "404": {
            "description": "Status not found."
          }
        },
        "summary": "Delete all record status",
        "tags": [
          "records"
        ]
      },
      "get": {
        "operationId": "getRecordStatusHistory",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "details",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort direction",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataStatusResponse"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get record status history",
        "tags": [
          "records"
        ]
      },
      "put": {
        "operationId": "setStatus",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataStatusParameter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string",
                    "enum": [
                      "UPDATED",
                      "UNCHANGED",
                      "DELETED"
                    ]
                  }
                }
              }
            },
            "description": "Status updated."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string",
                    "enum": [
                      "UPDATED",
                      "UNCHANGED",
                      "DELETED"
                    ]
                  }
                }
              }
            },
            "description": "Metadata workflow not enabled."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string",
                    "enum": [
                      "UPDATED",
                      "UNCHANGED",
                      "DELETED"
                    ]
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Set the record status",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/status/workflow/last": {
      "get": {
        "operationId": "getStatus",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataWorkflowStatusResponse"
                }
              }
            },
            "description": "Record status."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataWorkflowStatusResponse"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Get last workflow status for a record",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}": {
      "delete": {
        "operationId": "deleteRecordStatus",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Status identifier",
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User identifier",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Change date",
            "in": "path",
            "name": "changeDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Status removed."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          },
          "404": {
            "description": "Status not found."
          }
        },
        "summary": "Delete a record status",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/after": {
      "get": {
        "operationId": "showStatusAfter",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Status identifier",
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User identifier",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Change date",
            "in": "path",
            "name": "changeDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Version of the record after changes."
          },
          "403": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Get saved content from the status record after changes",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/before": {
      "get": {
        "operationId": "showStatusBefore",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Status identifier",
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User identifier",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Change date",
            "in": "path",
            "name": "changeDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Previous version of the record."
          },
          "403": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Get saved content from the status record before changes",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/close": {
      "put": {
        "operationId": "closeTask",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Status identifier",
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User identifier",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Change date",
            "in": "path",
            "name": "changeDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Close date",
            "in": "query",
            "name": "closeDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Task closed."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          },
          "404": {
            "description": "Status not found."
          }
        },
        "summary": "Close a record task",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/restore": {
      "post": {
        "operationId": "restoreAtStatusSave",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Status identifier",
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User identifier",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Change date",
            "in": "path",
            "name": "changeDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record restored."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Restore saved content from a status record",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/status/{type}": {
      "get": {
        "operationId": "getRecordStatusHistoryByType",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "workflow",
                "task",
                "event"
              ]
            }
          },
          {
            "in": "query",
            "name": "details",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort direction",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataStatusResponse"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get record status history by type",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/tags": {
      "delete": {
        "operationId": "deleteTags",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tag identifier. If none, all tags are removed.",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record tags removed."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Delete tags of a record",
        "tags": [
          "records"
        ]
      },
      "get": {
        "description": "Tags are used to classify information.<br/><a href='https://docs.geonetwork-opensource.org/latest/user-guide/tag-information/tagging-with-categories/'>More info</a>",
        "operationId": "getRecordTags",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataCategory"
                  }
                }
              }
            },
            "description": "Record tags."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataCategory"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get record tags",
        "tags": [
          "records"
        ]
      },
      "put": {
        "operationId": "tagRecord",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tag identifier",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "description": "Clear all before adding new ones",
            "in": "query",
            "name": "clear",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record tags added."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Add tags to a record",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/unpublish": {
      "put": {
        "operationId": "unpublish",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Publication type",
            "in": "query",
            "name": "publicationType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Settings updated."
          },
          "403": {
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Unsets privileges for ALL group to publish the metadata for all users.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/userfeedback": {
      "get": {
        "description": " This list will include also the draft user feedback if the client is logged as reviewer.",
        "operationId": "getUserCommentsOnARecord",
        "parameters": [
          {
            "description": "Metadata record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of feedback to return.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserFeedbackDTO"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Finds a list of user feedback for a specific records. ",
        "tags": [
          "userfeedback"
        ]
      }
    },
    "/records/{metadataUuid}/userfeedbackrating": {
      "get": {
        "operationId": "getMetadataRating",
        "parameters": [
          {
            "description": "Metadata record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingAverage"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Provides an average rating for a metadata record",
        "tags": [
          "userfeedback"
        ]
      }
    },
    "/records/{metadataUuid}/validate/inspire": {
      "put": {
        "description": "User MUST be able to edit the record to validate it. An INSPIRE endpoint must be configured in Settings. This activates an asyncronous process, this method does not return any report. This method returns an id to be used to get the report.",
        "operationId": "validateRecordForInspire",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Test suite to run",
            "in": "query",
            "name": "testsuite",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Define the encoding of the record to use. By default, ISO19139 are used as is and ISO19115-3 are converted to ISO19139.If mode = csw, a GetRecordById request is used.If mode = any portal id, then a GetRecordById request is used on this portal CSW entry point which may define custom CSW post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493.",
            "in": "query",
            "name": "mode",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Check status of the report."
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata not found."
          },
          "500": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Service unavailable."
          }
        },
        "summary": "Submit a record to the INSPIRE service for validation.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/validate/inspire/testsuites": {
      "get": {
        "description": "TG13, TG2, ...",
        "operationId": "getTestSuites",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "List of testsuites available."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Get test suites available.",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/validate/internal": {
      "put": {
        "description": "User MUST be able to edit the record to validate it. FIXME : id MUST be the id of the current metadata record in session ?",
        "operationId": "validateRecord",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Validation status. Should be provided only in case of SUBTEMPLATE validation. If provided for another type, throw a BadParameter Exception",
            "in": "query",
            "name": "isvalid",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reports"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Reports"
                }
              }
            },
            "description": "Validation report."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reports"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Reports"
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          }
        },
        "summary": "Validate a record",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{metadataUuid}/versions": {
      "put": {
        "operationId": "enableVersionControl",
        "parameters": [
          {
            "description": "Record UUID.",
            "in": "path",
            "name": "metadataUuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "(Experimental) Enable version control",
        "tags": [
          "records"
        ]
      }
    },
    "/records/{testId}/validate/inspire": {
      "get": {
        "description": "User MUST be able to edit the record to validate it. An INSPIRE endpoint must be configured in Settings. If the process is complete an object with status is returned. ",
        "operationId": "checkValidation",
        "parameters": [
          {
            "description": "Test identifier",
            "in": "path",
            "name": "testId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Report ready."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Report not ready."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to edit the resource."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Report id not found."
          }
        },
        "summary": "Check the status of validation with the INSPIRE service.",
        "tags": [
          "records"
        ]
      }
    },
    "/regions": {
      "get": {
        "operationId": "getRegions",
        "parameters": [
          {
            "in": "query",
            "name": "label",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "categoryId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxRecords",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRegionsResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListRegionsResponse"
                }
              }
            },
            "description": "List of regions."
          }
        },
        "summary": "Get list of regions",
        "tags": [
          "regions"
        ]
      }
    },
    "/regions/geom.png": {
      "get": {
        "description": "A rendering of the geometry as a png.",
        "operationId": "getGeomAsImage",
        "parameters": [
          {
            "description": "(optional) the background map projection. If not passed uses the region/getmap/mapproj setting. If the setting is not set defaults to EPSG:4326",
            "in": "query",
            "name": "mapsrs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "(optional) width of the image that is created. Only one of width and height are permitted",
            "in": "query",
            "name": "width",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 300
            }
          },
          {
            "description": "(optional) height of the image that is created. Only one of width and height are permitted",
            "in": "query",
            "name": "height",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "(optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS Getmap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height",
            "in": "query",
            "name": "background",
            "required": false,
            "schema": {
              "type": "string",
              "default": "settings"
            }
          },
          {
            "description": "(optional) a wkt or gml encoded geometry.",
            "in": "query",
            "name": "geom",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "(optional) defines if geom is wkt or gml. Allowed values are wkt and gml. if not specified the it is assumed the geometry is wkt",
            "in": "query",
            "name": "geomtype",
            "required": false,
            "schema": {
              "type": "string",
              "default": "WKT"
            }
          },
          {
            "in": "query",
            "name": "geomsrs",
            "required": false,
            "schema": {
              "type": "string",
              "default": "EPSG:4326"
            }
          },
          {
            "description": "(optional) Fill color with format RED,GREEN,BLUE,ALPHA",
            "in": "query",
            "name": "fillColor",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0,0,0,30"
            }
          },
          {
            "description": "(optional) Stroke color with format RED,GREEN,BLUE,ALPHA",
            "in": "query",
            "name": "strokeColor",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0,0,0,255"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/png": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte",
                    "example": null
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get geometry as image",
        "tags": [
          "regions"
        ]
      }
    },
    "/regions/types": {
      "get": {
        "operationId": "getRegionTypes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            },
            "description": "List of region types."
          }
        },
        "summary": "Get list of region types",
        "tags": [
          "regions"
        ]
      }
    },
    "/registries/actions/entries/collect": {
      "get": {
        "description": "Scan one or more records for element matching the XPath provided and save them as directory entries (ie. subtemplate).<br/><br/>Only records that the current user can edit are analyzed.<br/><br/>Examples:<br/>For ISO19115-3 records, use .//cit:CI_Responsibility and compute identifier based on email with .//cit:electronicMailAddress/*/text() to create a contact directory.",
        "operationId": "previewExtractedEntries",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "XPath of the elements to extract as entry.",
            "example": ".//gmd:CI_ResponsibleParty",
            "in": "query",
            "name": "xpath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
            "example": "@uuid",
            "in": "query",
            "name": "identifierXpath",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Preview directory entries extracted from records",
        "tags": [
          "registries"
        ]
      },
      "put": {
        "description": "Scan one or more records for element matching the XPath provided and save them as directory entries (ie. subtemplate).<br/><br/>Only records that the current user can edit are analyzed.<br/><br/>Examples:<br/>For ISO19115-3 records, use .//cit:CI_Responsibility and compute identifier based on email with .//cit:electronicMailAddress/*/text() to create a contact directory.",
        "operationId": "extractEntries",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "XPath of the elements to extract as entry.",
            "example": ".//gmd:CI_ResponsibleParty",
            "in": "query",
            "name": "xpath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
            "example": "@uuid",
            "in": "query",
            "name": "identifierXpath",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Extracts directory entries from records",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/actions/entries/import/spatial": {
      "post": {
        "description": "Directory entry (AKA subtemplates) are XML fragments that can be inserted in metadata records. Use this service to import geographic extent entries from an ESRI Shapefile format.",
        "operationId": "importSpatialEntries",
        "parameters": [
          {
            "description": "Attribute to use for UUID. If none, random UUID are generated.",
            "in": "query",
            "name": "uuidAttribute",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pattern to build UUID from. Default is '{{uuid}}'.",
            "in": "query",
            "name": "uuidPattern",
            "required": false,
            "schema": {
              "type": "string",
              "default": "{{uuid}}"
            }
          },
          {
            "description": "Attribute to use for extent description. If none, no extent description defined. TODO: Add per language desc ?",
            "in": "query",
            "name": "descriptionAttribute",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "geomProjectionTo",
            "in": "query",
            "name": "geomProjectionTo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "lenient",
            "in": "query",
            "name": "lenient",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Attribute table charset",
            "in": "query",
            "name": "charset",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Create only bounding box for each spatial objects.",
            "in": "query",
            "name": "onlyBoundingBox",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Process",
            "in": "query",
            "name": "process",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Schema identifier",
            "in": "query",
            "name": "schema",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Record identifier processing.",
            "in": "query",
            "name": "uuidProcessing",
            "required": false,
            "schema": {
              "type": "string",
              "default": "NOTHING",
              "enum": [
                "GENERATEUUID",
                "NOTHING",
                "OVERWRITE",
                "REMOVE_AND_REPLACE"
              ]
            }
          },
          {
            "description": "The group the record is attached to.",
            "in": "query",
            "name": "group",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "example": null,
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The ZIP file to upload containing the Shapefile.",
                    "example": null
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Directory entries imported."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMetadataProcessingReport"
                }
              }
            },
            "description": "Operation not allowed. Only Reviewvers can access it."
          }
        },
        "summary": "Import spatial directory entries",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/actions/entries/synchronize": {
      "get": {
        "description": "Scan one or more records for element matching the XPath provided and then check if this element is available in the directory. If Found, the element from the directory update the element in the record and optionally text or attribute value properties are preserved using propertiesToCopy. Elements can be lost if not existing in the directory entry (eg. from an gex:Extent directory containing only description and bounding polygon, the update can remove temporal element).<br/><br/>The identifier XPath is used to find a match. An optional filtercan be added to restrict search to a subset of the directory. If no identifier XPaths is provided, the UUID is based on the content of the snippet (hash). It is recommended to use an identifier for better matching (eg. ISO19139 contact with different roles will not match on the automatic UUID mode).",
        "operationId": "previewUpdatedRecordEntries",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "XPath of the elements to extract as entry.",
            "example": ".//gmd:CI_ResponsibleParty",
            "in": "query",
            "name": "xpath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
            "example": "@uuid or .//gmd:electronicMailAddress/gco:CharacterString/text()",
            "in": "query",
            "name": "identifierXpath",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "List of XPath of properties to copy from record to matching entry. Only support text or attribute eg. ./gmd:role/*/@codeListValue",
            "example": "./gmd:role/*/@codeListValue",
            "in": "query",
            "name": "propertiesToCopy",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Replace entry by XLink.",
            "example": "@uuid",
            "in": "query",
            "name": "substituteAsXLink",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Filter query for directory search.",
            "example": "groupPublished:IFREMER",
            "in": "query",
            "name": "fq",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Preview updated matching entries in records",
        "tags": [
          "registries"
        ]
      },
      "put": {
        "description": "Scan one or more records for element matching the XPath provided and then check if this element is available in the directory. If Found, the element from the directory update the element in the record and optionally text or attribute value properties are preserved using propertiesToCopy. Elements can be lost if not existing in the directory entry (eg. from an gex:Extent directory containing only description and bounding polygon, the update can remove temporal element).<br/><br/>The identifier XPath is used to find a match. An optional filtercan be added to restrict search to a subset of the directory. If no identifier XPaths is provided, the UUID is based on the content of the snippet (hash). It is recommended to use an identifier for better matching (eg. ISO19139 contact with different roles will not match on the automatic UUID mode).",
        "operationId": "updateRecordEntries",
        "parameters": [
          {
            "description": "Record UUIDs. If null current selection is used.",
            "in": "query",
            "name": "uuids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "XPath of the elements to extract as entry.",
            "example": ".//gmd:CI_ResponsibleParty",
            "in": "query",
            "name": "xpath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.",
            "example": "@uuid",
            "in": "query",
            "name": "identifierXpath",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "List of XPath of properties to copy from record to matching entry. Only support text or attribute eg. ./gmd:role/*/@codeListValue",
            "example": "./gmd:role/*/@codeListValue",
            "in": "query",
            "name": "propertiesToCopy",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Replace entry by XLink.",
            "in": "query",
            "name": "substituteAsXLink",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Filter query for directory search.",
            "example": "groupPublished:IFREMER",
            "in": "query",
            "name": "fq",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Update matching entries in records",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/crs": {
      "get": {
        "description": "Based on GeoTools EPSG database. If phrase query, each words are searched separately.",
        "operationId": "searchCrs",
        "parameters": [
          {
            "description": "Search value",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Type of CRS",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "CoordinateReferenceSystem",
                "VerticalCRS",
                "GeographicCRS",
                "ProjectedCRS"
              ]
            }
          },
          {
            "description": "Number of results. Default is: 100",
            "in": "query",
            "name": "rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Crs"
                  }
                }
              }
            },
            "description": "List of CRS."
          }
        },
        "summary": "Search coordinate reference system (CRS)",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/crs/types": {
      "get": {
        "operationId": "getCrsTypes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "CoordinateReferenceSystem",
                      "VerticalCRS",
                      "GeographicCRS",
                      "ProjectedCRS"
                    ]
                  }
                }
              }
            },
            "description": "List of CRS types."
          }
        },
        "summary": "Get list of CRS type",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/crs/{id}": {
      "get": {
        "operationId": "getCrs",
        "parameters": [
          {
            "description": "CRS identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Crs"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Crs"
                }
              }
            },
            "description": "CRS details."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Crs"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Crs"
                }
              }
            },
            "description": "CRS not found."
          }
        },
        "summary": "Get CRS",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/entries/{uuid}": {
      "get": {
        "description": "Directory entry (AKA subtemplates) are XML fragments that can be inserted in metadata records using XLinks. XLinks can be remote or local.",
        "operationId": "getEntry",
        "parameters": [
          {
            "description": "Directory entry UUID.",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Process",
            "in": "query",
            "name": "process",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Transformation",
            "in": "query",
            "name": "transformation",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "lang",
            "in": "query",
            "name": "lang",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "schema",
            "in": "query",
            "name": "schema",
            "required": false,
            "schema": {
              "type": "string",
              "default": "iso19139"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Directory entry."
          },
          "403": {
            "content": {},
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get a directory entry",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/vocabularies": {
      "post": {
        "description": "Supported thesaurus are RDF/XML files using SKOS specification, OWL file describing NamedIndividual elements or SDMX file describing Codelist element. For RDF, extension must be .rdf or .xml, for OWL, .owl and for SDMX, .sdmx.",
        "operationId": "uploadThesaurus",
        "parameters": [
          {
            "description": "Local or external (default).",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "default": "external",
              "enum": [
                "external",
                "local"
              ]
            }
          },
          {
            "description": "Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.",
            "in": "query",
            "name": "dir",
            "required": false,
            "schema": {
              "type": "string",
              "default": "theme"
            }
          },
          {
            "description": "XSL to be use to convert the thesaurus before load. Default _none_.",
            "in": "query",
            "name": "stylesheet",
            "required": false,
            "schema": {
              "type": "string",
              "default": "_none_"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": null,
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "If set, do a file upload.",
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "text/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Thesaurus uploaded in SKOS format."
          },
          "403": {
            "content": {
              "text/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Reviewvers can access it."
          }
        },
        "summary": "Uploads a new thesaurus from a file",
        "tags": [
          "registries"
        ]
      },
      "put": {
        "description": "Uploads a new thesaurus.",
        "operationId": "uploadThesaurusFromUrl",
        "parameters": [
          {
            "description": "If set, try to download from the Internet.",
            "in": "query",
            "name": "url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If set, try to download from a registry.",
            "in": "query",
            "name": "registryUrl",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If using registryUrl, then define the type of registry. If not set, default mode is re3gistry.",
            "in": "query",
            "name": "registryType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "re3gistry",
                "ldRegistry"
              ]
            }
          },
          {
            "description": "Languages to download from a registry.",
            "in": "query",
            "name": "registryLanguage",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Local or external (default).",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "default": "external",
              "enum": [
                "external",
                "local"
              ]
            }
          },
          {
            "description": "Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.",
            "in": "query",
            "name": "dir",
            "required": false,
            "schema": {
              "type": "string",
              "default": "theme"
            }
          },
          {
            "description": "XSL to be use to convert the thesaurus before load. Default _none_.",
            "in": "query",
            "name": "stylesheet",
            "required": false,
            "schema": {
              "type": "string",
              "default": "_none_"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThesaurusInfo"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "text/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Thesaurus uploaded in SKOS format."
          },
          "403": {
            "content": {
              "text/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Reviewvers can access it."
          }
        },
        "summary": "Uploads a new thesaurus from URL or Registry",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/vocabularies/import/csv": {
      "post": {
        "description": "CSV file MUST contains columns at least for concept id and label. For multilingual thesaurus, consider using columns like label, label_fre, label_ita with languages parameter set to [en, fr, it]. Default language value is used if translations are empty. The thesaurus filename will be the filename of the CSV file (with .rdf extension). It is recommended to set the thesaurus title and namespace URL even if default values will be used based on the filename. Thesaurus dates are set to the date of import.",
        "operationId": "importCsvAsThesaurus",
        "parameters": [
          {
            "description": "Local or external (default).",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "default": "external",
              "enum": [
                "external",
                "local"
              ]
            }
          },
          {
            "description": "Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.",
            "in": "query",
            "name": "dir",
            "required": false,
            "schema": {
              "type": "string",
              "default": "theme"
            }
          },
          {
            "description": "Encoding. Default is UTF-8.",
            "in": "query",
            "name": "encoding",
            "required": false,
            "schema": {
              "type": "string",
              "default": "UTF-8"
            }
          },
          {
            "description": "Thesaurus namespace. Default is filename.",
            "in": "query",
            "name": "thesaurusNs",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Thesaurus languages",
            "in": "query",
            "name": "languages",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "en"
              ]
            }
          },
          {
            "description": "Thesaurus title. Default is filename.",
            "in": "query",
            "name": "thesaurusTitle",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Column name for concept id. Default is id.",
            "in": "query",
            "name": "conceptIdColumn",
            "required": false,
            "schema": {
              "type": "string",
              "default": "id"
            }
          },
          {
            "description": "Column name for concept label. Default is label.",
            "in": "query",
            "name": "conceptLabelColumn",
            "required": false,
            "schema": {
              "type": "string",
              "default": "label"
            }
          },
          {
            "description": "Column name for concept description. Default is description.",
            "in": "query",
            "name": "conceptDescriptionColumn",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Column name for broader concept id. Default is broader.",
            "in": "query",
            "name": "conceptBroaderIdColumn",
            "required": false,
            "schema": {
              "type": "string",
              "default": "broader"
            }
          },
          {
            "description": "Column name for narrower concept id. Default is narrower.",
            "in": "query",
            "name": "conceptNarrowerIdColumn",
            "required": false,
            "schema": {
              "type": "string",
              "default": "narrower"
            }
          },
          {
            "description": "Column name for related concept id. Default is related.",
            "in": "query",
            "name": "conceptRelatedIdColumn",
            "required": false,
            "schema": {
              "type": "string",
              "default": "related"
            }
          },
          {
            "description": "Separator used when multiple broader/narrower/related ids are in the same column. Default is '|'.",
            "in": "query",
            "name": "conceptLinkSeparator",
            "required": false,
            "schema": {
              "type": "string",
              "default": "\\|"
            }
          },
          {
            "description": "Import CSV file as thesaurus if true (detault) or return it in  SKOS format.",
            "in": "query",
            "name": "importAsThesaurus",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": null,
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "If set, do a file upload.",
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thesaurus converted and returned in response in SKOS format."
          },
          "201": {
            "description": "Thesaurus converted and imported in SKOS format."
          },
          "403": {
            "description": "Operation not allowed. Only Reviewvers can access it."
          }
        },
        "summary": "Uploads a CSV file and convert it to SKOS format",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/vocabularies/keyword": {
      "get": {
        "description": "Retrieve XML representation of keyword(s) from same thesaurususing different transformations. 'to-iso19139-keyword' is the default and return an ISO19139 snippet.'to-iso19139-keyword-as-xlink' return an XLinked element. Custom transformation can be create on a per schema basis.",
        "operationId": "getKeywordById",
        "parameters": [
          {
            "description": "Keyword identifier or list of keyword identifiers comma separated.",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Thesaurus to look info for the keyword(s).",
            "in": "query",
            "name": "thesaurus",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Languages.",
            "in": "query",
            "name": "lang",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Only print the keyword, no thesaurus information.",
            "in": "query",
            "name": "keywordOnly",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "XSL template to use (ISO19139 keyword by default, see convert.xsl).",
            "in": "query",
            "name": "transformation",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "langMap, that converts the values in the 'lang' parameter to how they will be actually represented in the record. {'fre':'fra'} or {'fre':'fr'}.  Missing/empty means to convert to iso 2 letter.",
            "in": "query",
            "name": "langMap",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "XML snippet with requested keywords."
          }
        },
        "summary": "Get keyword by id",
        "tags": [
          "registries"
        ]
      },
      "post": {
        "description": "Retrieve XML representation of keyword(s) from same thesaurususing different transformations. 'to-iso19139-keyword' is the default and return an ISO19139 snippet.'to-iso19139-keyword-as-xlink' return an XLinked element. Custom transformation can be create on a per schema basis.This can be used instead of the GET method for cases where you need to submit large parameters list",
        "operationId": "getKeywordByIds",
        "parameters": [
          {
            "description": "Keyword identifier or list of keyword identifiers comma separated.",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Thesaurus to look info for the keyword(s).",
            "in": "query",
            "name": "thesaurus",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Languages.",
            "in": "query",
            "name": "lang",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Only print the keyword, no thesaurus information.",
            "in": "query",
            "name": "keywordOnly",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "XSL template to use (ISO19139 keyword by default, see convert.xsl).",
            "in": "query",
            "name": "transformation",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "langMap, that converts the values in the 'lang' parameter to how they will be actually represented in the record. {'fre':'fra'} or {'fre':'fr'}.  Missing/empty means to convert to iso 2 letter.",
            "in": "query",
            "name": "langMap",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "XML snippet with requested keywords."
          }
        },
        "summary": "Get keyword by ids",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/vocabularies/search": {
      "get": {
        "operationId": "searchKeywords",
        "parameters": [
          {
            "description": "Query",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Query in that language",
            "in": "query",
            "name": "lang",
            "required": false,
            "schema": {
              "type": "string",
              "default": "eng"
            }
          },
          {
            "description": "Number of rows",
            "in": "query",
            "name": "rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          },
          {
            "description": "Start from",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "Return keyword information in one or more languages",
            "in": "query",
            "name": "pLang",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Thesaurus identifier",
            "in": "query",
            "name": "thesaurus",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Type of search",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "default": "CONTAINS",
              "enum": [
                "STARTS_WITH",
                "CONTAINS",
                "MATCH"
              ]
            }
          },
          {
            "description": "URI query",
            "in": "query",
            "name": "uri",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort by",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Search keywords",
        "tags": [
          "registries"
        ]
      }
    },
    "/registries/vocabularies/{thesaurus}": {
      "delete": {
        "description": "Delete a thesaurus.",
        "operationId": "deleteThesaurus",
        "parameters": [
          {
            "description": "Thesaurus to delete.",
            "in": "path",
            "name": "thesaurus",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thesaurus deleted."
          },
          "403": {
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Delete a thesaurus by name",
        "tags": [
          "registries"
        ]
      },
      "get": {
        "description": "Download the thesaurus in SKOS format.",
        "operationId": "getThesaurus",
        "parameters": [
          {
            "description": "Thesaurus to download.",
            "in": "path",
            "name": "thesaurus",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": "Thesaurus in SKOS format."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Download a thesaurus by name",
        "tags": [
          "registries"
        ]
      },
      "put": {
        "description": "Updates the information of a local thesaurus.",
        "operationId": "updateThesaurus",
        "parameters": [
          {
            "description": "Thesaurus to update.",
            "in": "path",
            "name": "thesaurus",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThesaurusInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Thesaurus created."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Updates the information of a local thesaurus",
        "tags": [
          "registries"
        ]
      }
    },
    "/related": {
      "get": {
        "description": "Retrieve related services, datasets, onlines, thumbnails, sources, ... to all requested records.<br/><a href='https://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More info</a>",
        "operationId": "getAssociatedResourcesForRecords",
        "parameters": [
          {
            "description": "Type of related resource. If none, all resources are returned.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RelatedItemType"
              },
              "default": []
            }
          },
          {
            "description": "Uuids of the metadatas you request the relations from.",
            "in": "query",
            "name": "uuid",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            }
          },
          {
            "description": "Use approved version or not",
            "example": true,
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RelatedResponse"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RelatedResponse"
                  }
                }
              }
            },
            "description": "Return the associated resources."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RelatedResponse"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RelatedResponse"
                  }
                }
              }
            },
            "description": "Operation not allowed. User needs to be able to view the resource."
          }
        },
        "summary": "Get record related resources for all requested metadatas",
        "tags": [
          "related"
        ]
      }
    },
    "/reports/datadownloads": {
      "get": {
        "operationId": "getReportDataDownloads",
        "parameters": [
          {
            "description": "From date of the metadata downloads",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "To date of the metadata downloads",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Metadata group(s)",
            "in": "query",
            "name": "groups",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of metadata file downloads."
          }
        },
        "summary": "Get list of metadata file downloads",
        "tags": [
          "records"
        ]
      }
    },
    "/reports/datauploads": {
      "get": {
        "operationId": "getReportDataUploads",
        "parameters": [
          {
            "description": "From date of the metadata uploads",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "To date of the metadata uploads",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Metadata group(s)",
            "in": "query",
            "name": "groups",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Get uploaded files to metadata records during a period.",
        "tags": [
          "records"
        ]
      }
    },
    "/reports/metadatainternal": {
      "get": {
        "operationId": "getReportInternalMetadata",
        "parameters": [
          {
            "description": "From date of metadata change date",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "To date of metadata change date",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Metadata group(s)",
            "in": "query",
            "name": "groups",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata not published during a period."
          }
        },
        "summary": "Get the metadata not published during a period.",
        "tags": [
          "records"
        ]
      }
    },
    "/reports/metadataupdated": {
      "get": {
        "operationId": "getReportUpdatedMetadata",
        "parameters": [
          {
            "description": "From date of metadata change date",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "To date of metadata change date",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Metadata group(s)",
            "in": "query",
            "name": "groups",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated metadata during a period."
          }
        },
        "summary": "Get the updated metadata during a period.",
        "tags": [
          "records"
        ]
      }
    },
    "/reports/users": {
      "get": {
        "operationId": "getActiveUsers",
        "parameters": [
          {
            "description": "From date of users login date",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "To date of users login date",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Group(s) for the users",
            "in": "query",
            "name": "groups",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users \"active\" during a time period."
          }
        },
        "summary": "Get the list of users \"active\" during a time period.",
        "tags": [
          "records"
        ]
      }
    },
    "/robots.txt": {
      "get": {
        "operationId": "getRobotsText",
        "responses": {
          "200": {
            "description": "robots.txt file for SEO."
          }
        },
        "summary": "robots.txt",
        "tags": [
          "site"
        ]
      }
    },
    "/search/records/_msearch": {
      "post": {
        "description": "The multi search API executes several searches from a single API request. See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html for search parameters, and https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html Query DSL.",
        "operationId": "msearch",
        "parameters": [
          {
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string",
              "default": "metadata"
            }
          },
          {
            "description": "Type of related resource. If none, no associated resource returned.",
            "in": "query",
            "name": "relatedType",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RelatedItemType"
              },
              "default": []
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": "{\"query\":{\"match\":{\"_id\":\"catalogue_uuid\"}}}",
              "schema": {
                "type": "string"
              }
            },
            "application/x-ndjson": {
              "example": "{\"query\":{\"match\":{\"_id\":\"catalogue_uuid\"}}}",
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "JSON request based on Elasticsearch API.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Search results."
          }
        },
        "summary": "Executes several searches with a Elasticsearch API request.",
        "tags": [
          "search"
        ]
      }
    },
    "/search/records/_search": {
      "post": {
        "description": "The search API execute a search query with a JSON request body. For more information see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html for search parameters, and https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html JSON Query DSL.",
        "operationId": "search",
        "parameters": [
          {
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string",
              "default": "s101"
            }
          },
          {
            "description": "Type of related resource. If none, no associated resource returned.",
            "in": "query",
            "name": "relatedType",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RelatedItemType"
              },
              "default": []
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": "{\"query\":{\"match\":{\"_id\":\"catalogue_uuid\"}}}",
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "JSON request based on Elasticsearch API.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Search results."
          }
        },
        "summary": "Execute a search query and get back search hits that match the query.",
        "tags": [
          "search"
        ]
      }
    },
    "/selections": {
      "get": {
        "operationId": "getSelectionsAndSize",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get current selections",
        "tags": [
          "selections"
        ]
      }
    },
    "/selections/{bucket}": {
      "delete": {
        "operationId": "clear",
        "parameters": [
          {
            "description": "Selection bucket name",
            "example": "metadata",
            "in": "path",
            "name": "bucket",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "One or more record UUIDs",
            "in": "query",
            "name": "uuid",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Clear selection or remove items",
        "tags": [
          "selections"
        ]
      },
      "get": {
        "operationId": "get",
        "parameters": [
          {
            "description": "Bucket name",
            "example": "metadata",
            "in": "path",
            "name": "bucket",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get current selection",
        "tags": [
          "selections"
        ]
      },
      "put": {
        "operationId": "add",
        "parameters": [
          {
            "description": "Bucket name",
            "example": "metadata",
            "in": "path",
            "name": "bucket",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "One or more record UUIDs. If null, select all in current search if bucket name is 'metadata' (TODO: remove this limitation?).",
            "in": "query",
            "name": "uuid",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Select one or more items",
        "tags": [
          "selections"
        ]
      }
    },
    "/site": {
      "get": {
        "operationId": "getSiteOrPortalDescription",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "system/site/name": "My GeoNetwork catalogue",
                  "system/site/organization": "My organization",
                  "system/site/siteId": "33bc8c82-7ac2-49b6-a22b-af7376dbcf10",
                  "system/platform/version": "4.4.7",
                  "system/platform/subVersion": "SNAPSHOT",
                  "node/default": "true",
                  "node/id": "33bc8c82-7ac2-49b6-a22b-af7376dbcf10",
                  "node/name": "My GeoNetwork catalogue",
                  "microservices/enabled": false
                },
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Site description."
          }
        },
        "summary": "Get site (or portal) description",
        "tags": [
          "site"
        ]
      }
    },
    "/site/index": {
      "put": {
        "operationId": "indexSite",
        "parameters": [
          {
            "description": "Drop and recreate index",
            "in": "query",
            "name": "reset",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Asynchronous mode (only on all records. ie. no selection bucket)",
            "in": "query",
            "name": "asynchronous",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "Index. By default only remove record index.",
            "in": "query",
            "name": "indices",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "records"
              ]
            }
          },
          {
            "description": "Selection bucket name",
            "in": "query",
            "name": "bucket",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Index",
        "tags": [
          "site"
        ]
      }
    },
    "/site/index/commit": {
      "get": {
        "operationId": "indexCommit",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Index commit",
        "tags": [
          "site"
        ]
      },
      "put": {
        "description": "May be used when indexing task is hanging.",
        "operationId": "commitIndexChanges",
        "responses": {
          "201": {
            "description": "Changes committed."
          }
        },
        "summary": "Force to commit pending documents in index.",
        "tags": [
          "site"
        ]
      }
    },
    "/site/index/status": {
      "get": {
        "operationId": "indexStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Index status",
        "tags": [
          "site"
        ]
      }
    },
    "/site/index/synchronized": {
      "get": {
        "operationId": "indexAndDbSynchronizationStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Index synchronized with database",
        "tags": [
          "site"
        ]
      }
    },
    "/site/indexing": {
      "get": {
        "operationId": "isIndexing",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Is indexing?",
        "tags": [
          "site"
        ]
      }
    },
    "/site/info": {
      "get": {
        "operationId": "getInformation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteInformation"
                }
              }
            },
            "description": "Site information."
          }
        },
        "summary": "Get site informations",
        "tags": [
          "site"
        ]
      }
    },
    "/site/info/build": {
      "get": {
        "description": "To know when and how this version of the application was built.",
        "operationId": "getSystemInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                }
              }
            },
            "description": "Build info."
          }
        },
        "summary": "Get build details",
        "tags": [
          "site"
        ]
      }
    },
    "/site/info/isCasEnabled": {
      "get": {
        "operationId": "isCasEnabled",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Is CAS enabled?",
        "tags": [
          "site"
        ]
      }
    },
    "/site/info/notificationLevels": {
      "get": {
        "operationId": "getNotificationLevel",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "statusUserOwner",
                      "catalogueAdministrator",
                      "catalogueProfileAdministrator",
                      "catalogueProfileUserAdmin",
                      "catalogueProfileReviewer",
                      "catalogueProfileEditor",
                      "catalogueProfileRegisteredUser",
                      "catalogueProfileGuest",
                      "recordProfileReviewer",
                      "recordUserAuthor",
                      "recordGroupEmail"
                    ]
                  }
                }
              }
            },
            "description": "List of notification levels."
          }
        },
        "summary": "Get notification levels",
        "tags": [
          "site"
        ]
      }
    },
    "/site/info/proxy": {
      "get": {
        "description": "Get the proxy configuration.",
        "operationId": "getProxyConfiguration",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyConfiguration"
                }
              }
            },
            "description": "Proxy configuration."
          }
        },
        "summary": "Get proxy configuration details",
        "tags": [
          "site"
        ]
      }
    },
    "/site/info/readonly": {
      "get": {
        "operationId": "isReadOnly",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Is in read-only mode?",
        "tags": [
          "site"
        ]
      }
    },
    "/site/info/staging/{profile}": {
      "put": {
        "description": "TODO: Needs doc",
        "operationId": "updateStagingProfile",
        "parameters": [
          {
            "in": "path",
            "name": "profile",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "testing",
                "development",
                "production"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Staging profile saved."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Update staging profile",
        "tags": [
          "site"
        ]
      }
    },
    "/site/info/transforms": {
      "get": {
        "description": "XSL transformations may be applied while importing or harvesting records.",
        "operationId": "getXslTransformations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "XSLT available."
          }
        },
        "summary": "Get XSL tranformations available",
        "tags": [
          "site"
        ]
      }
    },
    "/site/logging": {
      "get": {
        "operationId": "getLogFiles",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogFileResponse"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get log files",
        "tags": [
          "site"
        ]
      }
    },
    "/site/logging/activity": {
      "get": {
        "operationId": "getLastActivity",
        "parameters": [
          {
            "description": "Number of lines to return",
            "in": "query",
            "name": "lines",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 2000
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get last activity",
        "tags": [
          "site"
        ]
      }
    },
    "/site/logging/activity/zip": {
      "get": {
        "operationId": "getLastActivityInAZip",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Get last activity in a ZIP",
        "tags": [
          "site"
        ]
      }
    },
    "/site/logo": {
      "put": {
        "description": "Logos are stored in the data directory resources/images/harvesting as PNG or GIF images. When a logo is assigned to the catalog, a new image is created in images/logos/<catalogUuid>.png.",
        "operationId": "setLogo",
        "parameters": [
          {
            "description": "Logo to use for the catalog",
            "in": "query",
            "name": "file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Create favicon too",
            "in": "query",
            "name": "asFavicon",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Logo set."
          },
          "403": {
            "description": "Operation not allowed. Only UserAdmins can access it."
          }
        },
        "summary": "Set catalog logo",
        "tags": [
          "site"
        ]
      }
    },
    "/site/settings": {
      "get": {
        "description": "Return public settings for anonymous users, internals are allowed for authenticated.",
        "operationId": "getSettingsSet",
        "parameters": [
          {
            "description": "Setting set. A common set of settings to retrieve.",
            "in": "query",
            "name": "set",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "INSPIRE",
                  "CSW",
                  "HARVESTER",
                  "USER_GROUP_ONLY",
                  "AUTH",
                  "READ_ONLY",
                  "INDEX",
                  "SYSTEMINFO",
                  "STAGING_PROFILE",
                  "TYPE"
                ]
              }
            }
          },
          {
            "description": "Setting key",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsListResponse"
                }
              }
            },
            "description": "Settings."
          }
        },
        "summary": "Get settings",
        "tags": [
          "site"
        ]
      },
      "post": {
        "operationId": "saveSettings",
        "parameters": [
          {
            "in": "query",
            "name": "allRequestParams",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Settings saved."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Save settings",
        "tags": [
          "site"
        ]
      }
    },
    "/site/settings/details": {
      "get": {
        "description": "Provides also setting properties.",
        "operationId": "getSettingsDetails",
        "parameters": [
          {
            "description": "Setting set. A common set of settings to retrieve.",
            "in": "query",
            "name": "set",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "INSPIRE",
                  "CSW",
                  "HARVESTER",
                  "USER_GROUP_ONLY",
                  "AUTH",
                  "READ_ONLY",
                  "INDEX",
                  "SYSTEMINFO",
                  "STAGING_PROFILE",
                  "TYPE"
                ]
              }
            }
          },
          {
            "description": "Setting key",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Setting"
                  }
                }
              }
            },
            "description": "Settings with details."
          }
        },
        "summary": "Get settings with details",
        "tags": [
          "site"
        ]
      }
    },
    "/site/userfeedback": {
      "post": {
        "operationId": "sendApplicationUserFeedback",
        "parameters": [
          {
            "description": "Recaptcha validation key.",
            "in": "query",
            "name": "recaptcha",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "User name.",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User organisation.",
            "in": "query",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User email address.",
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comment or question.",
            "in": "query",
            "name": "comments",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Send an email to catalogue administrator with feedback about the application",
        "tags": [
          "site"
        ]
      }
    },
    "/sitemap": {
      "get": {
        "operationId": "getSitemap",
        "parameters": [
          {
            "description": "Format (xml or html).",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string",
              "default": "html"
            }
          },
          {
            "description": "page.",
            "in": "query",
            "name": "doc",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site map."
          }
        },
        "summary": "Get sitemap",
        "tags": [
          "site"
        ]
      }
    },
    "/sources": {
      "get": {
        "description": "Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.",
        "operationId": "getSources",
        "parameters": [
          {
            "description": "Group owner of the source (only applies to subportal).",
            "in": "query",
            "name": "group",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Source"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "List of source catalogues."
          }
        },
        "summary": "Get all sources",
        "tags": [
          "sources"
        ]
      },
      "put": {
        "operationId": "addSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Source created."
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Add a source",
        "tags": [
          "sources"
        ]
      }
    },
    "/sources/{sourceIdentifier}": {
      "delete": {
        "operationId": "deleteSource",
        "parameters": [
          {
            "description": "Source identifier",
            "in": "path",
            "name": "sourceIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Source deleted."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Remove a source",
        "tags": [
          "sources"
        ]
      },
      "put": {
        "operationId": "updateSource",
        "parameters": [
          {
            "description": "Source identifier",
            "in": "path",
            "name": "sourceIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Source updated."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Source not found."
          }
        },
        "summary": "Update a source",
        "tags": [
          "sources"
        ]
      }
    },
    "/sources/{type}": {
      "get": {
        "description": "Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.",
        "operationId": "getSourcesByType",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "portal",
                "subportal",
                "externalportal",
                "harvester"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Source"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get all sources by type",
        "tags": [
          "sources"
        ]
      }
    },
    "/standards": {
      "get": {
        "operationId": "getStandardConfigurations",
        "responses": {
          "200": {
            "content": {},
            "description": "List of standards."
          }
        },
        "summary": "Get standards",
        "tags": [
          "standards"
        ]
      }
    },
    "/standards/batchconfiguration": {
      "get": {
        "operationId": "getConfigurations",
        "parameters": [
          {
            "description": "Schema identifiers",
            "example": "iso19139",
            "in": "query",
            "name": "schema",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/BatchEditing"
                  }
                }
              }
            },
            "description": "Batch editor configuration."
          }
        },
        "summary": "Get batch editor configuration for standards",
        "tags": [
          "standards"
        ]
      }
    },
    "/standards/reload": {
      "get": {
        "operationId": "reloadSchema",
        "responses": {
          "200": {
            "description": "Standards reloaded."
          }
        },
        "summary": "Reload standards",
        "tags": [
          "standards"
        ]
      }
    },
    "/standards/{schema}/batchconfiguration": {
      "get": {
        "operationId": "getConfiguration",
        "parameters": [
          {
            "description": "Schema identifier",
            "example": "iso19139",
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/BatchEditing"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get batch editor configuration for a standard",
        "tags": [
          "standards"
        ]
      }
    },
    "/standards/{schema}/codelists": {
      "get": {
        "description": "All translations are combined in the same object. No distinction by codelist. This is useful if you need lots of codelists terms to be loaded.",
        "operationId": "getCodelistsTranslations",
        "parameters": [
          {
            "description": "Schema identifier",
            "example": "iso19139",
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Codelist element name or alias",
            "in": "query",
            "name": "codelist",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get multiple codelist translations",
        "tags": [
          "standards"
        ]
      }
    },
    "/standards/{schema}/codelists/{codelist}": {
      "get": {
        "operationId": "getSchemaTranslations",
        "parameters": [
          {
            "description": "Schema identifier",
            "example": "iso19139",
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Codelist element name or alias",
            "in": "path",
            "name": "codelist",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parent",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "displayIf",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "xpath",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "isoType",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get codelist translations",
        "tags": [
          "standards"
        ]
      }
    },
    "/standards/{schema}/codelists/{codelist}/details": {
      "get": {
        "operationId": "getSchemaCodelistsWithDetails",
        "parameters": [
          {
            "description": "Schema identifier",
            "example": "iso19139",
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Codelist element name or alias",
            "in": "path",
            "name": "codelist",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Parent name with namespace which may indicate a more precise label as defined in context attribute.",
            "in": "query",
            "name": "parent",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Display if condition as defined in the codelist.xml file. Allows to select a more precise codelist when more than one is defined for same name.",
            "in": "query",
            "name": "displayIf",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "XPath of the element to target which may indicate a more precise label as defined in context attribute.",
            "in": "query",
            "name": "xpath",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ISO type of the element to target which may indicate a more precise label as defined in context attribute. (Same as context. TODO: Deprecate ?)",
            "in": "query",
            "name": "isoType",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Codelist"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Codelist"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get codelist details",
        "tags": [
          "standards"
        ]
      }
    },
    "/standards/{schema}/descriptors/{element}/details": {
      "get": {
        "operationId": "getElementDetails",
        "parameters": [
          {
            "description": "Schema identifier",
            "example": "iso19139",
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Descriptor name",
            "in": "path",
            "name": "element",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parent",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "displayIf",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "xpath",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "isoType",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Element"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Element"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get descriptor details",
        "tags": [
          "standards"
        ]
      }
    },
    "/standards/{schema}/editor/associatedpanel/config/{name}.json": {
      "get": {
        "operationId": "getEditorAssociatedPanelConfiguration",
        "parameters": [
          {
            "description": "Schema identifier",
            "example": "iso19139",
            "in": "path",
            "name": "schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Configuration identifier",
            "example": "default",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get editor associated resources panel configuration",
        "tags": [
          "standards"
        ]
      }
    },
    "/status": {
      "delete": {
        "operationId": "deleteAllHistoryAndStatus",
        "responses": {
          "204": {
            "description": "Status removed."
          },
          "403": {
            "description": "Operation not allowed. Only Administrators can access it."
          }
        },
        "summary": "Delete all record history and status",
        "tags": [
          "status"
        ]
      },
      "get": {
        "operationId": "getStatusList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusValue"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get status",
        "tags": [
          "status"
        ]
      }
    },
    "/status/{type}": {
      "get": {
        "operationId": "getStatusByType",
        "parameters": [
          {
            "description": "Type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "workflow",
                "task",
                "event"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusValue"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get status by type",
        "tags": [
          "status"
        ]
      }
    },
    "/tags": {
      "get": {
        "operationId": "getTags",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataCategory"
                  }
                }
              }
            },
            "description": "List of tags."
          }
        },
        "summary": "Get tags",
        "tags": [
          "tags"
        ]
      },
      "put": {
        "description": "If labels are not defined, a default label is created with the category name for all languages.",
        "operationId": "putTag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Tag created. Return the new tag identifier."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          }
        },
        "summary": "Create a tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{tagIdentifier}": {
      "delete": {
        "operationId": "deleteTag",
        "parameters": [
          {
            "description": "Tag identifier",
            "in": "path",
            "name": "tagIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tag removed."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          }
        },
        "summary": "Remove a tag",
        "tags": [
          "tags"
        ]
      },
      "get": {
        "operationId": "getTag",
        "parameters": [
          {
            "description": "Tag identifier",
            "in": "path",
            "name": "tagIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataCategory"
                }
              }
            },
            "description": "Tag details."
          }
        },
        "summary": "Get a tag",
        "tags": [
          "tags"
        ]
      },
      "put": {
        "operationId": "updateTag",
        "parameters": [
          {
            "description": "Tag identifier",
            "in": "path",
            "name": "tagIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Tag updated."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          }
        },
        "summary": "Update a tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tools/mail/test": {
      "get": {
        "description": "Send an email to the catalog feedback email.",
        "operationId": "testMailConfiguration",
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Test mail configuration",
        "tags": [
          "tools"
        ]
      }
    },
    "/tools/migration/steps/{stepName}": {
      "put": {
        "operationId": "callStep",
        "parameters": [
          {
            "description": "Class name to execute corresponding to a migration step. See DatabaseMigrationTask.",
            "example": "org.fao.geonet.api.records.attachments.MetadataResourceDatabaseMigration",
            "in": "path",
            "name": "stepName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Call a migration step",
        "tags": [
          "tools"
        ]
      }
    },
    "/tools/ogc/filter": {
      "post": {
        "description": "From a JSON filter, return an OGC filter expression.",
        "operationId": "buildFilter",
        "parameters": [
          {
            "description": "The filters in JSON",
            "in": "query",
            "name": "filters",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Generate an OGC filter",
        "tags": [
          "tools"
        ]
      }
    },
    "/tools/ogc/sld": {
      "delete": {
        "description": "Clean all SLD generated previously",
        "operationId": "deteleSLD",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove all SLD files",
        "tags": [
          "tools"
        ]
      },
      "get": {
        "operationId": "getSLD",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get the list of SLD available",
        "tags": [
          "tools"
        ]
      },
      "post": {
        "description": "Get the current SLD for the requested layers, add new filters in, save the SLD and return the new SLD URL.",
        "operationId": "buildSLD",
        "parameters": [
          {
            "description": "The WMS server URL",
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The layers",
            "in": "query",
            "name": "layers",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filters in JSON",
            "in": "query",
            "name": "filters",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Generate a SLD with a new filter",
        "tags": [
          "tools"
        ]
      }
    },
    "/tools/ogc/sld/{id}.{extension}": {
      "get": {
        "operationId": "downloadSLD",
        "parameters": [
          {
            "description": "The SLD identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "extension",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Download a SLD",
        "tags": [
          "tools"
        ]
      }
    },
    "/translationproviders": {
      "get": {
        "operationId": "getTranslationProviderNames",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "List of translation provider names."
          }
        },
        "summary": "Retrieve the list of translation provider.",
        "tags": [
          "translationproviders"
        ]
      }
    },
    "/ui": {
      "get": {
        "operationId": "getUiConfigurations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UiSetting"
                  }
                }
              }
            },
            "description": "List of configuration."
          }
        },
        "summary": "Get UI configuration",
        "tags": [
          "ui"
        ]
      },
      "put": {
        "operationId": "putUiConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UiSetting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "UI configuration created. Return the new UI configuration identifier."
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          }
        },
        "summary": "Create a UI configuration",
        "tags": [
          "ui"
        ]
      }
    },
    "/ui/{uiIdentifier}": {
      "delete": {
        "operationId": "deleteUiConfiguration",
        "parameters": [
          {
            "description": "UI configuration identifier",
            "in": "path",
            "name": "uiIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "UI Configuration removed."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "UI Configuration not found."
          }
        },
        "summary": "Remove a UI Configuration",
        "tags": [
          "ui"
        ]
      },
      "get": {
        "operationId": "getUiConfiguration",
        "parameters": [
          {
            "description": "UI identifier",
            "in": "path",
            "name": "uiIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UiSetting"
                }
              }
            },
            "description": "UI configuration."
          }
        },
        "summary": "Get a UI configuration",
        "tags": [
          "ui"
        ]
      },
      "put": {
        "operationId": "updateUiConfiguration",
        "parameters": [
          {
            "description": "UI configuration identifier",
            "in": "path",
            "name": "uiIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UiSetting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "UI configuration updated."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          }
        },
        "summary": "Update a UI configuration",
        "tags": [
          "ui"
        ]
      }
    },
    "/user/actions/forgot-password": {
      "put": {
        "description": "An email is sent to the requested user with a link to reset his password. User MUST have an email to get the link. LDAP users will not be able to retrieve their password using this service.",
        "operationId": "sendPasswordByEmail",
        "parameters": [
          {
            "description": "The user name",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Send user password reminder by email",
        "tags": [
          "users"
        ]
      }
    },
    "/user/actions/register": {
      "put": {
        "description": "User is created with a registered user profile. username field is ignored and the email is used as username. Password is sent by email. Catalog administrator is also notified.",
        "operationId": "registerUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegisterDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Create user account",
        "tags": [
          "users"
        ]
      }
    },
    "/user/{username}": {
      "patch": {
        "description": "Get a valid changekey by email first and then update your password.",
        "operationId": "updatePassword",
        "parameters": [
          {
            "description": "The user name",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordUpdateParameter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Update user password",
        "tags": [
          "users"
        ]
      }
    },
    "/userfeedback": {
      "get": {
        "description": " This list will include also the draft user feedback if the client is logged as reviewer.",
        "operationId": "getUserComments",
        "parameters": [
          {
            "description": "Metadata record UUID.",
            "in": "query",
            "name": "metadataUuid",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "Maximum number of feedback to return.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserFeedbackDTO"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Finds a list of user feedback records. ",
        "tags": [
          "userfeedback"
        ]
      },
      "post": {
        "description": "Creates a user feedback in draft status if the user is not logged in.",
        "operationId": "newUserFeedback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFeedbackDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Created"
          }
        },
        "summary": "Creates a user feedback",
        "tags": [
          "userfeedback"
        ]
      }
    },
    "/userfeedback/ratingcriteria": {
      "get": {
        "operationId": "getRatingCriteria",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatingCriteria"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get list of rating criteria",
        "tags": [
          "userfeedback"
        ]
      }
    },
    "/userfeedback/{uuid}": {
      "delete": {
        "description": "Removes a user feedback",
        "operationId": "deleteUserFeedback",
        "parameters": [
          {
            "description": "User feedback UUID.",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User feedback removed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Reviewvers can access it."
          }
        },
        "summary": "Removes a user feedback",
        "tags": [
          "userfeedback"
        ]
      },
      "get": {
        "operationId": "getUserComment",
        "parameters": [
          {
            "description": "User feedback UUID.",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFeedbackDTO"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Finds a specific user feedback",
        "tags": [
          "userfeedback"
        ]
      }
    },
    "/userfeedback/{uuid}/publish": {
      "get": {
        "description": "For reviewers",
        "operationId": "publishFeedback",
        "parameters": [
          {
            "description": "User feedback UUID.",
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User feedback published."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only Reviewvers can access it."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Resource not found."
          }
        },
        "summary": "Publishes a feedback",
        "tags": [
          "userfeedback"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "getUsers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get users",
        "tags": [
          "users"
        ]
      },
      "put": {
        "description": "Creates a catalog user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Creates a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/groups": {
      "get": {
        "operationId": "retrieveAllUserGroups",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupsResponse"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Retrieve all user groups",
        "tags": [
          "users"
        ]
      }
    },
    "/users/owners": {
      "get": {
        "description": "Return users who actually owns one or more records.",
        "operationId": "getRecordOwners",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OwnerResponse"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get owners",
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "saveOwners",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Transfer privileges",
        "tags": [
          "users"
        ]
      }
    },
    "/users/properties/{property}": {
      "get": {
        "operationId": "checkUserPropertyExist",
        "parameters": [
          {
            "description": "The user property to check",
            "in": "path",
            "name": "property",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The value to search",
            "in": "query",
            "name": "exist",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONTINUE",
                    "SWITCHING_PROTOCOLS",
                    "PROCESSING",
                    "CHECKPOINT",
                    "OK",
                    "CREATED",
                    "ACCEPTED",
                    "NON_AUTHORITATIVE_INFORMATION",
                    "NO_CONTENT",
                    "RESET_CONTENT",
                    "PARTIAL_CONTENT",
                    "MULTI_STATUS",
                    "ALREADY_REPORTED",
                    "IM_USED",
                    "MULTIPLE_CHOICES",
                    "MOVED_PERMANENTLY",
                    "FOUND",
                    "MOVED_TEMPORARILY",
                    "SEE_OTHER",
                    "NOT_MODIFIED",
                    "USE_PROXY",
                    "TEMPORARY_REDIRECT",
                    "PERMANENT_REDIRECT",
                    "BAD_REQUEST",
                    "UNAUTHORIZED",
                    "PAYMENT_REQUIRED",
                    "FORBIDDEN",
                    "NOT_FOUND",
                    "METHOD_NOT_ALLOWED",
                    "NOT_ACCEPTABLE",
                    "PROXY_AUTHENTICATION_REQUIRED",
                    "REQUEST_TIMEOUT",
                    "CONFLICT",
                    "GONE",
                    "LENGTH_REQUIRED",
                    "PRECONDITION_FAILED",
                    "PAYLOAD_TOO_LARGE",
                    "REQUEST_ENTITY_TOO_LARGE",
                    "URI_TOO_LONG",
                    "REQUEST_URI_TOO_LONG",
                    "UNSUPPORTED_MEDIA_TYPE",
                    "REQUESTED_RANGE_NOT_SATISFIABLE",
                    "EXPECTATION_FAILED",
                    "I_AM_A_TEAPOT",
                    "INSUFFICIENT_SPACE_ON_RESOURCE",
                    "METHOD_FAILURE",
                    "DESTINATION_LOCKED",
                    "UNPROCESSABLE_ENTITY",
                    "LOCKED",
                    "FAILED_DEPENDENCY",
                    "TOO_EARLY",
                    "UPGRADE_REQUIRED",
                    "PRECONDITION_REQUIRED",
                    "TOO_MANY_REQUESTS",
                    "REQUEST_HEADER_FIELDS_TOO_LARGE",
                    "UNAVAILABLE_FOR_LEGAL_REASONS",
                    "INTERNAL_SERVER_ERROR",
                    "NOT_IMPLEMENTED",
                    "BAD_GATEWAY",
                    "SERVICE_UNAVAILABLE",
                    "GATEWAY_TIMEOUT",
                    "HTTP_VERSION_NOT_SUPPORTED",
                    "VARIANT_ALSO_NEGOTIATES",
                    "INSUFFICIENT_STORAGE",
                    "LOOP_DETECTED",
                    "BANDWIDTH_LIMIT_EXCEEDED",
                    "NOT_EXTENDED",
                    "NETWORK_AUTHENTICATION_REQUIRED"
                  ]
                }
              }
            },
            "description": "Property does not exist."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONTINUE",
                    "SWITCHING_PROTOCOLS",
                    "PROCESSING",
                    "CHECKPOINT",
                    "OK",
                    "CREATED",
                    "ACCEPTED",
                    "NON_AUTHORITATIVE_INFORMATION",
                    "NO_CONTENT",
                    "RESET_CONTENT",
                    "PARTIAL_CONTENT",
                    "MULTI_STATUS",
                    "ALREADY_REPORTED",
                    "IM_USED",
                    "MULTIPLE_CHOICES",
                    "MOVED_PERMANENTLY",
                    "FOUND",
                    "MOVED_TEMPORARILY",
                    "SEE_OTHER",
                    "NOT_MODIFIED",
                    "USE_PROXY",
                    "TEMPORARY_REDIRECT",
                    "PERMANENT_REDIRECT",
                    "BAD_REQUEST",
                    "UNAUTHORIZED",
                    "PAYMENT_REQUIRED",
                    "FORBIDDEN",
                    "NOT_FOUND",
                    "METHOD_NOT_ALLOWED",
                    "NOT_ACCEPTABLE",
                    "PROXY_AUTHENTICATION_REQUIRED",
                    "REQUEST_TIMEOUT",
                    "CONFLICT",
                    "GONE",
                    "LENGTH_REQUIRED",
                    "PRECONDITION_FAILED",
                    "PAYLOAD_TOO_LARGE",
                    "REQUEST_ENTITY_TOO_LARGE",
                    "URI_TOO_LONG",
                    "REQUEST_URI_TOO_LONG",
                    "UNSUPPORTED_MEDIA_TYPE",
                    "REQUESTED_RANGE_NOT_SATISFIABLE",
                    "EXPECTATION_FAILED",
                    "I_AM_A_TEAPOT",
                    "INSUFFICIENT_SPACE_ON_RESOURCE",
                    "METHOD_FAILURE",
                    "DESTINATION_LOCKED",
                    "UNPROCESSABLE_ENTITY",
                    "LOCKED",
                    "FAILED_DEPENDENCY",
                    "TOO_EARLY",
                    "UPGRADE_REQUIRED",
                    "PRECONDITION_REQUIRED",
                    "TOO_MANY_REQUESTS",
                    "REQUEST_HEADER_FIELDS_TOO_LARGE",
                    "UNAVAILABLE_FOR_LEGAL_REASONS",
                    "INTERNAL_SERVER_ERROR",
                    "NOT_IMPLEMENTED",
                    "BAD_GATEWAY",
                    "SERVICE_UNAVAILABLE",
                    "GATEWAY_TIMEOUT",
                    "HTTP_VERSION_NOT_SUPPORTED",
                    "VARIANT_ALSO_NEGOTIATES",
                    "INSUFFICIENT_STORAGE",
                    "LOOP_DETECTED",
                    "BANDWIDTH_LIMIT_EXCEEDED",
                    "NOT_EXTENDED",
                    "NETWORK_AUTHENTICATION_REQUIRED"
                  ]
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONTINUE",
                    "SWITCHING_PROTOCOLS",
                    "PROCESSING",
                    "CHECKPOINT",
                    "OK",
                    "CREATED",
                    "ACCEPTED",
                    "NON_AUTHORITATIVE_INFORMATION",
                    "NO_CONTENT",
                    "RESET_CONTENT",
                    "PARTIAL_CONTENT",
                    "MULTI_STATUS",
                    "ALREADY_REPORTED",
                    "IM_USED",
                    "MULTIPLE_CHOICES",
                    "MOVED_PERMANENTLY",
                    "FOUND",
                    "MOVED_TEMPORARILY",
                    "SEE_OTHER",
                    "NOT_MODIFIED",
                    "USE_PROXY",
                    "TEMPORARY_REDIRECT",
                    "PERMANENT_REDIRECT",
                    "BAD_REQUEST",
                    "UNAUTHORIZED",
                    "PAYMENT_REQUIRED",
                    "FORBIDDEN",
                    "NOT_FOUND",
                    "METHOD_NOT_ALLOWED",
                    "NOT_ACCEPTABLE",
                    "PROXY_AUTHENTICATION_REQUIRED",
                    "REQUEST_TIMEOUT",
                    "CONFLICT",
                    "GONE",
                    "LENGTH_REQUIRED",
                    "PRECONDITION_FAILED",
                    "PAYLOAD_TOO_LARGE",
                    "REQUEST_ENTITY_TOO_LARGE",
                    "URI_TOO_LONG",
                    "REQUEST_URI_TOO_LONG",
                    "UNSUPPORTED_MEDIA_TYPE",
                    "REQUESTED_RANGE_NOT_SATISFIABLE",
                    "EXPECTATION_FAILED",
                    "I_AM_A_TEAPOT",
                    "INSUFFICIENT_SPACE_ON_RESOURCE",
                    "METHOD_FAILURE",
                    "DESTINATION_LOCKED",
                    "UNPROCESSABLE_ENTITY",
                    "LOCKED",
                    "FAILED_DEPENDENCY",
                    "TOO_EARLY",
                    "UPGRADE_REQUIRED",
                    "PRECONDITION_REQUIRED",
                    "TOO_MANY_REQUESTS",
                    "REQUEST_HEADER_FIELDS_TOO_LARGE",
                    "UNAVAILABLE_FOR_LEGAL_REASONS",
                    "INTERNAL_SERVER_ERROR",
                    "NOT_IMPLEMENTED",
                    "BAD_GATEWAY",
                    "SERVICE_UNAVAILABLE",
                    "GATEWAY_TIMEOUT",
                    "HTTP_VERSION_NOT_SUPPORTED",
                    "VARIANT_ALSO_NEGOTIATES",
                    "INSUFFICIENT_STORAGE",
                    "LOOP_DETECTED",
                    "BANDWIDTH_LIMIT_EXCEEDED",
                    "NOT_EXTENDED",
                    "NETWORK_AUTHENTICATION_REQUIRED"
                  ]
                }
              }
            },
            "description": "A property with that value already exist."
          }
        },
        "summary": "Check if a user property already exist",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{userIdentifier}": {
      "delete": {
        "description": "Deletes a catalog user by identifier.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "User identifier.",
            "in": "path",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Delete a user",
        "tags": [
          "users"
        ]
      },
      "get": {
        "operationId": "getUser",
        "parameters": [
          {
            "description": "User identifier.",
            "in": "path",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get user",
        "tags": [
          "users"
        ]
      },
      "put": {
        "description": "Updates a catalog user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "User identifier.",
            "in": "path",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Update a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{userIdentifier}.png": {
      "get": {
        "operationId": "getUserIdenticon",
        "parameters": [
          {
            "description": "User identifier.",
            "in": "path",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 18
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Get user identicon",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{userIdentifier}/actions/forget-password": {
      "post": {
        "description": "Resets the user password.",
        "operationId": "resetUserPassword",
        "parameters": [
          {
            "description": "User identifier.",
            "in": "path",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Resets user password",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{userIdentifier}/groups": {
      "get": {
        "description": "Retrieve the user groups.",
        "operationId": "retrieveUserGroups",
        "parameters": [
          {
            "description": "User identifier.",
            "in": "path",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Retrieve user groups",
        "tags": [
          "users"
        ]
      }
    },
    "/usersearches": {
      "get": {
        "operationId": "getUserCustomSearches",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSearchDto"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get user custom searches",
        "tags": [
          "usersearches"
        ]
      },
      "put": {
        "description": "Creates a user search.",
        "operationId": "createUserCustomSearch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSearchDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "User search created."
          }
        },
        "summary": "Creates a user search",
        "tags": [
          "usersearches"
        ]
      }
    },
    "/usersearches/all": {
      "get": {
        "operationId": "getAllUserCustomSearches",
        "parameters": [
          {
            "description": "Featured type search.",
            "in": "query",
            "name": "featuredType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "HOME",
                "EDITOR_BOARD"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSearchDto"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get user custom searches for all users (no paginated)",
        "tags": [
          "usersearches"
        ]
      }
    },
    "/usersearches/allpaginated": {
      "get": {
        "operationId": "getAllUserCustomSearchesPage",
        "parameters": [
          {
            "description": "Featured  type search.",
            "in": "query",
            "name": "featuredType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "HOME",
                "EDITOR_BOARD"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "From page",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "Number of records to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserSearchResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get user custom searches for all users (paginated)",
        "tags": [
          "usersearches"
        ]
      }
    },
    "/usersearches/featured": {
      "get": {
        "operationId": "getFeaturedUserCustomSearches",
        "parameters": [
          {
            "description": "Number of records to return",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "HOME",
                "EDITOR_BOARD"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSearchDto"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get featured user custom searches",
        "tags": [
          "usersearches"
        ]
      }
    },
    "/usersearches/{searchIdentifier}": {
      "delete": {
        "description": "Deletes a user search by identifier.",
        "operationId": "deleteUserCustomSerach",
        "parameters": [
          {
            "description": "Search identifier.",
            "in": "path",
            "name": "searchIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Delete a user search",
        "tags": [
          "usersearches"
        ]
      },
      "get": {
        "operationId": "getUserCustomSearch",
        "parameters": [
          {
            "description": "User search identifier",
            "in": "path",
            "name": "searchIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSearchDto"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get custom search",
        "tags": [
          "usersearches"
        ]
      },
      "put": {
        "operationId": "updateCustomUserSearch",
        "parameters": [
          {
            "description": "User search identifier",
            "in": "path",
            "name": "searchIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSearchDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User search  updated."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "summary": "Update a user search",
        "tags": [
          "usersearches"
        ]
      }
    },
    "/userselections": {
      "get": {
        "operationId": "getSelectionList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Selection"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get list of user selection sets",
        "tags": [
          "userselections"
        ]
      },
      "put": {
        "operationId": "createPersistentSelectionType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Selection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Selection created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A selection with that id or name already exist."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          }
        },
        "summary": "Add a user selection set",
        "tags": [
          "userselections"
        ]
      }
    },
    "/userselections/{selectionIdentifier}": {
      "delete": {
        "operationId": "deleteUserSelection",
        "parameters": [
          {
            "description": "Selection identifier",
            "in": "path",
            "name": "selectionIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Selection removed."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Selection not found."
          }
        },
        "summary": "Remove a user selection set",
        "tags": [
          "userselections"
        ]
      },
      "put": {
        "operationId": "updateUserSelection",
        "parameters": [
          {
            "description": "Selection identifier",
            "in": "path",
            "name": "selectionIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Selection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Selection updated."
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Selection not found."
          }
        },
        "summary": "Update a user selection set",
        "tags": [
          "userselections"
        ]
      }
    },
    "/userselections/{selectionIdentifier}/{userIdentifier}": {
      "delete": {
        "operationId": "deleteFromUserSelection",
        "parameters": [
          {
            "description": "Selection identifier",
            "in": "path",
            "name": "selectionIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User identifier",
            "in": "path",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "One or more record UUIDs. If null, remove all.",
            "in": "query",
            "name": "uuid",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Items removed from a set."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Selection or user not found."
          }
        },
        "summary": "Remove items to a user selection set",
        "tags": [
          "userselections"
        ]
      },
      "get": {
        "operationId": "getSelectionRecords",
        "parameters": [
          {
            "description": "Selection identifier",
            "in": "path",
            "name": "selectionIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User identifier",
            "in": "path",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get record in a user selection set",
        "tags": [
          "userselections"
        ]
      },
      "put": {
        "operationId": "addToUserSelection",
        "parameters": [
          {
            "description": "Selection identifier",
            "in": "path",
            "name": "selectionIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "User identifier",
            "in": "path",
            "name": "userIdentifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "One or more record UUIDs.",
            "in": "query",
            "name": "uuid",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Records added to selection set."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Operation not allowed. Only UserAdmins can access it."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Selection or user or at least one UUID not found."
          }
        },
        "summary": "Add items to a user selection set",
        "tags": [
          "userselections"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        }
      },
      "AnonymousDoiServer": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "landingPageTemplate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "publicUrl": {
            "type": "string"
          },
          "publicationGroups": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "AnonymousMapserver": {
        "type": "object",
        "properties": {
          "configurl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "namespacePrefix": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "pushStyleInWorkspace": {
            "$ref": "#/components/schemas/MapServer"
          },
          "pushStyleInWorkspace_JpaWorkaround": {
            "type": "string",
            "writeOnly": true
          },
          "stylerurl": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "wcsurl": {
            "type": "string"
          },
          "wfsurl": {
            "type": "string"
          },
          "wmsurl": {
            "type": "string"
          }
        }
      },
      "Associated": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedSiblingMetadataItem"
            }
          }
        }
      },
      "AssociatedRecord": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_source": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "origin": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AssociatedSiblingMetadataItem": {
        "required": [
          "description",
          "mdType",
          "title"
        ],
        "type": "object",
        "properties": {
          "agg_isDescriptionOf": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agg_isTemporalStatOf": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agg_largerWorkCitation": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idx": {
            "type": "string"
          },
          "mdType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "origin": {
            "type": "string"
          },
          "title": {
            "$ref": "#/components/schemas/MultilingualValue"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "$ref": "#/components/schemas/MultilingualValue"
          }
        }
      },
      "AttributeTable": {
        "type": "object",
        "properties": {
          "element": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FCRelatedElement"
            }
          }
        }
      },
      "BatchEditParameter": {
        "required": [
          "value",
          "xpath"
        ],
        "type": "object",
        "properties": {
          "condition": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "xpath": {
            "type": "string"
          }
        },
        "xml": {
          "name": "edit"
        }
      },
      "BatchEditing": {
        "required": [
          "section"
        ],
        "type": "object",
        "properties": {
          "section": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Section"
            }
          }
        },
        "xml": {
          "name": "batchEditing"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "label": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Children": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedMetadataItem"
            }
          }
        }
      },
      "Codelist": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "entry": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entry"
            }
          },
          "name": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "codelist"
        }
      },
      "Crs": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "codeSpace": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "Dataset": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedMetadataItem"
            }
          }
        }
      },
      "Description": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedString"
            }
          }
        }
      },
      "Direction": {
        "type": "string",
        "enum": [
          "up",
          "down"
        ]
      },
      "DoiServerDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "landingPageTemplate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "publicUrl": {
            "type": "string"
          },
          "publicationGroups": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "description": "DOI server details"
      },
      "DuplicatedValueDto": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "Metadata field information to check"
      },
      "Element": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "condition": {
            "type": "string"
          },
          "context": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "description": {
            "type": "string"
          },
          "example": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "helper": {
            "$ref": "#/components/schemas/Helper"
          },
          "id": {
            "type": "number",
            "xml": {
              "attribute": true
            }
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "element"
        }
      },
      "Entry": {
        "required": [
          "code",
          "description",
          "label"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "hideInEditMode": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "label": {
            "type": "string"
          }
        },
        "xml": {
          "name": "entry"
        }
      },
      "ExtentDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "xpath": {
            "type": "string"
          }
        }
      },
      "FCRelatedElement": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "definition": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Values"
            }
          }
        }
      },
      "FCRelatedMetadataItem": {
        "required": [
          "description",
          "featureType",
          "mdType",
          "title"
        ],
        "type": "object",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "featureType": {
            "$ref": "#/components/schemas/FeatureType"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idx": {
            "type": "string"
          },
          "mdType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "origin": {
            "type": "string"
          },
          "title": {
            "$ref": "#/components/schemas/MultilingualValue"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "$ref": "#/components/schemas/MultilingualValue"
          }
        }
      },
      "Fcat": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FCRelatedMetadataItem"
            }
          }
        }
      },
      "FeatureResponse": {
        "type": "object",
        "properties": {
          "decodeMap": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "xml": {
          "name": "related"
        }
      },
      "FeatureType": {
        "type": "object",
        "properties": {
          "attributeTable": {
            "$ref": "#/components/schemas/AttributeTable"
          }
        }
      },
      "Field": {
        "type": "object",
        "properties": {
          "codelist": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "indexField": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "insertMode": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "name": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "removable": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          },
          "template": {
            "type": "string"
          },
          "use": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "xpath": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "FormatterData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          }
        },
        "xml": {
          "name": "formatter"
        }
      },
      "FormatterDataResponse": {
        "type": "object",
        "properties": {
          "formatters": {
            "type": "array",
            "xml": {
              "name": "formatter"
            },
            "items": {
              "$ref": "#/components/schemas/FormatterData"
            }
          }
        },
        "xml": {
          "name": "formatters"
        }
      },
      "GrantedAuthority": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string"
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "allowedCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataCategory"
            }
          },
          "defaultCategory": {
            "$ref": "#/components/schemas/MetadataCategory"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "enableAllowedCategories": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "logo": {
            "type": "string"
          },
          "minimumProfileForPrivileges": {
            "type": "string",
            "enum": [
              "Administrator",
              "UserAdmin",
              "Reviewer",
              "Editor",
              "RegisteredUser",
              "Guest",
              "Monitor"
            ]
          },
          "name": {
            "type": "string"
          },
          "referrer": {
            "type": "integer",
            "format": "int32"
          },
          "reserved": {
            "type": "boolean"
          },
          "website": {
            "type": "string"
          }
        },
        "description": "Group details"
      },
      "GroupOperations": {
        "type": "object",
        "properties": {
          "group": {
            "type": "integer",
            "format": "int32"
          },
          "operations": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "GroupPrivilege": {
        "type": "object",
        "properties": {
          "group": {
            "type": "integer",
            "format": "int32"
          },
          "operations": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "reserved": {
            "type": "boolean"
          },
          "restricted": {
            "type": "boolean"
          },
          "userGroup": {
            "type": "boolean"
          },
          "userProfile": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "string",
              "enum": [
                "Administrator",
                "UserAdmin",
                "Reviewer",
                "Editor",
                "RegisteredUser",
                "Guest",
                "Monitor"
              ]
            }
          },
          "userProfiles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Administrator",
                "UserAdmin",
                "Reviewer",
                "Editor",
                "RegisteredUser",
                "Guest",
                "Monitor"
              ]
            }
          }
        }
      },
      "Hasfeaturecats": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedMetadataItem"
            }
          }
        }
      },
      "Hassource": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedMetadataItem"
            }
          }
        }
      },
      "Helper": {
        "required": [
          "option"
        ],
        "type": "object",
        "properties": {
          "displayIf": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "editorMode": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "option": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            }
          },
          "rel": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "relAtt": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "sort": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "helper"
        }
      },
      "IProcessingReport": {
        "type": "object",
        "properties": {
          "ellapsedTimeInSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "endIsoDateTime": {
            "type": "string"
          },
          "running": {
            "type": "boolean"
          },
          "startIsoDateTime": {
            "type": "string"
          },
          "totalTimeInSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "ISODate": {
        "type": "object",
        "properties": {
          "dateAndTime": {
            "type": "string"
          },
          "dateAndTimeUtc": {
            "type": "string"
          },
          "dateAsString": {
            "type": "string"
          },
          "dateOnly": {
            "type": "boolean"
          },
          "dateYearMonthOnly": {
            "type": "boolean"
          },
          "dateYearOnly": {
            "type": "boolean"
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "internalDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "months": {
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "type": "integer",
            "format": "int32"
          },
          "timeAsString": {
            "type": "string"
          },
          "timeInSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "years": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "IndexResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "InfoReport": {
        "type": "object",
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "date": {
            "type": "string",
            "xml": {
              "name": "datetime"
            }
          },
          "draft": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "IsoLanguage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "shortCode": {
            "type": "string"
          }
        }
      },
      "JsonNode": {
        "type": "object"
      },
      "Language": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "inspire": {
            "type": "boolean"
          },
          "inspire_JPAWorkaround": {
            "type": "string",
            "writeOnly": true
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "lastCheck": {
            "$ref": "#/components/schemas/ISODate"
          },
          "lastState": {
            "type": "integer",
            "format": "int32"
          },
          "linkStatus": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkStatus"
            }
          },
          "linkType": {
            "type": "string",
            "enum": [
              "HTTP",
              "METADATA"
            ]
          },
          "protocol": {
            "type": "string"
          },
          "records": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataLink"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "LinkFilter": {
        "type": "object",
        "properties": {
          "lastState": {
            "type": "string"
          },
          "records": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "LinkStatus": {
        "type": "object",
        "properties": {
          "batchKey": {
            "type": "string"
          },
          "checkDate": {
            "$ref": "#/components/schemas/ISODate"
          },
          "failing": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "statusInfo": {
            "type": "string"
          },
          "statusValue": {
            "type": "string"
          }
        }
      },
      "ListRegionsResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CategoryResponse"
            }
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          },
          "region": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionResponse"
            }
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionResponse"
            }
          }
        },
        "xml": {
          "name": "response"
        }
      },
      "LocalizedString": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "value": {
            "type": "string"
          }
        }
      },
      "LogFileResponse": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "name": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "MapServer": {
        "type": "object",
        "properties": {
          "configurl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "namespacePrefix": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "pushStyleInWorkspace": {
            "$ref": "#/components/schemas/MapServer"
          },
          "pushStyleInWorkspace_JpaWorkaround": {
            "type": "string",
            "writeOnly": true
          },
          "stylerurl": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "wcsurl": {
            "type": "string"
          },
          "wfsurl": {
            "type": "string"
          },
          "wmsurl": {
            "type": "string"
          }
        },
        "description": "Mapserver details"
      },
      "MapService": {
        "type": "object",
        "properties": {
          "authType": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "urlType": {
            "type": "string"
          },
          "useProxy": {
            "type": "boolean"
          }
        }
      },
      "MeResponse": {
        "type": "object",
        "properties": {
          "admin": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "groupsWithEditor": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "groupsWithRegisteredUser": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "groupsWithReviewer": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "groupsWithUserAdmin": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organisation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "MetadataBatchApproveParameter": {
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string"
          },
          "directApproval": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "uuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MetadataBatchSubmitParameter": {
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "uuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MetadataCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "MetadataIdentifierTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "systemDefault": {
            "type": "boolean",
            "writeOnly": true
          },
          "systemProvided": {
            "type": "boolean"
          },
          "systemProvided_JPAWorkaround": {
            "type": "string",
            "writeOnly": true
          },
          "template": {
            "type": "string"
          }
        },
        "description": "Identifier template details"
      },
      "MetadataLink": {
        "type": "object",
        "properties": {
          "metadataId": {
            "type": "integer",
            "format": "int32"
          },
          "metadataUuid": {
            "type": "string"
          }
        }
      },
      "MetadataProcessingReport": {
        "type": "object",
        "properties": {
          "ellapsedTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "endIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          },
          "infos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfoReport"
            }
          },
          "metadata": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "metadataErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Report"
              }
            },
            "xml": {
              "name": "errors"
            }
          },
          "metadataInfos": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InfoReport"
              }
            },
            "xml": {
              "name": "infos"
            }
          },
          "numberOfNullRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordNotFound": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecords": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          },
          "numberOfRecordsNotEditable": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsProcessed": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsUnchanged": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsWithErrors": {
            "type": "integer",
            "format": "int32"
          },
          "running": {
            "type": "boolean"
          },
          "startIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "totalTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "type": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "uuid": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "report"
        }
      },
      "MetadataReplacementProcessingReport": {
        "type": "object",
        "properties": {
          "ellapsedTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "endIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          },
          "infos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfoReport"
            }
          },
          "metadata": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "metadataChanges": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReplaceReport"
            },
            "xml": {
              "name": "changes"
            }
          },
          "metadataErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Report"
              }
            },
            "xml": {
              "name": "errors"
            }
          },
          "metadataInfos": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InfoReport"
              }
            },
            "xml": {
              "name": "infos"
            }
          },
          "noProcessFoundCount": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfNullRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordNotFound": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecords": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          },
          "numberOfRecordsChanged": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsNotChanged": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsNotEditable": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsProcessed": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsUnchanged": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsWithErrors": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "string",
            "xml": {
              "attribute": true,
              "name": "process"
            }
          },
          "running": {
            "type": "boolean"
          },
          "startIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "totalTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "type": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "uuid": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "report"
        }
      },
      "MetadataResource": {
        "type": "object",
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "filename": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastModification": {
            "type": "string",
            "format": "date-time"
          },
          "metadataId": {
            "type": "integer",
            "format": "int32"
          },
          "metadataResourceExternalManagementProperties": {
            "$ref": "#/components/schemas/MetadataResourceExternalManagementProperties"
          },
          "metadataUuid": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "url": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ]
          }
        },
        "xml": {
          "name": "resource"
        }
      },
      "MetadataResourceExternalManagementProperties": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "validationStatus": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "VALID",
              "INCOMPLETE"
            ]
          }
        },
        "xml": {
          "name": "metadataResourceExternalManagementProperties"
        }
      },
      "MetadataStatusDto": {
        "type": "object",
        "properties": {
          "changeDate": {
            "$ref": "#/components/schemas/ISODate"
          },
          "changeMessage": {
            "type": "string"
          },
          "closeDate": {
            "$ref": "#/components/schemas/ISODate"
          },
          "currentState": {
            "type": "string"
          },
          "dueDate": {
            "$ref": "#/components/schemas/ISODate"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "metadataId": {
            "type": "integer",
            "format": "int32"
          },
          "owner": {
            "type": "integer",
            "format": "int32"
          },
          "previousState": {
            "type": "string"
          },
          "relatedMetadataStatusId": {
            "type": "integer",
            "format": "int32"
          },
          "statusValue": {
            "$ref": "#/components/schemas/StatusValue"
          },
          "titles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "MetadataStatusParameter": {
        "type": "object",
        "properties": {
          "changeMessage": {
            "type": "string"
          },
          "closeDate": {
            "type": "string"
          },
          "dueDate": {
            "type": "string"
          },
          "owner": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "workflow",
              "task",
              "event"
            ]
          }
        },
        "description": "Metadata status"
      },
      "MetadataStatusResponse": {
        "type": "object",
        "properties": {
          "authorEmail": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "authorProfile": {
            "type": "string"
          },
          "changeDate": {
            "$ref": "#/components/schemas/ISODate"
          },
          "changeMessage": {
            "type": "string"
          },
          "closeDate": {
            "$ref": "#/components/schemas/ISODate"
          },
          "currentState": {
            "type": "string"
          },
          "currentStateEmpty": {
            "type": "boolean"
          },
          "currentStatus": {
            "type": "string"
          },
          "dateChange": {
            "type": "string"
          },
          "dateClose": {
            "type": "string"
          },
          "dateDue": {
            "type": "string"
          },
          "dueDate": {
            "$ref": "#/components/schemas/ISODate"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "metadataId": {
            "type": "integer",
            "format": "int32"
          },
          "owner": {
            "type": "integer",
            "format": "int32"
          },
          "ownerEmail": {
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          },
          "ownerProfile": {
            "type": "string"
          },
          "previousState": {
            "type": "string"
          },
          "previousStateEmpty": {
            "type": "boolean"
          },
          "previousStatus": {
            "type": "string"
          },
          "relatedMetadataStatusId": {
            "type": "integer",
            "format": "int32"
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "statusValue": {
            "$ref": "#/components/schemas/StatusValue"
          },
          "title": {
            "type": "string"
          },
          "titles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "MetadataWorkflowStatusResponse": {
        "type": "object",
        "properties": {
          "currentStatus": {
            "$ref": "#/components/schemas/MetadataStatusDto"
          },
          "hasEditPermission": {
            "type": "boolean"
          },
          "reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusValue"
            }
          }
        }
      },
      "MultilingualValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedString"
            }
          }
        }
      },
      "Online": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedLinkItem"
            }
          }
        }
      },
      "Operation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "reserved": {
            "type": "boolean"
          },
          "reservedOperation": {
            "type": "string",
            "enum": [
              "view",
              "download",
              "editing",
              "notify",
              "dynamic",
              "featured"
            ]
          }
        }
      },
      "Option": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "xml": {
              "attribute": true,
              "name": "title"
            }
          },
          "isDefault": {
            "type": "boolean",
            "xml": {
              "attribute": true,
              "name": "default"
            }
          },
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "option"
        }
      },
      "OwnerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "records": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PageLink": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PageProperties": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "LINK",
              "HTML",
              "HTMLPAGE",
              "TEXT"
            ]
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "icon": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "pageId": {
            "type": "string"
          },
          "sections": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TOP",
                "FOOTER",
                "MENU",
                "SUBMENU",
                "CUSTOM_MENU1",
                "CUSTOM_MENU2",
                "CUSTOM_MENU3"
              ]
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "PUBLIC_ONLY",
              "GROUPS",
              "PRIVATE",
              "HIDDEN"
            ]
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "PaginatedUserSearchResponse": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSearchDto"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Parent": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedMetadataItem"
            }
          }
        }
      },
      "PasswordResetDto": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "password2": {
            "type": "string"
          },
          "passwordOld": {
            "type": "string"
          }
        }
      },
      "PasswordUpdateParameter": {
        "type": "object",
        "properties": {
          "changeKey": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "description": "The new password and a valid change key"
      },
      "Pattern": {
        "required": [
          "rules",
          "title"
        ],
        "type": "object",
        "properties": {
          "rules": {
            "$ref": "#/components/schemas/Rules"
          },
          "title": {
            "type": "string"
          }
        },
        "xml": {
          "name": "pattern"
        }
      },
      "Patterns": {
        "required": [
          "pattern"
        ],
        "type": "object",
        "properties": {
          "pattern": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pattern"
            }
          }
        },
        "xml": {
          "name": "patterns"
        }
      },
      "ProcessingReport": {
        "type": "object",
        "properties": {
          "ellapsedTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "endIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          },
          "infos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfoReport"
            }
          },
          "running": {
            "type": "boolean"
          },
          "startIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "totalTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "type": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "uuid": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "report"
        }
      },
      "ProxyConfiguration": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "host": {
            "type": "string"
          },
          "ignoreHostList": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "proxyConfiguredInSystemProperties": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PublicationOption": {
        "type": "object",
        "properties": {
          "additionalPublications": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservedOperation"
              }
            }
          },
          "name": {
            "type": "string"
          },
          "publicationGroup": {
            "$ref": "#/components/schemas/ReservedGroup"
          },
          "publicationOperations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedOperation"
            }
          }
        }
      },
      "RatingAverage": {
        "type": "object",
        "properties": {
          "lastComment": {
            "type": "string"
          },
          "ratingAverages": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ratingCount": {
            "type": "integer",
            "format": "int32"
          },
          "userfeedbackCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RatingCriteria": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "internal": {
            "type": "boolean"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RegionResponse": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "east": {
            "type": "number",
            "format": "double"
          },
          "hasGeom": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          },
          "id": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "north": {
            "type": "number",
            "format": "double"
          },
          "south": {
            "type": "number",
            "format": "double"
          },
          "west": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Related": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedMetadataItem"
            }
          }
        }
      },
      "RelatedItemType": {
        "type": "string",
        "enum": [
          "children",
          "parent",
          "brothersAndSisters",
          "siblings",
          "associated",
          "services",
          "datasets",
          "fcats",
          "hasfeaturecats",
          "sources",
          "hassources",
          "related",
          "onlines",
          "thumbnails"
        ]
      },
      "RelatedLinkItem": {
        "required": [
          "description",
          "title"
        ],
        "type": "object",
        "properties": {
          "applicationProfile": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "function": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idx": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "title": {
            "$ref": "#/components/schemas/MultilingualValue"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "$ref": "#/components/schemas/MultilingualValue"
          }
        }
      },
      "RelatedMetadataItem": {
        "required": [
          "description",
          "mdType",
          "title"
        ],
        "type": "object",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idx": {
            "type": "string"
          },
          "mdType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "origin": {
            "type": "string"
          },
          "title": {
            "$ref": "#/components/schemas/MultilingualValue"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "$ref": "#/components/schemas/MultilingualValue"
          }
        }
      },
      "RelatedResponse": {
        "type": "object",
        "properties": {
          "associated": {
            "$ref": "#/components/schemas/Associated"
          },
          "children": {
            "$ref": "#/components/schemas/Children"
          },
          "datasets": {
            "$ref": "#/components/schemas/Dataset"
          },
          "fcats": {
            "$ref": "#/components/schemas/Fcat"
          },
          "hasfeaturecats": {
            "$ref": "#/components/schemas/Hasfeaturecats"
          },
          "hassources": {
            "$ref": "#/components/schemas/Hassource"
          },
          "onlines": {
            "$ref": "#/components/schemas/Online"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "related": {
            "$ref": "#/components/schemas/Related"
          },
          "services": {
            "$ref": "#/components/schemas/Service"
          },
          "siblings": {
            "$ref": "#/components/schemas/Siblings"
          },
          "sources": {
            "$ref": "#/components/schemas/RelatedSource"
          },
          "thumbnails": {
            "$ref": "#/components/schemas/Thumbnail"
          }
        },
        "xml": {
          "name": "related"
        }
      },
      "RelatedSiblingMetadataItem": {
        "required": [
          "associationType",
          "description",
          "initiativeType",
          "mdType",
          "title"
        ],
        "type": "object",
        "properties": {
          "associationType": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idx": {
            "type": "string"
          },
          "initiativeType": {
            "type": "string"
          },
          "mdType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "origin": {
            "type": "string"
          },
          "title": {
            "$ref": "#/components/schemas/MultilingualValue"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "$ref": "#/components/schemas/MultilingualValue"
          }
        }
      },
      "RelatedSource": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedMetadataItem"
            }
          }
        }
      },
      "RelatedThumbnailItem": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idx": {
            "type": "string"
          },
          "title": {
            "$ref": "#/components/schemas/MultilingualValue"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "$ref": "#/components/schemas/MultilingualValue"
          }
        }
      },
      "ReplaceEntryChange": {
        "type": "object",
        "properties": {
          "changedVal": {
            "type": "string"
          },
          "fieldId": {
            "type": "string"
          },
          "originalVal": {
            "type": "string"
          }
        }
      },
      "ReplaceReport": {
        "type": "object",
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "date": {
            "type": "string",
            "xml": {
              "name": "datetime"
            }
          },
          "draft": {
            "type": "boolean"
          },
          "elementChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplaceEntryChange"
            }
          },
          "message": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "date": {
            "type": "string",
            "xml": {
              "name": "datetime"
            }
          },
          "draft": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "Reports": {
        "type": "object",
        "properties": {
          "report": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationReport"
            }
          }
        },
        "xml": {
          "name": "reports"
        }
      },
      "ReservedGroup": {
        "type": "string",
        "enum": [
          "all",
          "intranet",
          "guest"
        ]
      },
      "ReservedOperation": {
        "type": "string",
        "enum": [
          "view",
          "download",
          "editing",
          "notify",
          "dynamic",
          "featured"
        ]
      },
      "Rule": {
        "required": [
          "details"
        ],
        "type": "object",
        "properties": {
          "details": {
            "type": "string"
          },
          "group": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "id": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "msg": {
            "type": "string"
          },
          "ref": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "test": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "rule"
        }
      },
      "Rules": {
        "type": "object",
        "properties": {
          "rule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          }
        },
        "xml": {
          "name": "rules"
        }
      },
      "SavedQuery": {
        "type": "object",
        "properties": {
          "cleanValues": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "parameters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "xpath": {
            "type": "string"
          }
        }
      },
      "Section": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "name": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "Selection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "watchable": {
            "type": "boolean"
          }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedMetadataItem"
            }
          }
        }
      },
      "Setting": {
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "enum": [
              "STRING",
              "INT",
              "BOOLEAN",
              "JSON"
            ]
          },
          "editable": {
            "type": "boolean"
          },
          "editable_JpaWorkaround": {
            "type": "string",
            "writeOnly": true
          },
          "encrypted": {
            "type": "boolean"
          },
          "encrypted_JpaWorkaround": {
            "type": "string",
            "writeOnly": true
          },
          "internal": {
            "type": "boolean"
          },
          "internal_JpaWorkaround": {
            "type": "string",
            "writeOnly": true
          },
          "name": {
            "type": "string"
          },
          "position": {
            "type": "integer",
            "format": "int32"
          },
          "storedValue": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SettingsListResponse": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Setting"
            }
          }
        }
      },
      "SharingParameter": {
        "type": "object",
        "properties": {
          "clear": {
            "type": "boolean"
          },
          "privileges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupOperations"
            }
          }
        },
        "description": "Privileges"
      },
      "SharingResponse": {
        "type": "object",
        "properties": {
          "groupOwner": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "privileges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupPrivilege"
            }
          }
        }
      },
      "Siblings": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedSiblingMetadataItem"
            }
          }
        }
      },
      "SimpleMetadataProcessingReport": {
        "type": "object",
        "properties": {
          "ellapsedTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "endIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          },
          "infos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfoReport"
            }
          },
          "metadata": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "metadataErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Report"
              }
            },
            "xml": {
              "name": "errors"
            }
          },
          "metadataInfos": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InfoReport"
              }
            },
            "xml": {
              "name": "infos"
            }
          },
          "numberOfNullRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordNotFound": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecords": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          },
          "numberOfRecordsNotEditable": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsProcessed": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsUnchanged": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsWithErrors": {
            "type": "integer",
            "format": "int32"
          },
          "running": {
            "type": "boolean"
          },
          "startIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "totalTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "type": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "uuid": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "report"
        }
      },
      "SiteInformation": {
        "type": "object",
        "properties": {
          "catalogue": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "database": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "index": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "main": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "version": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "ascending": {
            "type": "boolean"
          },
          "direction": {
            "type": "string"
          },
          "ignoreCase": {
            "type": "boolean"
          },
          "nullHandling": {
            "type": "string"
          },
          "property": {
            "type": "string"
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "creationDate": {
            "$ref": "#/components/schemas/ISODate"
          },
          "filter": {
            "type": "string"
          },
          "groupOwner": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "listableInHeaderSelector": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "serviceRecord": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "portal",
              "subportal",
              "externalportal",
              "harvester"
            ]
          },
          "uiConfig": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "Status": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "RED",
              "UNINITIALIZED",
              "YELLOW",
              "GREEN",
              "DISABLED"
            ]
          }
        }
      },
      "StatusValue": {
        "type": "object",
        "properties": {
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "notificationLevel": {
            "type": "string",
            "enum": [
              "statusUserOwner",
              "catalogueAdministrator",
              "catalogueProfileAdministrator",
              "catalogueProfileUserAdmin",
              "catalogueProfileReviewer",
              "catalogueProfileEditor",
              "catalogueProfileRegisteredUser",
              "catalogueProfileGuest",
              "recordProfileReviewer",
              "recordUserAuthor",
              "recordGroupEmail"
            ]
          },
          "reserved": {
            "type": "boolean"
          },
          "reserved_JpaWorkaround": {
            "type": "string",
            "writeOnly": true
          },
          "type": {
            "type": "string",
            "enum": [
              "workflow",
              "task",
              "event"
            ]
          }
        }
      },
      "SuggestionType": {
        "required": [
          "name",
          "operational"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "id": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "name": {
            "type": "string"
          },
          "operational": {
            "type": "string"
          },
          "params": {
            "type": "string"
          },
          "process": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "target": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "SystemInfo": {
        "type": "object",
        "properties": {
          "buildDate": {
            "type": "string"
          },
          "buildJavaVendor": {
            "type": "string"
          },
          "buildJavaVersion": {
            "type": "string"
          },
          "buildOsInfo": {
            "type": "string"
          },
          "devMode": {
            "type": "boolean"
          },
          "scmRevision": {
            "type": "string"
          },
          "scmUrl": {
            "type": "string"
          },
          "stagingProfile": {
            "type": "string"
          },
          "subVersion": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ThesaurusInfo": {
        "type": "object",
        "properties": {
          "defaultNamespace": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dname": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "multilingualDescriptions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "multilingualTitles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "description": "Thesaurus information"
      },
      "Thumbnail": {
        "type": "object",
        "properties": {
          "item": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedThumbnailItem"
            }
          }
        }
      },
      "TransferRequest": {
        "type": "object",
        "properties": {
          "sourceGroup": {
            "type": "integer",
            "format": "int32"
          },
          "sourceUser": {
            "type": "integer",
            "format": "int32"
          },
          "targetGroup": {
            "type": "integer",
            "format": "int32"
          },
          "targetUser": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Translations": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "langId": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "UiSetting": {
        "type": "object",
        "properties": {
          "configuration": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "accountNonExpired": {
            "type": "boolean"
          },
          "accountNonLocked": {
            "type": "boolean"
          },
          "addresses": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantedAuthority"
            }
          },
          "credentialsNonExpired": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "emailAddresses": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "kind": {
            "type": "string"
          },
          "lastLoginDate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organisation": {
            "type": "string"
          },
          "primaryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "profile": {
            "type": "string",
            "enum": [
              "Administrator",
              "UserAdmin",
              "Reviewer",
              "Editor",
              "RegisteredUser",
              "Guest",
              "Monitor"
            ]
          },
          "security": {
            "$ref": "#/components/schemas/UserSecurity"
          },
          "surname": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "email": {
            "$ref": "#/components/schemas/UserDto"
          },
          "emailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "groupsEditor": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupsRegisteredUser": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupsReviewer": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupsUserAdmin": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organisation": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "UserFeedbackDTO": {
        "type": "object",
        "properties": {
          "approverName": {
            "type": "string"
          },
          "authorEmail": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "authorOrganization": {
            "type": "string"
          },
          "authorUserId": {
            "type": "integer",
            "format": "int32"
          },
          "captcha": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadataTitle": {
            "type": "string"
          },
          "metadataUUID": {
            "type": "string"
          },
          "optionPrivacy": {
            "type": "boolean"
          },
          "parentUuid": {
            "type": "string"
          },
          "published": {
            "type": "boolean"
          },
          "rating": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ratingAVG": {
            "type": "integer",
            "format": "int32"
          },
          "showApproveButton": {
            "type": "boolean"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "id": {
            "$ref": "#/components/schemas/UserGroupId"
          },
          "profile": {
            "type": "string",
            "enum": [
              "Administrator",
              "UserAdmin",
              "Reviewer",
              "Editor",
              "RegisteredUser",
              "Guest",
              "Monitor"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UserGroupId": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "profile": {
            "type": "string",
            "enum": [
              "Administrator",
              "UserAdmin",
              "Reviewer",
              "Editor",
              "RegisteredUser",
              "Guest",
              "Monitor"
            ]
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserGroupsResponse": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "type": "string"
          },
          "userProfile": {
            "type": "string"
          }
        }
      },
      "UserRegisterDto": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "captcha": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organisation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "description": "User details"
      },
      "UserSearchDto": {
        "type": "object",
        "properties": {
          "creationDate": {
            "type": "string"
          },
          "creator": {
            "type": "string"
          },
          "creatorId": {
            "type": "integer",
            "format": "int32"
          },
          "featuredType": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "logo": {
            "type": "string"
          },
          "names": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        },
        "description": "User search details"
      },
      "UserSecurity": {
        "type": "object",
        "properties": {
          "authType": {
            "type": "string"
          },
          "nodeId": {
            "type": "string"
          },
          "securityNotifications": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UPDATE_HASH_REQUIRED",
                "UNKNOWN"
              ]
            }
          },
          "securityNotificationsString": {
            "$ref": "#/components/schemas/UserSecurity"
          }
        }
      },
      "ValidationReport": {
        "required": [
          "displayPriority",
          "error",
          "id",
          "label",
          "patterns",
          "requirement",
          "success",
          "total"
        ],
        "type": "object",
        "properties": {
          "displayPriority": {
            "type": "integer"
          },
          "error": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "patterns": {
            "$ref": "#/components/schemas/Patterns"
          },
          "requirement": {
            "type": "string"
          },
          "schematronVerificationError": {
            "type": "string"
          },
          "success": {
            "type": "string"
          },
          "total": {
            "type": "string"
          }
        },
        "xml": {
          "name": "report"
        }
      },
      "Values": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "definition": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "XsltMetadataProcessingReport": {
        "type": "object",
        "properties": {
          "ellapsedTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "endIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          },
          "infos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfoReport"
            }
          },
          "metadata": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "metadataErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Report"
              }
            },
            "xml": {
              "name": "errors"
            }
          },
          "metadataInfos": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InfoReport"
              }
            },
            "xml": {
              "name": "infos"
            }
          },
          "noProcessFoundCount": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfNullRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordNotFound": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecords": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          },
          "numberOfRecordsNotEditable": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsProcessed": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsUnchanged": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfRecordsWithErrors": {
            "type": "integer",
            "format": "int32"
          },
          "processId": {
            "type": "string",
            "xml": {
              "attribute": true,
              "name": "process"
            }
          },
          "running": {
            "type": "boolean"
          },
          "startIsoDateTime": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "totalTimeInSeconds": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "type": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "uuid": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "report"
        }
      }
    }
  }
}
