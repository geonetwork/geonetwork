/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork API
 * This API exposes endpoints to GeoNetwork API.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OgcApiRecordsCatalog1Dto,
  OgcApiRecordsConfClassesDto,
  OgcApiRecordsExceptionDto,
  OgcApiRecordsGetCollections200ResponseDto,
  OgcApiRecordsGetRecords200ResponseDto,
  OgcApiRecordsLandingPageDto,
  OgcApiRecordsRecordGeoJSONDto,
  Schema,
} from '../models/index';
import {
    OgcApiRecordsCatalog1DtoFromJSON,
    OgcApiRecordsCatalog1DtoToJSON,
    OgcApiRecordsConfClassesDtoFromJSON,
    OgcApiRecordsConfClassesDtoToJSON,
    OgcApiRecordsExceptionDtoFromJSON,
    OgcApiRecordsExceptionDtoToJSON,
    OgcApiRecordsGetCollections200ResponseDtoFromJSON,
    OgcApiRecordsGetCollections200ResponseDtoToJSON,
    OgcApiRecordsGetRecords200ResponseDtoFromJSON,
    OgcApiRecordsGetRecords200ResponseDtoToJSON,
    OgcApiRecordsLandingPageDtoFromJSON,
    OgcApiRecordsLandingPageDtoToJSON,
    OgcApiRecordsRecordGeoJSONDtoFromJSON,
    OgcApiRecordsRecordGeoJSONDtoToJSON,
    SchemaFromJSON,
    SchemaToJSON,
} from '../models/index';

export interface DescribeCollectionRequest {
    catalogId: string;
}

export interface GetRecordRequest {
    catalogId: string;
    recordId: string;
}

export interface GetRecordsRequest {
    catalogId: string;
    bbox?: object;
    datetime?: string;
    limit?: number;
    q?: Array<string>;
    type?: Array<string>;
    externalId?: Array<string>;
    ids?: Array<string>;
    sortby?: Array<string>;
}

export interface GetSortablesRequest {
    catalogId: string;
}

/**
 * 
 */
export class OGCAPIRecordsApi extends runtime.BaseAPI {

    /**
     * Fetch a detailed description of the catalog with id `catalogId`.
     * describe the record collection with id `catalogId`
     */
    async describeCollectionRaw(requestParameters: DescribeCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OgcApiRecordsCatalog1Dto>> {
        if (requestParameters['catalogId'] == null) {
            throw new runtime.RequiredError(
                'catalogId',
                'Required parameter "catalogId" was null or undefined when calling describeCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ogcapi/records/collections/{catalogId}`.replace(`{${"catalogId"}}`, encodeURIComponent(String(requestParameters['catalogId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OgcApiRecordsCatalog1DtoFromJSON(jsonValue));
    }

    /**
     * Fetch a detailed description of the catalog with id `catalogId`.
     * describe the record collection with id `catalogId`
     */
    async describeCollection(requestParameters: DescribeCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OgcApiRecordsCatalog1Dto> {
        const response = await this.describeCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch list of catalogs offered by this API
     * the record collections
     */
    async getCollectionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OgcApiRecordsGetCollections200ResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ogcapi/records/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OgcApiRecordsGetCollections200ResponseDtoFromJSON(jsonValue));
    }

    /**
     * Fetch list of catalogs offered by this API
     * the record collections
     */
    async getCollections(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OgcApiRecordsGetCollections200ResponseDto> {
        const response = await this.getCollectionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * A list of all conformance classes specified in a standard that the server conforms to.
     * information about specifications that this API conforms to
     */
    async getConformanceDeclarationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OgcApiRecordsConfClassesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ogcapi/records/conformance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OgcApiRecordsConfClassesDtoFromJSON(jsonValue));
    }

    /**
     * A list of all conformance classes specified in a standard that the server conforms to.
     * information about specifications that this API conforms to
     */
    async getConformanceDeclaration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OgcApiRecordsConfClassesDto> {
        const response = await this.getConformanceDeclarationRaw(initOverrides);
        return await response.value();
    }

    /**
     * The landing page provides links to the API definition, the conformance statements and to the record collections in this dataset.
     * landing page
     */
    async getLandingPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OgcApiRecordsLandingPageDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ogcapi/records/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OgcApiRecordsLandingPageDtoFromJSON(jsonValue));
    }

    /**
     * The landing page provides links to the API definition, the conformance statements and to the record collections in this dataset.
     * landing page
     */
    async getLandingPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OgcApiRecordsLandingPageDto> {
        const response = await this.getLandingPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch the record with id `recordId` in the record collection with id `catalogId`.  Use content negotiation to request HTML or GeoJSON.
     * fetch a single record
     */
    async getRecordRaw(requestParameters: GetRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OgcApiRecordsRecordGeoJSONDto>> {
        if (requestParameters['catalogId'] == null) {
            throw new runtime.RequiredError(
                'catalogId',
                'Required parameter "catalogId" was null or undefined when calling getRecord().'
            );
        }

        if (requestParameters['recordId'] == null) {
            throw new runtime.RequiredError(
                'recordId',
                'Required parameter "recordId" was null or undefined when calling getRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ogcapi/records/collections/{catalogId}/items/{recordId}`.replace(`{${"catalogId"}}`, encodeURIComponent(String(requestParameters['catalogId']))).replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters['recordId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OgcApiRecordsRecordGeoJSONDtoFromJSON(jsonValue));
    }

    /**
     * Fetch the record with id `recordId` in the record collection with id `catalogId`.  Use content negotiation to request HTML or GeoJSON.
     * fetch a single record
     */
    async getRecord(requestParameters: GetRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OgcApiRecordsRecordGeoJSONDto> {
        const response = await this.getRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch records of the record collection with id `catalogId`.  Every record in a dataset belongs to a collection. A dataset may consist of multiple record collections. A record collection is often a collection of records of a similar type, based on a common schema.  Use content negotiation to request HTML or GeoJSON.
     * fetch records
     */
    async getRecordsRaw(requestParameters: GetRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OgcApiRecordsGetRecords200ResponseDto>> {
        if (requestParameters['catalogId'] == null) {
            throw new runtime.RequiredError(
                'catalogId',
                'Required parameter "catalogId" was null or undefined when calling getRecords().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['datetime'] != null) {
            queryParameters['datetime'] = requestParameters['datetime'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['externalId'] != null) {
            queryParameters['externalId'] = requestParameters['externalId'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['sortby'] != null) {
            queryParameters['sortby'] = requestParameters['sortby'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ogcapi/records/collections/{catalogId}/items`.replace(`{${"catalogId"}}`, encodeURIComponent(String(requestParameters['catalogId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OgcApiRecordsGetRecords200ResponseDtoFromJSON(jsonValue));
    }

    /**
     * Fetch records of the record collection with id `catalogId`.  Every record in a dataset belongs to a collection. A dataset may consist of multiple record collections. A record collection is often a collection of records of a similar type, based on a common schema.  Use content negotiation to request HTML or GeoJSON.
     * fetch records
     */
    async getRecords(requestParameters: GetRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OgcApiRecordsGetRecords200ResponseDto> {
        const response = await this.getRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the list of properties which can be used to sort the getRecords response.
     * get the list of sortable properties
     */
    async getSortablesRaw(requestParameters: GetSortablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Schema>> {
        if (requestParameters['catalogId'] == null) {
            throw new runtime.RequiredError(
                'catalogId',
                'Required parameter "catalogId" was null or undefined when calling getSortables().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ogcapi/records/collections/{catalogId}/sortables`.replace(`{${"catalogId"}}`, encodeURIComponent(String(requestParameters['catalogId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaFromJSON(jsonValue));
    }

    /**
     * Fetch the list of properties which can be used to sort the getRecords response.
     * get the list of sortable properties
     */
    async getSortables(requestParameters: GetSortablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Schema> {
        const response = await this.getSortablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
