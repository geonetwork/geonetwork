/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork API
 * This API exposes endpoints to GeoNetwork API.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExtentSpatial } from './ExtentSpatial';
import {
  ExtentSpatialFromJSON,
  ExtentSpatialFromJSONTyped,
  ExtentSpatialToJSON,
} from './ExtentSpatial';
import type { ExtentTemporal } from './ExtentTemporal';
import {
  ExtentTemporalFromJSON,
  ExtentTemporalFromJSONTyped,
  ExtentTemporalToJSON,
} from './ExtentTemporal';

/**
 * The extent of the features in the collection. In the Core only spatial and temporal extents are specified. Extensions may add additional members to represent other extents, for example, thermal or pressure ranges.  An array of extents is provided for each extent type (spatial, temporal). The first item in the array describes the overall extent of the data. All subsequent items describe more precise extents, e.g., to identify clusters of data. Clients only interested in the overall extent will only need to access the first extent in the array.
 * @export
 * @interface Extent
 */
export interface Extent {
  /**
   *
   * @type {ExtentSpatial}
   * @memberof Extent
   */
  spatial?: ExtentSpatial;
  /**
   *
   * @type {ExtentTemporal}
   * @memberof Extent
   */
  temporal?: ExtentTemporal;
}

/**
 * Check if a given object implements the Extent interface.
 */
export function instanceOfExtent(value: object): value is Extent {
  return true;
}

export function ExtentFromJSON(json: any): Extent {
  return ExtentFromJSONTyped(json, false);
}

export function ExtentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Extent {
  if (json == null) {
    return json;
  }
  return {
    spatial:
      json['spatial'] == null
        ? undefined
        : ExtentSpatialFromJSON(json['spatial']),
    temporal:
      json['temporal'] == null
        ? undefined
        : ExtentTemporalFromJSON(json['temporal']),
  };
}

export function ExtentToJSON(value?: Extent | null): any {
  if (value == null) {
    return value;
  }
  return {
    spatial: ExtentSpatialToJSON(value['spatial']),
    temporal: ExtentTemporalToJSON(value['temporal']),
  };
}
