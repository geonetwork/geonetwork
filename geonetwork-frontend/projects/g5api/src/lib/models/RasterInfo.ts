/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork API
 * This API exposes endpoints to GeoNetwork API.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RasterCornerCoordinates } from './RasterCornerCoordinates';
import {
  RasterCornerCoordinatesFromJSON,
  RasterCornerCoordinatesFromJSONTyped,
  RasterCornerCoordinatesToJSON,
} from './RasterCornerCoordinates';
import type { RasterBand } from './RasterBand';
import {
  RasterBandFromJSON,
  RasterBandFromJSONTyped,
  RasterBandToJSON,
} from './RasterBand';

/**
 *
 * @export
 * @interface RasterInfo
 */
export interface RasterInfo {
  /**
   *
   * @type {string}
   * @memberof RasterInfo
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof RasterInfo
   */
  format?: string;
  /**
   *
   * @type {string}
   * @memberof RasterInfo
   */
  formatDescription?: string;
  /**
   *
   * @type {string}
   * @memberof RasterInfo
   */
  dataType?: RasterInfoDataTypeEnum;
  /**
   *
   * @type {string}
   * @memberof RasterInfo
   */
  crs?: string;
  /**
   *
   * @type {Array<number>}
   * @memberof RasterInfo
   */
  wgs84Extent?: Array<number>;
  /**
   *
   * @type {RasterCornerCoordinates}
   * @memberof RasterInfo
   */
  rasterCornerCoordinates?: RasterCornerCoordinates;
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof RasterInfo
   */
  metadata?: { [key: string]: object };
  /**
   *
   * @type {Array<number>}
   * @memberof RasterInfo
   */
  size?: Array<number>;
  /**
   *
   * @type {Array<RasterBand>}
   * @memberof RasterInfo
   */
  bands?: Array<RasterBand>;
}

/**
 * @export
 */
export const RasterInfoDataTypeEnum = {
  Raster: 'RASTER',
  Vector: 'VECTOR',
} as const;
export type RasterInfoDataTypeEnum =
  (typeof RasterInfoDataTypeEnum)[keyof typeof RasterInfoDataTypeEnum];

/**
 * Check if a given object implements the RasterInfo interface.
 */
export function instanceOfRasterInfo(value: object): value is RasterInfo {
  return true;
}

export function RasterInfoFromJSON(json: any): RasterInfo {
  return RasterInfoFromJSONTyped(json, false);
}

export function RasterInfoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): RasterInfo {
  if (json == null) {
    return json;
  }
  return {
    description: json['description'] == null ? undefined : json['description'],
    format: json['format'] == null ? undefined : json['format'],
    formatDescription:
      json['formatDescription'] == null ? undefined : json['formatDescription'],
    dataType: json['dataType'] == null ? undefined : json['dataType'],
    crs: json['crs'] == null ? undefined : json['crs'],
    wgs84Extent: json['wgs84Extent'] == null ? undefined : json['wgs84Extent'],
    rasterCornerCoordinates:
      json['rasterCornerCoordinates'] == null
        ? undefined
        : RasterCornerCoordinatesFromJSON(json['rasterCornerCoordinates']),
    metadata: json['metadata'] == null ? undefined : json['metadata'],
    size: json['size'] == null ? undefined : json['size'],
    bands:
      json['bands'] == null
        ? undefined
        : (json['bands'] as Array<any>).map(RasterBandFromJSON),
  };
}

export function RasterInfoToJSON(value?: RasterInfo | null): any {
  if (value == null) {
    return value;
  }
  return {
    description: value['description'],
    format: value['format'],
    formatDescription: value['formatDescription'],
    dataType: value['dataType'],
    crs: value['crs'],
    wgs84Extent: value['wgs84Extent'],
    rasterCornerCoordinates: RasterCornerCoordinatesToJSON(
      value['rasterCornerCoordinates']
    ),
    metadata: value['metadata'],
    size: value['size'],
    bands:
      value['bands'] == null
        ? undefined
        : (value['bands'] as Array<any>).map(RasterBandToJSON),
  };
}
