/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork API
 * This API exposes endpoints to GeoNetwork API.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OgcApiRecordsLicenseDto } from './OgcApiRecordsLicenseDto';
import {
  OgcApiRecordsLicenseDtoFromJSON,
  OgcApiRecordsLicenseDtoFromJSONTyped,
  OgcApiRecordsLicenseDtoToJSON,
} from './OgcApiRecordsLicenseDto';
import type { OgcApiRecordsThemeDto } from './OgcApiRecordsThemeDto';
import {
  OgcApiRecordsThemeDtoFromJSON,
  OgcApiRecordsThemeDtoFromJSONTyped,
  OgcApiRecordsThemeDtoToJSON,
} from './OgcApiRecordsThemeDto';
import type { OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto } from './OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto';
import {
  OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoFromJSON,
  OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoFromJSONTyped,
  OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoToJSON,
} from './OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto';
import type { Language } from './Language';
import {
  LanguageFromJSON,
  LanguageFromJSONTyped,
  LanguageToJSON,
} from './Language';
import type { OgcApiRecordsFormatDto } from './OgcApiRecordsFormatDto';
import {
  OgcApiRecordsFormatDtoFromJSON,
  OgcApiRecordsFormatDtoFromJSONTyped,
  OgcApiRecordsFormatDtoToJSON,
} from './OgcApiRecordsFormatDto';
import type { OgcApiRecordsContactDto } from './OgcApiRecordsContactDto';
import {
  OgcApiRecordsContactDtoFromJSON,
  OgcApiRecordsContactDtoFromJSONTyped,
  OgcApiRecordsContactDtoToJSON,
} from './OgcApiRecordsContactDto';

/**
 *
 * @export
 * @interface OgcApiRecordsRecordGeoJSONPropertiesDto
 */
export interface OgcApiRecordsRecordGeoJSONPropertiesDto {
  /**
   * The extensions/conformance classes used in this record.
   * @type {Array<string>}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  conformsTo?: Array<string>;
  /**
   * The date this record was created in the server.
   * @type {Date}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  created?: Date;
  /**
   * The most recent date on which the record was changed.
   * @type {Date}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  updated?: Date;
  /**
   * The nature or genre of the resource. The value should be a code, convenient for filtering records. Where available, a link to the canonical URI of the record type resource will be added to the 'links' property.
   * @type {string}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  type?: string;
  /**
   * A human-readable name given to the resource.
   * @type {string}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  title?: string;
  /**
   * A free-text account of the resource.
   * @type {string}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  description?: string;
  /**
   * The topic or topics of the resource. Typically represented using free-form keywords, tags, key phrases, or classification codes.
   * @type {Array<string>}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  keywords?: Array<string>;
  /**
   * A knowledge organization system used to classify the resource.
   * @type {Array<OgcApiRecordsThemeDto>}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  themes?: Array<OgcApiRecordsThemeDto>;
  /**
   *
   * @type {Language}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  language?: Language;
  /**
   * This list of languages in which this record is available.
   * @type {Array<Language>}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  languages?: Array<Language>;
  /**
   * The list of languages in which the resource described by this record is available.
   * @type {Array<Language>}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  resourceLanguages?: Array<Language>;
  /**
   * An identifier for the resource assigned by an external (to the catalog) entity.
   * @type {Array<OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto>}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  externalIds?: Array<OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto>;
  /**
   * A list of available distributions of the resource.
   * @type {Array<OgcApiRecordsFormatDto>}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  formats?: Array<OgcApiRecordsFormatDto>;
  /**
   * A list of contacts qualified by their role(s) in association to the record or the resource described by the record.
   * @type {Array<OgcApiRecordsContactDto>}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  contacts?: Array<OgcApiRecordsContactDto>;
  /**
   *
   * @type {OgcApiRecordsLicenseDto}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  license?: OgcApiRecordsLicenseDto;
  /**
   * A statement that concerns all rights not addressed by the license such as a copyright statement.
   * @type {string}
   * @memberof OgcApiRecordsRecordGeoJSONPropertiesDto
   */
  rights?: string;
}

/**
 * Check if a given object implements the OgcApiRecordsRecordGeoJSONPropertiesDto interface.
 */
export function instanceOfOgcApiRecordsRecordGeoJSONPropertiesDto(
  value: object
): value is OgcApiRecordsRecordGeoJSONPropertiesDto {
  return true;
}

export function OgcApiRecordsRecordGeoJSONPropertiesDtoFromJSON(
  json: any
): OgcApiRecordsRecordGeoJSONPropertiesDto {
  return OgcApiRecordsRecordGeoJSONPropertiesDtoFromJSONTyped(json, false);
}

export function OgcApiRecordsRecordGeoJSONPropertiesDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): OgcApiRecordsRecordGeoJSONPropertiesDto {
  if (json == null) {
    return json;
  }
  return {
    conformsTo: json['conformsTo'] == null ? undefined : json['conformsTo'],
    created: json['created'] == null ? undefined : new Date(json['created']),
    updated: json['updated'] == null ? undefined : new Date(json['updated']),
    type: json['type'] == null ? undefined : json['type'],
    title: json['title'] == null ? undefined : json['title'],
    description: json['description'] == null ? undefined : json['description'],
    keywords: json['keywords'] == null ? undefined : json['keywords'],
    themes:
      json['themes'] == null
        ? undefined
        : (json['themes'] as Array<any>).map(OgcApiRecordsThemeDtoFromJSON),
    language:
      json['language'] == null ? undefined : LanguageFromJSON(json['language']),
    languages:
      json['languages'] == null
        ? undefined
        : (json['languages'] as Array<any>).map(LanguageFromJSON),
    resourceLanguages:
      json['resourceLanguages'] == null
        ? undefined
        : (json['resourceLanguages'] as Array<any>).map(LanguageFromJSON),
    externalIds:
      json['externalIds'] == null
        ? undefined
        : (json['externalIds'] as Array<any>).map(
            OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoFromJSON
          ),
    formats:
      json['formats'] == null
        ? undefined
        : (json['formats'] as Array<any>).map(OgcApiRecordsFormatDtoFromJSON),
    contacts:
      json['contacts'] == null
        ? undefined
        : (json['contacts'] as Array<any>).map(OgcApiRecordsContactDtoFromJSON),
    license:
      json['license'] == null
        ? undefined
        : OgcApiRecordsLicenseDtoFromJSON(json['license']),
    rights: json['rights'] == null ? undefined : json['rights'],
  };
}

export function OgcApiRecordsRecordGeoJSONPropertiesDtoToJSON(
  value?: OgcApiRecordsRecordGeoJSONPropertiesDto | null
): any {
  if (value == null) {
    return value;
  }
  return {
    conformsTo: value['conformsTo'],
    created:
      value['created'] == null ? undefined : value['created'].toISOString(),
    updated:
      value['updated'] == null ? undefined : value['updated'].toISOString(),
    type: value['type'],
    title: value['title'],
    description: value['description'],
    keywords: value['keywords'],
    themes:
      value['themes'] == null
        ? undefined
        : (value['themes'] as Array<any>).map(OgcApiRecordsThemeDtoToJSON),
    language: LanguageToJSON(value['language']),
    languages:
      value['languages'] == null
        ? undefined
        : (value['languages'] as Array<any>).map(LanguageToJSON),
    resourceLanguages:
      value['resourceLanguages'] == null
        ? undefined
        : (value['resourceLanguages'] as Array<any>).map(LanguageToJSON),
    externalIds:
      value['externalIds'] == null
        ? undefined
        : (value['externalIds'] as Array<any>).map(
            OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoToJSON
          ),
    formats:
      value['formats'] == null
        ? undefined
        : (value['formats'] as Array<any>).map(OgcApiRecordsFormatDtoToJSON),
    contacts:
      value['contacts'] == null
        ? undefined
        : (value['contacts'] as Array<any>).map(OgcApiRecordsContactDtoToJSON),
    license: OgcApiRecordsLicenseDtoToJSON(value['license']),
    rights: value['rights'],
  };
}
