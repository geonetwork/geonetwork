/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork API
 * This API exposes endpoints to GeoNetwork API.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OgcApiRecordsLinkTemplateDto
 */
export interface OgcApiRecordsLinkTemplateDto {
    /**
     * The type or semantics of the relation.
     * @type {string}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    rel?: string;
    /**
     * A hint indicating what the media type of the result of dereferencing the link should be.
     * @type {string}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    type?: string;
    /**
     * A hint indicating what the language of the result of dereferencing the link should be.
     * @type {string}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    hreflang?: string;
    /**
     * Used to label the destination of a link such that it can be used as a human-readable identifier.
     * @type {string}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    length?: number;
    /**
     * Date of creation of the resource pointed to by the link.
     * @type {Date}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    created?: Date;
    /**
     * Most recent date on which the resource pointed to by the link was changed.
     * @type {Date}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    updated?: Date;
    /**
     * Supplies a resolvable URI to a remote resource (or resource fragment).
     * @type {string}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    uriTemplate: string;
    /**
     * The base URI to which the variable name can be appended to retrieve the definition of the variable as a JSON Schema fragment.
     * @type {string}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    varBase?: string;
    /**
     * This object contains one key per substitution variable in the templated URL.  Each key defines the schema of one substitution variable using a JSON Schema fragment and can thus include things like the data type of the variable, enumerations, minimum values, maximum values, etc.
     * @type {object}
     * @memberof OgcApiRecordsLinkTemplateDto
     */
    variables?: object;
}

/**
 * Check if a given object implements the OgcApiRecordsLinkTemplateDto interface.
 */
export function instanceOfOgcApiRecordsLinkTemplateDto(value: object): value is OgcApiRecordsLinkTemplateDto {
    if (!('uriTemplate' in value) || value['uriTemplate'] === undefined) return false;
    return true;
}

export function OgcApiRecordsLinkTemplateDtoFromJSON(json: any): OgcApiRecordsLinkTemplateDto {
    return OgcApiRecordsLinkTemplateDtoFromJSONTyped(json, false);
}

export function OgcApiRecordsLinkTemplateDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): OgcApiRecordsLinkTemplateDto {
    if (json == null) {
        return json;
    }
    return {
        
        'rel': json['rel'] == null ? undefined : json['rel'],
        'type': json['type'] == null ? undefined : json['type'],
        'hreflang': json['hreflang'] == null ? undefined : json['hreflang'],
        'title': json['title'] == null ? undefined : json['title'],
        'length': json['length'] == null ? undefined : json['length'],
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
        'uriTemplate': json['uriTemplate'],
        'varBase': json['varBase'] == null ? undefined : json['varBase'],
        'variables': json['variables'] == null ? undefined : json['variables'],
    };
}

export function OgcApiRecordsLinkTemplateDtoToJSON(value?: OgcApiRecordsLinkTemplateDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'rel': value['rel'],
        'type': value['type'],
        'hreflang': value['hreflang'],
        'title': value['title'],
        'length': value['length'],
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'updated': value['updated'] == null ? undefined : ((value['updated']).toISOString()),
        'uriTemplate': value['uriTemplate'],
        'varBase': value['varBase'],
        'variables': value['variables'],
    };
}

